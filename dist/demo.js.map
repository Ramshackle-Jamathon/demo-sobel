{"version":3,"sources":["webpack:///demo.js","webpack:///webpack/bootstrap dae5ee476e17d6b934f0","webpack:///./~/gl-matrix/src/gl-matrix/common.js","webpack:///./~/gl-shader/lib/GLError.js","webpack:///./~/gl-matrix/src/gl-matrix.js","webpack:///./~/gl-matrix/src/gl-matrix/mat3.js","webpack:///./~/gl-matrix/src/gl-matrix/vec3.js","webpack:///./~/gl-matrix/src/gl-matrix/vec4.js","webpack:///./~/gl-shader/lib/reflect.js","webpack:///./~/glsl-tokenizer/lib/builtins.js","webpack:///./~/glsl-tokenizer/lib/literals.js","webpack:///(webpack)/buildin/global.js","webpack:///./~/gl-buffer/buffer.js","webpack:///./~/gl-flyCamera/index.js","webpack:///./~/gl-shader/index.js","webpack:///./shaders/scene.frag","webpack:///./shaders/scene.vert","webpack:///./~/stats.js/build/stats.min.js","webpack:///./~/add-line-numbers/index.js","webpack:///./~/atob-lite/atob-browser.js","webpack:///./~/base64-js/index.js","webpack:///./~/bit-twiddle/twiddle.js","webpack:///./~/buffer/index.js","webpack:///./~/cwise-compiler/compiler.js","webpack:///./~/cwise-compiler/lib/compile.js","webpack:///./~/cwise-compiler/lib/thunk.js","webpack:///./~/dup/dup.js","webpack:///./~/gl-constants/1.0/numbers.js","webpack:///./~/gl-constants/lookup.js","webpack:///./~/gl-format-compiler-error/index.js","webpack:///./~/gl-matrix/src/gl-matrix/mat2.js","webpack:///./~/gl-matrix/src/gl-matrix/mat2d.js","webpack:///./~/gl-matrix/src/gl-matrix/mat4.js","webpack:///./~/gl-matrix/src/gl-matrix/quat.js","webpack:///./~/gl-matrix/src/gl-matrix/vec2.js","webpack:///./~/gl-shader/lib/create-attributes.js","webpack:///./~/gl-shader/lib/create-uniforms.js","webpack:///./~/gl-shader/lib/runtime-reflect.js","webpack:///./~/gl-shader/lib/shader-cache.js","webpack:///./~/glsl-shader-name/index.js","webpack:///./~/glsl-tokenizer/index.js","webpack:///./~/glsl-tokenizer/lib/builtins-300es.js","webpack:///./~/glsl-tokenizer/lib/literals-300es.js","webpack:///./~/glsl-tokenizer/lib/operators.js","webpack:///./~/glsl-tokenizer/string.js","webpack:///./~/ieee754/index.js","webpack:///./~/iota-array/iota.js","webpack:///./~/is-buffer/index.js","webpack:///./~/isarray/index.js","webpack:///./~/ndarray-ops/ndarray-ops.js","webpack:///./~/ndarray/ndarray.js","webpack:///./~/pad-left/index.js","webpack:///./~/repeat-string/index.js","webpack:///./~/sprintf-js/src/sprintf.js","webpack:///./~/typedarray-pool/pool.js","webpack:///./~/uniq/uniq.js","webpack:///./~/weakmap-shim/create-store.js","webpack:///./~/weakmap-shim/hidden-store.js","webpack:///./~/weakmap-shim/index.js","webpack:///./index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","glMatrix","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","ENABLE_SIMD","SIMD_AVAILABLE","this","USE_SIMD","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","GLError","rawError","shortMessage","longMessage","message","stack","Error","constructor","mat2","mat2d","mat3","mat4","quat","vec2","vec3","vec4","create","out","fromMat4","clone","copy","fromValues","m00","m01","m02","m10","m11","m12","m20","m21","m22","set","identity","transpose","a01","a02","a12","invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","det","adjoint","determinant","multiply","b00","b02","b10","b12","b20","b22","mul","translate","v","x","y","rotate","rad","sin","cos","scale","fromTranslation","fromRotation","fromScaling","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","str","frob","sqrt","pow","add","subtract","sub","multiplyScalar","multiplyScalarAndAdd","exactEquals","a0","a1","a2","a3","a4","a5","a6","a7","a8","b0","b1","b2","b3","b4","b5","b6","b7","b8","divide","div","ceil","floor","min","round","scaleAndAdd","distance","dist","squaredDistance","sqrDist","length","len","squaredLength","sqrLen","negate","inverse","normalize","dot","cross","ax","ay","az","bx","by","bz","lerp","t","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","ix","iy","iz","iw","rotateX","rotateY","rotateZ","forEach","vec","stride","offset","count","fn","arg","angle","tempA","tempB","cosine","acos","aw","makeReflectTypes","uniforms","useIndex","obj","parts","split","j","k","parseInt","g","Function","eval","e","window","GLBuffer","gl","handle","usage","updateTypeArray","data","dataLen","BYTES_PER_ELEMENT","bufferData","bufferSubData","makeScratchTypeArray","array","dtype","res","pool","malloc","isPacked","shape","createBuffer","ARRAY_BUFFER","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","STREAM_DRAW","result","update","ops","ndarray","SUPPORTED_TYPES","proto","bind","bindBuffer","unbind","dispose","deleteBuffer","indexOf","ext","getExtension","subarray","tmp","size","ndt","assign","free","isArray","undefined","flyCamera","opts","domElement","document","setAttribute","movementSpeed","rollSpeed","dragToLook","autoForward","paused","mouseStatus","tmpQuaternion","moveVector","rotationVector","position","quaternion","moveState","up","down","left","right","forward","back","pitchUp","pitchDown","yawLeft","yawRight","rollLeft","rollRight","keydown","event","altKey","preventDefault","keyCode","movementSpeedMultiplier","updateMovementVector","updateRotationVector","keyup","mousemove","container","getContainerDimensions","halfWidth","halfHeight","pageX","pageY","mousedown","focus","stopPropagation","button","mouseup","delta","moveMult","rotMult","offsetWidth","offsetHeight","offsetLeft","offsetTop","innerWidth","innerHeight","start","addEventListener","Shader","_vref","_fref","_relink","vertShader","fragShader","program","attributes","types","compareAttributes","createShader","vertSource","fragSource","shader","createUniformWrapper","createAttributeWrapper","makeReflect","shaderCache","runtime","useProgram","relink","wrapper","attributeNames","attributeLocations","uniformLocations","getUniformLocation","arguments","vertex","fragment","pvref","VERTEX_SHADER","pfref","FRAGMENT_SHADER","testProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","errLog","getProgramInfoLog","deleteProgram","slice","sort","attributeUnpacked","attr","charAt","locVector","push","location","locations","curLocation","f","appendChild","dom","u","children","style","display","createElement","cssText","performance","Date","now","Panel","h","self","memory","REVISION","addPanel","showPanel","begin","end","usedJSHeapSize","jsHeapSizeLimit","setMode","Infinity","devicePixelRatio","width","height","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","drawImage","addLineNumbers","string","delim","lines","totalDigits","String","map","line","digits","prefix","padLeft","join","atob","placeHoldersCount","b64","byteLength","toByteArray","placeHolders","arr","Arr","L","revLookup","charCodeAt","tripletToBase64","num","lookup","encodeChunk","uint8","output","fromByteArray","extraBytes","maxChunkLength","len2","Uint8Array","code","countTrailingZeros","INT_BITS","INT_MAX","INT_MIN","sign","mask","isPow2","log2","shift","log10","popCount","nextPow2","prevPow2","parity","REVERSE_TABLE","tab","reverse","interleave2","deinterleave2","interleave3","deinterleave3","nextCombination","global","typedArraySupport","__proto__","foo","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","that","RangeError","encodingOrOffset","allocUnsafe","from","TypeError","ArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","alloc","fill","encoding","checked","isEncoding","actual","write","fromArrayLike","byteOffset","isBuffer","buffer","isnan","toString","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","val","dir","isNaN","arrayIndexOf","lastIndexOf","read","buf","indexSize","readUInt16BE","arrLength","valLength","foundIndex","found","hexWrite","Number","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","ret","toHex","bytes","checkOffset","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","stringtrim","replace","INVALID_BASE64_RE","trim","units","leadSurrogate","byteArray","hi","lo","src","dst","INSPECT_MAX_BYTES","poolSize","_augment","Symbol","species","allocUnsafeSlow","_isBuffer","compare","concat","list","pos","swap16","swap32","swap64","inspect","match","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","newBuf","sliceLen","readUIntLE","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","maxBytes","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","Procedure","argTypes","shimArgs","arrayArgs","arrayBlockIndices","scalarArgs","offsetArgs","offsetArgIndex","indexArgs","shapeArgs","funcName","pre","body","post","debug","compileCwise","user_args","proc","proc_args","args","arg_type","blockIndices","lvalue","printCode","blockSize","createThunk","innerFill","order","dimension","nargs","has_index","vars","idx","pidx","outerFill","matched","indexStr","countMatches","orders","processBlock","block","dtypes","carg","re","RegExp","ptrStr","arrNum","offArgIndex","offArg","localStr","arrStr","reStrArr","ptrStrArr","typeSummary","summary","allEqual","generateCWiseOp","typesig","blockBegin","blockEnd","loopBegin","loopEnd","loopOrders","newOrder","arglist","zeros","off_arg","init_string","thisVars","uniq","console","log","loopName","thunkName","string_typesig","shapeLengthConditions","shapeConditions","thunk","compile","dupe_array","dupe_number","dupe","0","1","2","3","4","5","6","256","512","513","514","515","516","517","518","519","768","769","770","771","772","773","774","775","776","1024","1028","1029","1032","1280","1281","1282","1285","1286","2304","2305","2849","2884","2885","2886","2928","2929","2930","2931","2932","2960","2961","2962","2963","2964","2965","2966","2967","2968","2978","3024","3042","3088","3089","3106","3107","3317","3333","3379","3386","3408","3410","3411","3412","3413","3414","3415","3553","4352","4353","4354","5120","5121","5122","5123","5124","5125","5126","5386","5890","6401","6402","6406","6407","6408","6409","6410","7680","7681","7682","7683","7936","7937","7938","9728","9729","9984","9985","9986","9987","10240","10241","10242","10243","10497","10752","16384","32769","32770","32771","32772","32773","32774","32777","32778","32779","32819","32820","32823","32824","32854","32855","32873","32926","32928","32936","32937","32938","32939","32968","32969","32970","32971","33071","33170","33189","33306","33635","33648","33901","33902","33984","33985","33986","33987","33988","33989","33990","33991","33992","33993","33994","33995","33996","33997","33998","33999","34000","34001","34002","34003","34004","34005","34006","34007","34008","34009","34010","34011","34012","34013","34014","34015","34016","34024","34041","34055","34056","34067","34068","34069","34070","34071","34072","34073","34074","34076","34338","34339","34340","34341","34342","34373","34466","34467","34660","34661","34816","34817","34818","34819","34877","34921","34922","34930","34962","34963","34964","34965","34975","35040","35044","35048","35632","35633","35660","35661","35663","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","35712","35713","35714","35715","35716","35717","35718","35719","35720","35721","35722","35724","35725","36003","36004","36005","36006","36007","36048","36049","36050","36051","36053","36054","36055","36057","36061","36064","36096","36128","36160","36161","36162","36163","36164","36168","36176","36177","36178","36179","36180","36181","36194","36336","36337","36338","36339","36340","36341","36346","36347","36348","36349","37440","37441","37442","37443","37444","gl10","number","formatCompilerError","shaderName","typeName","glConstants","longForm","sprintf","shortForm","errorStrings","errors","errorString","lineNo","long","short","v0","v1","LDU","D","U","tx","ty","aa","ab","ac","ad","atx","aty","scalar","SIMD","m03","m13","m23","m30","m31","m32","m33","tmp01","tmp23","out0","out1","out2","out3","Float32x4","load","shuffle","store","row0","row1","row2","row3","tmp1","minor0","minor1","minor2","minor3","swizzle","reciprocalApproximation","t0","axis","splat","a_1","a_2","a_0","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","getTranslation","mat","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","frustum","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","tan","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","a9","a14","a15","b9","b13","b14","b15","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","setAxisAngle","setAxes","matr","view","fromMat3","getAxisAngle","out_axis","bw","calculateW","slerp","omega","cosom","sinom","scale0","scale1","sqlerp","temp1","temp2","invDot","conjugate","fRoot","fTrace","transformMat2","transformMat2d","ShaderAttribute","index","constFunc","_gl","_wrapper","_index","_locations","_dimension","_constFunc","addVectorAttribute","constFuncArgs","varNames","disableVertexAttribArray","addMatrixAttribute","attrs","pointer","normalized","FLOAT","vertexAttribPointer","enableVertexAttribArray","scratch","vertexAttrib","loc","locs","x3","makeVector","makeGetter","makePropSetter","path","vidx","enumerateIndices","indices","id","prop","tprefix","makeSetter","item","defaultValue","storeProperty","child","processObject","coallesced","coallesceUniforms","getType","GL_TABLE","typeNames","keys","GL_TO_GLSL_TYPES","tn","runtimeUniforms","numUniforms","ACTIVE_UNIFORMS","info","getActiveUniform","runtimeAttributes","numAttributes","ACTIVE_ATTRIBUTES","getActiveAttrib","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","ShaderReference","programs","cache","ContextCache","shaders","compileShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fmt","warn","vshader","fshader","attribs","bindAttribLocation","getCache","ctxCache","CACHE","getShaderReference","vref","fref","getProgram","weakMap","WeakMap","SHADER_COUNTER","deleteShader","isShader","shaderObj","token","prog","isProgram","getName","tokens","tokenize","opt","mode","column","col","chunk","input","last","BLOCK_COMMENT","block_comment","LINE_COMMENT","line_comment","PREPROCESSOR","preprocessor","OPERATOR","operator","INTEGER","integer","HEX","hex","decimal","TOKEN","readtoken","WHITESPACE","whitespace","NORMAL","normal","total","content","EOF","test","isnum","isoperator","determine_operator","is_composite_operator","operators","contentstr","allLiterals","KEYWORD","allBuiltins","BUILTIN","IDENT","builtins100","literals100","version","builtins300es","literals300es","v100","filter","tokenizeString","generator","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","LN2","iota","isSlowBuffer","fixup","EmptyProc","rvalue","localVars","pcompile","makeOp","assign_ops","mod","band","bor","bxor","lshift","rshift","rrshift","op","unary_ops","not","bnot","neg","recip","binary_ops","and","or","eq","neq","lt","gt","leq","geq","math_unary","math_comm","math_noncomm","any","all","sum","prod","norm2squared","norm2","norminf","norm1","sup","inf","argmin","argmax","assigns","compare1st","terms","compileConstructor","className","useGetters","procedure","CACHED_CONSTRUCTORS","index_str","shapeArg","strideArg","a_vars","c_vars","tShape","tStride","arrayDType","hasTypedArrays","wrappedNDArrayCtor","ctor","ctor_list","Float64Array","float32","float64","int8","int16","int32","uint16","uint32","uint8_clamped","generic","repeat","ch","key","parse","format","get_type","variable","str_repeat","multiplier","not_string","json","not_json","text","modulo","placeholder","key_access","index_access","parse_tree","argv","pad","pad_character","pad_length","cursor","tree_length","node_type","is_positive","JSON","stringify","toExponential","parseFloat","toFixed","toPrecision","substring","toUpperCase","_fmt","arg_names","exec","SyntaxError","field_list","replacement_field","field_match","vsprintf","_argv","splice","freeArrayBuffer","log_n","bits","DATA","freeTypedArray","mallocArrayBuffer","pop","mallocUint8","mallocUint16","Uint16Array","mallocUint32","Uint32Array","mallocInt8","Int8Array","mallocInt16","Int16Array","mallocInt32","Int32Array","mallocFloat","mallocDouble","mallocUint8Clamped","hasUint8C","Uint8ClampedArray","mallocDataView","DataView","mallocBuffer","BUFFER","dup","__TYPEDARRAY_POOL","UINT8","UINT16","UINT32","INT8","INT16","INT32","DOUBLE","UINT8C","POOL","freeUint8","freeUint16","freeUint32","freeInt8","freeInt16","freeInt32","freeFloat32","freeFloat","freeFloat64","freeDouble","freeUint8Clamped","freeDataView","freeBuffer","mallocFloat32","mallocFloat64","clearCache","unique_pred","ptr","unique_eq","unique","sorted","createStore","valueOf","hiddenStore","writable","privates","fallback","has","delete","__WEBPACK_IMPORTED_MODULE_0_gl_shader__","__WEBPACK_IMPORTED_MODULE_0_gl_shader___default","__WEBPACK_IMPORTED_MODULE_1_gl_buffer__","__WEBPACK_IMPORTED_MODULE_1_gl_buffer___default","__WEBPACK_IMPORTED_MODULE_2_gl_flyCamera__","__WEBPACK_IMPORTED_MODULE_2_gl_flyCamera___default","__WEBPACK_IMPORTED_MODULE_3_gl_matrix__","__WEBPACK_IMPORTED_MODULE_3_gl_matrix___default","__WEBPACK_IMPORTED_MODULE_4__shaders_scene_vert__","__WEBPACK_IMPORTED_MODULE_4__shaders_scene_vert___default","__WEBPACK_IMPORTED_MODULE_5__shaders_scene_frag__","__WEBPACK_IMPORTED_MODULE_5__shaders_scene_frag___default","__WEBPACK_IMPORTED_MODULE_6_stats_js__","__WEBPACK_IMPORTED_MODULE_6_stats_js___default","demo","stats","controls","defaultQuality","quality","lastTimeStamp","startTime","ellapsedTime","canvas","createContext","render","dt","uResolution","vectorDir","vectorUp","uCamPosition","uCamUp","uCamDir","uGlobalTime","uMinimumDistance","uNormalDistance","uAnaglyph","uForms","uSpaceFolding","drawArrays","TRIANGLES","loop","timeStamp","resizeCanvas","requestAnimationFrame","viewport","resize","displayWidth","displayHeight","shiftKey","init"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAI,EAAAJ,EACAK,GAAA,EACAH,WAUA,OANAJ,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,GAAA,EAGAF,EAAAD,QAvBA,GAAAD,KA+DA,OAnCAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAK,EAAA,SAAAK,GAA2C,MAAAA,IAG3CV,EAAAW,EAAA,SAAAR,EAAAS,EAAAC,GACAb,EAAAc,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAb,EAAAoB,EAAA,SAAAhB,GACA,GAAAS,GAAAT,KAAAiB,WACA,WAA2B,MAAAjB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAJ,GAAAW,EAAAE,EAAA,IAAAA,GACAA,GAIAb,EAAAc,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAlB,KAAAe,EAAAC,IAGtDvB,EAAA0B,EAAA,GAGA1B,IAAA2B,EAAA,MDMM,SAASvB,EAAQD,GE9CvB,GAAAyB,KAGAA,GAAAC,QAAA,KACAD,EAAAE,WAAA,mBAAAC,2BAAAC,MACAJ,EAAAK,OAAAC,KAAAC,OACAP,EAAAQ,aAAA,EAGAR,EAAAS,eAAAT,EAAAE,aAAAC,cAAA,QAAAO,MACAV,EAAAW,SAAAX,EAAAQ,aAAAR,EAAAS,eAOAT,EAAAY,mBAAA,SAAAC,GACAb,EAAAE,WAAAW,EAGA,IAAAC,GAAAR,KAAAS,GAAA,GAOAf,GAAAgB,SAAA,SAAAC,GACA,MAAAA,GAAAH,GAYAd,EAAAkB,OAAA,SAAAD,EAAAE,GACA,MAAAb,MAAAc,IAAAH,EAAAE,IAAAnB,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAH,GAAAX,KAAAc,IAAAD,KAGA3C,EAAAD,QAAAyB,GF6EM,SAASxB,EAAQD,GGlJvB,QAAA+C,GAAAC,EAAAC,EAAAC,GACAf,KAAAc,gBAAA,GACAd,KAAAe,eAAA,GACAf,KAAAa,YAAA,GACAb,KAAAgB,QACA,eAAAF,GAAAD,GAAA,KACAE,EAAA,KAAAA,EAAA,IACAf,KAAAiB,OAAA,GAAAC,QAAAD,MAEAL,EAAA1B,UAAA,GAAAgC,OACAN,EAAA1B,UAAAZ,KAAA,UACAsC,EAAA1B,UAAAiC,YAAAP,EACA9C,EAAAD,QAAA+C,GHyJM,SAAS9C,EAAQD,EAASH,GIzIhCG,EAAAyB,SAAA5B,EAAA,GACAG,EAAAuD,KAAA1D,EAAA,IACAG,EAAAwD,MAAA3D,EAAA,IACAG,EAAAyD,KAAA5D,EAAA,GACAG,EAAA0D,KAAA7D,EAAA,IACAG,EAAA2D,KAAA9D,EAAA,IACAG,EAAA4D,KAAA/D,EAAA,IACAG,EAAA6D,KAAAhE,EAAA,GACAG,EAAA8D,KAAAjE,EAAA,IJ2KM,SAASI,EAAQD,EAASH,GK3LhC,GAAA4B,GAAA5B,EAAA,GAMA4D,IAOAA,GAAAM,OAAA,WACA,GAAAC,GAAA,GAAAvC,GAAAE,WAAA,EAUA,OATAqC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAUAP,EAAAQ,SAAA,SAAAD,EAAAtB,GAUA,MATAsB,GAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,IACAsB,GASAP,EAAAS,MAAA,SAAAxB,GACA,GAAAsB,GAAA,GAAAvC,GAAAE,WAAA,EAUA,OATAqC,GAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,GAUAP,EAAAU,KAAA,SAAAH,EAAAtB,GAUA,MATAsB,GAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,GAiBAP,EAAAW,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAb,GAAA,GAAAvC,GAAAE,WAAA,EAUA,OATAqC,GAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAS,EACAT,EAAA,GAAAU,EACAV,EAAA,GAAAW,EACAX,EAAA,GAAAY,EACAZ,EAAA,GAAAa,EACAb,GAkBAP,EAAAqB,IAAA,SAAAd,EAAAK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAUA,MATAb,GAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAS,EACAT,EAAA,GAAAU,EACAV,EAAA,GAAAW,EACAX,EAAA,GAAAY,EACAZ,EAAA,GAAAa,EACAb,GASAP,EAAAsB,SAAA,SAAAf,GAUA,MATAA,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAUAP,EAAAuB,UAAA,SAAAhB,EAAAtB,GAEA,GAAAsB,IAAAtB,EAAA,CACA,GAAAuC,GAAAvC,EAAA,GAAAwC,EAAAxC,EAAA,GAAAyC,EAAAzC,EAAA,EACAsB,GAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAiB,EACAjB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAkB,EACAlB,EAAA,GAAAmB,MAEAnB,GAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,EAGA,OAAAsB,IAUAP,EAAA2B,OAAA,SAAApB,EAAAtB,GACA,GAAA2C,GAAA3C,EAAA,GAAAuC,EAAAvC,EAAA,GAAAwC,EAAAxC,EAAA,GACA4C,EAAA5C,EAAA,GAAA6C,EAAA7C,EAAA,GAAAyC,EAAAzC,EAAA,GACA8C,EAAA9C,EAAA,GAAA+C,EAAA/C,EAAA,GAAAgD,EAAAhD,EAAA,GAEAiD,EAAAD,EAAAH,EAAAJ,EAAAM,EACAG,GAAAF,EAAAJ,EAAAH,EAAAK,EACAK,EAAAJ,EAAAH,EAAAC,EAAAC,EAGAM,EAAAT,EAAAM,EAAAV,EAAAW,EAAAV,EAAAW,CAEA,OAAAC,IAGAA,EAAA,EAAAA,EAEA9B,EAAA,GAAA2B,EAAAG,EACA9B,EAAA,KAAA0B,EAAAT,EAAAC,EAAAO,GAAAK,EACA9B,EAAA,IAAAmB,EAAAF,EAAAC,EAAAK,GAAAO,EACA9B,EAAA,GAAA4B,EAAAE,EACA9B,EAAA,IAAA0B,EAAAL,EAAAH,EAAAM,GAAAM,EACA9B,EAAA,KAAAmB,EAAAE,EAAAH,EAAAI,GAAAQ,EACA9B,EAAA,GAAA6B,EAAAC,EACA9B,EAAA,KAAAyB,EAAAJ,EAAAJ,EAAAO,GAAAM,EACA9B,EAAA,IAAAuB,EAAAF,EAAAJ,EAAAK,GAAAQ,EACA9B,GAbA,MAuBAP,EAAAsC,QAAA,SAAA/B,EAAAtB,GACA,GAAA2C,GAAA3C,EAAA,GAAAuC,EAAAvC,EAAA,GAAAwC,EAAAxC,EAAA,GACA4C,EAAA5C,EAAA,GAAA6C,EAAA7C,EAAA,GAAAyC,EAAAzC,EAAA,GACA8C,EAAA9C,EAAA,GAAA+C,EAAA/C,EAAA,GAAAgD,EAAAhD,EAAA,EAWA,OATAsB,GAAA,GAAAuB,EAAAG,EAAAP,EAAAM,EACAzB,EAAA,GAAAkB,EAAAO,EAAAR,EAAAS,EACA1B,EAAA,GAAAiB,EAAAE,EAAAD,EAAAK,EACAvB,EAAA,GAAAmB,EAAAK,EAAAF,EAAAI,EACA1B,EAAA,GAAAqB,EAAAK,EAAAR,EAAAM,EACAxB,EAAA,GAAAkB,EAAAI,EAAAD,EAAAF,EACAnB,EAAA,GAAAsB,EAAAG,EAAAF,EAAAC,EACAxB,EAAA,GAAAiB,EAAAO,EAAAH,EAAAI,EACAzB,EAAA,GAAAqB,EAAAE,EAAAN,EAAAK,EACAtB,GASAP,EAAAuC,YAAA,SAAAtD,GACA,GAAA2C,GAAA3C,EAAA,GAAAuC,EAAAvC,EAAA,GAAAwC,EAAAxC,EAAA,GACA4C,EAAA5C,EAAA,GAAA6C,EAAA7C,EAAA,GAAAyC,EAAAzC,EAAA,GACA8C,EAAA9C,EAAA,GAAA+C,EAAA/C,EAAA,GAAAgD,EAAAhD,EAAA,EAEA,OAAA2C,IAAAK,EAAAH,EAAAJ,EAAAM,GAAAR,IAAAS,EAAAJ,EAAAH,EAAAK,GAAAN,GAAAO,EAAAH,EAAAC,EAAAC,IAWA/B,EAAAwC,SAAA,SAAAjC,EAAAtB,EAAAE,GACA,GAAAyC,GAAA3C,EAAA,GAAAuC,EAAAvC,EAAA,GAAAwC,EAAAxC,EAAA,GACA4C,EAAA5C,EAAA,GAAA6C,EAAA7C,EAAA,GAAAyC,EAAAzC,EAAA,GACA8C,EAAA9C,EAAA,GAAA+C,EAAA/C,EAAA,GAAAgD,EAAAhD,EAAA,GAEAwD,EAAAtD,EAAA,GAAA+C,EAAA/C,EAAA,GAAAuD,EAAAvD,EAAA,GACAwD,EAAAxD,EAAA,GAAAgD,EAAAhD,EAAA,GAAAyD,EAAAzD,EAAA,GACA0D,EAAA1D,EAAA,GAAAiD,EAAAjD,EAAA,GAAA2D,EAAA3D,EAAA,EAaA,OAXAoB,GAAA,GAAAkC,EAAAb,EAAAM,EAAAL,EAAAa,EAAAX,EACAxB,EAAA,GAAAkC,EAAAjB,EAAAU,EAAAJ,EAAAY,EAAAV,EACAzB,EAAA,GAAAkC,EAAAhB,EAAAS,EAAAR,EAAAgB,EAAAT,EAEA1B,EAAA,GAAAoC,EAAAf,EAAAO,EAAAN,EAAAe,EAAAb,EACAxB,EAAA,GAAAoC,EAAAnB,EAAAW,EAAAL,EAAAc,EAAAZ,EACAzB,EAAA,GAAAoC,EAAAlB,EAAAU,EAAAT,EAAAkB,EAAAX,EAEA1B,EAAA,GAAAsC,EAAAjB,EAAAQ,EAAAP,EAAAiB,EAAAf,EACAxB,EAAA,GAAAsC,EAAArB,EAAAY,EAAAN,EAAAgB,EAAAd,EACAzB,EAAA,GAAAsC,EAAApB,EAAAW,EAAAV,EAAAoB,EAAAb,EACA1B,GAOAP,EAAA+C,IAAA/C,EAAAwC,SAUAxC,EAAAgD,UAAA,SAAAzC,EAAAtB,EAAAgE,GACA,GAAArB,GAAA3C,EAAA,GAAAuC,EAAAvC,EAAA,GAAAwC,EAAAxC,EAAA,GACA4C,EAAA5C,EAAA,GAAA6C,EAAA7C,EAAA,GAAAyC,EAAAzC,EAAA,GACA8C,EAAA9C,EAAA,GAAA+C,EAAA/C,EAAA,GAAAgD,EAAAhD,EAAA,GACAiE,EAAAD,EAAA,GAAAE,EAAAF,EAAA,EAaA,OAXA1C,GAAA,GAAAqB,EACArB,EAAA,GAAAiB,EACAjB,EAAA,GAAAkB,EAEAlB,EAAA,GAAAsB,EACAtB,EAAA,GAAAuB,EACAvB,EAAA,GAAAmB,EAEAnB,EAAA,GAAA2C,EAAAtB,EAAAuB,EAAAtB,EAAAE,EACAxB,EAAA,GAAA2C,EAAA1B,EAAA2B,EAAArB,EAAAE,EACAzB,EAAA,GAAA2C,EAAAzB,EAAA0B,EAAAzB,EAAAO,EACA1B,GAWAP,EAAAoD,OAAA,SAAA7C,EAAAtB,EAAAoE,GACA,GAAAzB,GAAA3C,EAAA,GAAAuC,EAAAvC,EAAA,GAAAwC,EAAAxC,EAAA,GACA4C,EAAA5C,EAAA,GAAA6C,EAAA7C,EAAA,GAAAyC,EAAAzC,EAAA,GACA8C,EAAA9C,EAAA,GAAA+C,EAAA/C,EAAA,GAAAgD,EAAAhD,EAAA,GAEAlB,EAAAO,KAAAgF,IAAAD,GACAxG,EAAAyB,KAAAiF,IAAAF,EAaA,OAXA9C,GAAA,GAAA1D,EAAA+E,EAAA7D,EAAA8D,EACAtB,EAAA,GAAA1D,EAAA2E,EAAAzD,EAAA+D,EACAvB,EAAA,GAAA1D,EAAA4E,EAAA1D,EAAA2D,EAEAnB,EAAA,GAAA1D,EAAAgF,EAAA9D,EAAA6D,EACArB,EAAA,GAAA1D,EAAAiF,EAAA/D,EAAAyD,EACAjB,EAAA,GAAA1D,EAAA6E,EAAA3D,EAAA0D,EAEAlB,EAAA,GAAAwB,EACAxB,EAAA,GAAAyB,EACAzB,EAAA,GAAA0B,EACA1B,GAWAP,EAAAwD,MAAA,SAAAjD,EAAAtB,EAAAgE,GACA,GAAAC,GAAAD,EAAA,GAAAE,EAAAF,EAAA,EAaA,OAXA1C,GAAA,GAAA2C,EAAAjE,EAAA,GACAsB,EAAA,GAAA2C,EAAAjE,EAAA,GACAsB,EAAA,GAAA2C,EAAAjE,EAAA,GAEAsB,EAAA,GAAA4C,EAAAlE,EAAA,GACAsB,EAAA,GAAA4C,EAAAlE,EAAA,GACAsB,EAAA,GAAA4C,EAAAlE,EAAA,GAEAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,GAcAP,EAAAyD,gBAAA,SAAAlD,EAAA0C,GAUA,MATA1C,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA0C,EAAA,GACA1C,EAAA,GAAA0C,EAAA,GACA1C,EAAA,KACAA,GAcAP,EAAA0D,aAAA,SAAAnD,EAAA8C,GACA,GAAAtF,GAAAO,KAAAgF,IAAAD,GAAAxG,EAAAyB,KAAAiF,IAAAF,EAaA,OAXA9C,GAAA,GAAA1D,EACA0D,EAAA,GAAAxC,EACAwC,EAAA,KAEAA,EAAA,IAAAxC,EACAwC,EAAA,GAAA1D,EACA0D,EAAA,KAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAcAP,EAAA2D,YAAA,SAAApD,EAAA0C,GAYA,MAXA1C,GAAA,GAAA0C,EAAA,GACA1C,EAAA,KACAA,EAAA,KAEAA,EAAA,KACAA,EAAA,GAAA0C,EAAA,GACA1C,EAAA,KAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAUAP,EAAA4D,UAAA,SAAArD,EAAAtB,GAYA,MAXAsB,GAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,KAEAA,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,KAEAA,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,KACAA,GAWAP,EAAA6D,SAAA,SAAAtD,EAAAuD,GACA,GAAAZ,GAAAY,EAAA,GAAAX,EAAAW,EAAA,GAAAC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GACAG,EAAAf,IACAgB,EAAAf,IACAgB,EAAAJ,IAEAK,EAAAlB,EAAAe,EACAI,EAAAlB,EAAAc,EACAK,EAAAnB,EAAAe,EACAK,EAAAR,EAAAE,EACAO,EAAAT,EAAAG,EACAO,EAAAV,EAAAI,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,CAcA,OAZA5D,GAAA,KAAA+D,EAAAG,EACAlE,EAAA,GAAA8D,EAAAO,EACArE,EAAA,GAAAgE,EAAAI,EAEApE,EAAA,GAAA8D,EAAAO,EACArE,EAAA,KAAA6D,EAAAK,EACAlE,EAAA,GAAAiE,EAAAE,EAEAnE,EAAA,GAAAgE,EAAAI,EACApE,EAAA,GAAAiE,EAAAE,EACAnE,EAAA,KAAA6D,EAAAE,EAEA/D,GAWAP,EAAA6E,eAAA,SAAAtE,EAAAtB,GACA,GAAA2C,GAAA3C,EAAA,GAAAuC,EAAAvC,EAAA,GAAAwC,EAAAxC,EAAA,GAAA6F,EAAA7F,EAAA,GACA4C,EAAA5C,EAAA,GAAA6C,EAAA7C,EAAA,GAAAyC,EAAAzC,EAAA,GAAA8F,EAAA9F,EAAA,GACA8C,EAAA9C,EAAA,GAAA+C,EAAA/C,EAAA,GAAAgD,EAAAhD,EAAA,IAAA+F,EAAA/F,EAAA,IACAgG,EAAAhG,EAAA,IAAAiG,EAAAjG,EAAA,IAAAkG,EAAAlG,EAAA,IAAAmG,EAAAnG,EAAA,IAEAwD,EAAAb,EAAAE,EAAAN,EAAAK,EACAK,EAAAN,EAAAF,EAAAD,EAAAI,EACAa,EAAAd,EAAAmD,EAAAD,EAAAjD,EACAwD,EAAA7D,EAAAE,EAAAD,EAAAK,EACAwD,EAAA9D,EAAAuD,EAAAD,EAAAhD,EACAyD,EAAA9D,EAAAsD,EAAAD,EAAApD,EACA8D,EAAAzD,EAAAmD,EAAAlD,EAAAiD,EACAQ,EAAA1D,EAAAoD,EAAAlD,EAAAgD,EACAS,EAAA3D,EAAAqD,EAAAJ,EAAAC,EACAU,EAAA3D,EAAAmD,EAAAlD,EAAAiD,EACAvC,EAAAX,EAAAoD,EAAAJ,EAAAE,EACA/C,EAAAF,EAAAmD,EAAAJ,EAAAG,EAGA9C,EAAAI,EAAAN,EAAAD,EAAAS,EAAAD,EAAAiD,EAAAN,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,CAEA,OAAAnD,IAGAA,EAAA,EAAAA,EAEA9B,EAAA,IAAAuB,EAAAK,EAAAT,EAAAiB,EAAAoC,EAAAY,GAAAtD,EACA9B,EAAA,IAAAmB,EAAAgE,EAAA7D,EAAAM,EAAA4C,EAAAU,GAAApD,EACA9B,EAAA,IAAAsB,EAAAc,EAAAb,EAAA4D,EAAAX,EAAAS,GAAAnD,EAEA9B,EAAA,IAAAkB,EAAAkB,EAAAnB,EAAAW,EAAA2C,EAAAa,GAAAtD,EACA9B,EAAA,IAAAqB,EAAAO,EAAAV,EAAAiE,EAAAZ,EAAAW,GAAApD,EACA9B,EAAA,IAAAiB,EAAAkE,EAAA9D,EAAAe,EAAAmC,EAAAU,GAAAnD,EAEA9B,EAAA,IAAA2E,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,GAAAhD,EACA9B,EAAA,IAAA4E,EAAAzC,EAAAuC,EAAAM,EAAAH,EAAAlD,GAAAG,EACA9B,EAAA,IAAA0E,EAAAK,EAAAJ,EAAAxC,EAAA0C,EAAA3C,GAAAJ,EAEA9B,GAhBA,MAyBAP,EAAA4F,IAAA,SAAA3G,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QASAe,EAAA6F,KAAA,SAAA5G,GACA,MAAAX,MAAAwH,KAAAxH,KAAAyH,IAAA9G,EAAA,MAAAX,KAAAyH,IAAA9G,EAAA,MAAAX,KAAAyH,IAAA9G,EAAA,MAAAX,KAAAyH,IAAA9G,EAAA,MAAAX,KAAAyH,IAAA9G,EAAA,MAAAX,KAAAyH,IAAA9G,EAAA,MAAAX,KAAAyH,IAAA9G,EAAA,MAAAX,KAAAyH,IAAA9G,EAAA,MAAAX,KAAAyH,IAAA9G,EAAA,QAWAe,EAAAgG,IAAA,SAAAzF,EAAAtB,EAAAE,GAUA,MATAoB,GAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,GAWAP,EAAAiG,SAAA,SAAA1F,EAAAtB,EAAAE,GAUA,MATAoB,GAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,GAOAP,EAAAkG,IAAAlG,EAAAiG,SAUAjG,EAAAmG,eAAA,SAAA5F,EAAAtB,EAAAE,GAUA,MATAoB,GAAA,GAAAtB,EAAA,GAAAE,EACAoB,EAAA,GAAAtB,EAAA,GAAAE,EACAoB,EAAA,GAAAtB,EAAA,GAAAE,EACAoB,EAAA,GAAAtB,EAAA,GAAAE,EACAoB,EAAA,GAAAtB,EAAA,GAAAE,EACAoB,EAAA,GAAAtB,EAAA,GAAAE,EACAoB,EAAA,GAAAtB,EAAA,GAAAE,EACAoB,EAAA,GAAAtB,EAAA,GAAAE,EACAoB,EAAA,GAAAtB,EAAA,GAAAE,EACAoB,GAYAP,EAAAoG,qBAAA,SAAA7F,EAAAtB,EAAAE,EAAAqE,GAUA,MATAjD,GAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,GAUAP,EAAAqG,YAAA,SAAApH,EAAAE,GACA,MAAAF,GAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IACAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IACAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAUAa,EAAAd,OAAA,SAAAD,EAAAE,GACA,GAAAmH,GAAArH,EAAA,GAAAsH,EAAAtH,EAAA,GAAAuH,EAAAvH,EAAA,GAAAwH,EAAAxH,EAAA,GAAAyH,EAAAzH,EAAA,GAAA0H,EAAA1H,EAAA,GAAA2H,EAAA3H,EAAA,GAAA4H,EAAA5H,EAAA,GAAA6H,EAAA7H,EAAA,GACA8H,EAAA5H,EAAA,GAAA6H,EAAA7H,EAAA,GAAA8H,EAAA9H,EAAA,GAAA+H,EAAA/H,EAAA,GAAAgI,EAAAhI,EAAA,GAAAiI,EAAAjI,EAAA,GAAAkI,EAAApI,EAAA,GAAAqI,EAAAnI,EAAA,GAAAoI,EAAApI,EAAA,EACA,OAAAb,MAAAc,IAAAkH,EAAAS,IAAA/I,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAkH,GAAAhI,KAAAc,IAAA2H,KACAzI,KAAAc,IAAAmH,EAAAS,IAAAhJ,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAmH,GAAAjI,KAAAc,IAAA4H,KACA1I,KAAAc,IAAAoH,EAAAS,IAAAjJ,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAoH,GAAAlI,KAAAc,IAAA6H,KACA3I,KAAAc,IAAAqH,EAAAS,IAAAlJ,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAqH,GAAAnI,KAAAc,IAAA8H,KACA5I,KAAAc,IAAAsH,EAAAS,IAAAnJ,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAsH,GAAApI,KAAAc,IAAA+H,KACA7I,KAAAc,IAAAuH,EAAAS,IAAApJ,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAuH,GAAArI,KAAAc,IAAAgI,KACA9I,KAAAc,IAAAwH,EAAAS,IAAArJ,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAwH,GAAAtI,KAAAc,IAAAiI,KACA/I,KAAAc,IAAAyH,EAAAS,IAAAtJ,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAyH,GAAAvI,KAAAc,IAAAkI,KACAhJ,KAAAc,IAAA0H,EAAAS,IAAAvJ,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAA0H,GAAAxI,KAAAc,IAAAmI,KAIA/K,EAAAD,QAAAyD,GLsNM,SAASxD,EAAQD,EAASH,GM36BhC,GAAA4B,GAAA5B,EAAA,GAMAgE,IAOAA,GAAAE,OAAA,WACA,GAAAC,GAAA,GAAAvC,GAAAE,WAAA,EAIA,OAHAqC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GASAH,EAAAK,MAAA,SAAAxB,GACA,GAAAsB,GAAA,GAAAvC,GAAAE,WAAA,EAIA,OAHAqC,GAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,GAWAH,EAAAO,WAAA,SAAAuC,EAAAC,EAAAY,GACA,GAAAxD,GAAA,GAAAvC,GAAAE,WAAA,EAIA,OAHAqC,GAAA,GAAA2C,EACA3C,EAAA,GAAA4C,EACA5C,EAAA,GAAAwD,EACAxD,GAUAH,EAAAM,KAAA,SAAAH,EAAAtB,GAIA,MAHAsB,GAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,GAYAH,EAAAiB,IAAA,SAAAd,EAAA2C,EAAAC,EAAAY,GAIA,MAHAxD,GAAA,GAAA2C,EACA3C,EAAA,GAAA4C,EACA5C,EAAA,GAAAwD,EACAxD,GAWAH,EAAA4F,IAAA,SAAAzF,EAAAtB,EAAAE,GAIA,MAHAoB,GAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,GAWAH,EAAA6F,SAAA,SAAA1F,EAAAtB,EAAAE,GAIA,MAHAoB,GAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,GAOAH,EAAA8F,IAAA9F,EAAA6F,SAUA7F,EAAAoC,SAAA,SAAAjC,EAAAtB,EAAAE,GAIA,MAHAoB,GAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,GAOAH,EAAA2C,IAAA3C,EAAAoC,SAUApC,EAAAoH,OAAA,SAAAjH,EAAAtB,EAAAE,GAIA,MAHAoB,GAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,GAOAH,EAAAqH,IAAArH,EAAAoH,OASApH,EAAAsH,KAAA,SAAAnH,EAAAtB,GAIA,MAHAsB,GAAA,GAAAjC,KAAAoJ,KAAAzI,EAAA,IACAsB,EAAA,GAAAjC,KAAAoJ,KAAAzI,EAAA,IACAsB,EAAA,GAAAjC,KAAAoJ,KAAAzI,EAAA,IACAsB,GAUAH,EAAAuH,MAAA,SAAApH,EAAAtB,GAIA,MAHAsB,GAAA,GAAAjC,KAAAqJ,MAAA1I,EAAA,IACAsB,EAAA,GAAAjC,KAAAqJ,MAAA1I,EAAA,IACAsB,EAAA,GAAAjC,KAAAqJ,MAAA1I,EAAA,IACAsB,GAWAH,EAAAwH,IAAA,SAAArH,EAAAtB,EAAAE,GAIA,MAHAoB,GAAA,GAAAjC,KAAAsJ,IAAA3I,EAAA,GAAAE,EAAA,IACAoB,EAAA,GAAAjC,KAAAsJ,IAAA3I,EAAA,GAAAE,EAAA,IACAoB,EAAA,GAAAjC,KAAAsJ,IAAA3I,EAAA,GAAAE,EAAA,IACAoB,GAWAH,EAAAf,IAAA,SAAAkB,EAAAtB,EAAAE,GAIA,MAHAoB,GAAA,GAAAjC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAoB,EAAA,GAAAjC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAoB,EAAA,GAAAjC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAoB,GAUAH,EAAAyH,MAAA,SAAAtH,EAAAtB,GAIA,MAHAsB,GAAA,GAAAjC,KAAAuJ,MAAA5I,EAAA,IACAsB,EAAA,GAAAjC,KAAAuJ,MAAA5I,EAAA,IACAsB,EAAA,GAAAjC,KAAAuJ,MAAA5I,EAAA,IACAsB,GAWAH,EAAAoD,MAAA,SAAAjD,EAAAtB,EAAAE,GAIA,MAHAoB,GAAA,GAAAtB,EAAA,GAAAE,EACAoB,EAAA,GAAAtB,EAAA,GAAAE,EACAoB,EAAA,GAAAtB,EAAA,GAAAE,EACAoB,GAYAH,EAAA0H,YAAA,SAAAvH,EAAAtB,EAAAE,EAAAqE,GAIA,MAHAjD,GAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,GAUAH,EAAA2H,SAAA,SAAA9I,EAAAE,GACA,GAAA+D,GAAA/D,EAAA,GAAAF,EAAA,GACAkE,EAAAhE,EAAA,GAAAF,EAAA,GACA8E,EAAA5E,EAAA,GAAAF,EAAA,EACA,OAAAX,MAAAwH,KAAA5C,IAAAC,IAAAY,MAOA3D,EAAA4H,KAAA5H,EAAA2H,SASA3H,EAAA6H,gBAAA,SAAAhJ,EAAAE,GACA,GAAA+D,GAAA/D,EAAA,GAAAF,EAAA,GACAkE,EAAAhE,EAAA,GAAAF,EAAA,GACA8E,EAAA5E,EAAA,GAAAF,EAAA,EACA,OAAAiE,KAAAC,IAAAY,KAOA3D,EAAA8H,QAAA9H,EAAA6H,gBAQA7H,EAAA+H,OAAA,SAAAlJ,GACA,GAAAiE,GAAAjE,EAAA,GACAkE,EAAAlE,EAAA,GACA8E,EAAA9E,EAAA,EACA,OAAAX,MAAAwH,KAAA5C,IAAAC,IAAAY,MAOA3D,EAAAgI,IAAAhI,EAAA+H,OAQA/H,EAAAiI,cAAA,SAAApJ,GACA,GAAAiE,GAAAjE,EAAA,GACAkE,EAAAlE,EAAA,GACA8E,EAAA9E,EAAA,EACA,OAAAiE,KAAAC,IAAAY,KAOA3D,EAAAkI,OAAAlI,EAAAiI,cASAjI,EAAAmI,OAAA,SAAAhI,EAAAtB,GAIA,MAHAsB,GAAA,IAAAtB,EAAA,GACAsB,EAAA,IAAAtB,EAAA,GACAsB,EAAA,IAAAtB,EAAA,GACAsB,GAUAH,EAAAoI,QAAA,SAAAjI,EAAAtB,GAIA,MAHAsB,GAAA,KAAAtB,EAAA,GACAsB,EAAA,KAAAtB,EAAA,GACAsB,EAAA,KAAAtB,EAAA,GACAsB,GAUAH,EAAAqI,UAAA,SAAAlI,EAAAtB,GACA,GAAAiE,GAAAjE,EAAA,GACAkE,EAAAlE,EAAA,GACA8E,EAAA9E,EAAA,GACAmJ,EAAAlF,IAAAC,IAAAY,GAQA,OAPAqE,GAAA,IAEAA,EAAA,EAAA9J,KAAAwH,KAAAsC,GACA7H,EAAA,GAAAtB,EAAA,GAAAmJ,EACA7H,EAAA,GAAAtB,EAAA,GAAAmJ,EACA7H,EAAA,GAAAtB,EAAA,GAAAmJ,GAEA7H,GAUAH,EAAAsI,IAAA,SAAAzJ,EAAAE,GACA,MAAAF,GAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,IAWAiB,EAAAuI,MAAA,SAAApI,EAAAtB,EAAAE,GACA,GAAAyJ,GAAA3J,EAAA,GAAA4J,EAAA5J,EAAA,GAAA6J,EAAA7J,EAAA,GACA8J,EAAA5J,EAAA,GAAA6J,EAAA7J,EAAA,GAAA8J,EAAA9J,EAAA,EAKA,OAHAoB,GAAA,GAAAsI,EAAAI,EAAAH,EAAAE,EACAzI,EAAA,GAAAuI,EAAAC,EAAAH,EAAAK,EACA1I,EAAA,GAAAqI,EAAAI,EAAAH,EAAAE,EACAxI,GAYAH,EAAA8I,KAAA,SAAA3I,EAAAtB,EAAAE,EAAAgK,GACA,GAAAP,GAAA3J,EAAA,GACA4J,EAAA5J,EAAA,GACA6J,EAAA7J,EAAA,EAIA,OAHAsB,GAAA,GAAAqI,EAAAO,GAAAhK,EAAA,GAAAyJ,GACArI,EAAA,GAAAsI,EAAAM,GAAAhK,EAAA,GAAA0J,GACAtI,EAAA,GAAAuI,EAAAK,GAAAhK,EAAA,GAAA2J,GACAvI,GAcAH,EAAAgJ,QAAA,SAAA7I,EAAAtB,EAAAE,EAAAtC,EAAAE,EAAAoM,GACA,GAAAE,GAAAF,IACAG,EAAAD,GAAA,EAAAF,EAAA,KACAI,EAAAF,GAAAF,EAAA,GAAAA,EACAK,EAAAH,GAAAF,EAAA,GACAM,EAAAJ,GAAA,IAAAF,EAMA,OAJA5I,GAAA,GAAAtB,EAAA,GAAAqK,EAAAnK,EAAA,GAAAoK,EAAA1M,EAAA,GAAA2M,EAAAzM,EAAA,GAAA0M,EACAlJ,EAAA,GAAAtB,EAAA,GAAAqK,EAAAnK,EAAA,GAAAoK,EAAA1M,EAAA,GAAA2M,EAAAzM,EAAA,GAAA0M,EACAlJ,EAAA,GAAAtB,EAAA,GAAAqK,EAAAnK,EAAA,GAAAoK,EAAA1M,EAAA,GAAA2M,EAAAzM,EAAA,GAAA0M,EAEAlJ,GAcAH,EAAAsJ,OAAA,SAAAnJ,EAAAtB,EAAAE,EAAAtC,EAAAE,EAAAoM,GACA,GAAAQ,GAAA,EAAAR,EACAS,EAAAD,IACAN,EAAAF,IACAG,EAAAM,EAAAD,EACAJ,EAAA,EAAAJ,EAAAS,EACAJ,EAAA,EAAAH,EAAAM,EACAF,EAAAJ,EAAAF,CAMA,OAJA5I,GAAA,GAAAtB,EAAA,GAAAqK,EAAAnK,EAAA,GAAAoK,EAAA1M,EAAA,GAAA2M,EAAAzM,EAAA,GAAA0M,EACAlJ,EAAA,GAAAtB,EAAA,GAAAqK,EAAAnK,EAAA,GAAAoK,EAAA1M,EAAA,GAAA2M,EAAAzM,EAAA,GAAA0M,EACAlJ,EAAA,GAAAtB,EAAA,GAAAqK,EAAAnK,EAAA,GAAAoK,EAAA1M,EAAA,GAAA2M,EAAAzM,EAAA,GAAA0M,EAEAlJ,GAUAH,EAAA7B,OAAA,SAAAgC,EAAAiD,GACAA,KAAA,CAEA,IAAAqG,GAAA,EAAA7L,EAAAK,SAAAC,KAAAS,GACAgF,EAAA,EAAA/F,EAAAK,SAAA,EACAyL,EAAAxL,KAAAwH,KAAA,EAAA/B,KAAAP,CAKA,OAHAjD,GAAA,GAAAjC,KAAAiF,IAAAsG,GAAAC,EACAvJ,EAAA,GAAAjC,KAAAgF,IAAAuG,GAAAC,EACAvJ,EAAA,GAAAwD,EAAAP,EACAjD,GAYAH,EAAA2J,cAAA,SAAAxJ,EAAAtB,EAAArC,GACA,GAAAsG,GAAAjE,EAAA,GAAAkE,EAAAlE,EAAA,GAAA8E,EAAA9E,EAAA,GACA+E,EAAApH,EAAA,GAAAsG,EAAAtG,EAAA,GAAAuG,EAAAvG,EAAA,IAAAmH,EAAAnH,EAAA,GAKA,OAJAoH,MAAA,EACAzD,EAAA,IAAA3D,EAAA,GAAAsG,EAAAtG,EAAA,GAAAuG,EAAAvG,EAAA,GAAAmH,EAAAnH,EAAA,KAAAoH,EACAzD,EAAA,IAAA3D,EAAA,GAAAsG,EAAAtG,EAAA,GAAAuG,EAAAvG,EAAA,GAAAmH,EAAAnH,EAAA,KAAAoH,EACAzD,EAAA,IAAA3D,EAAA,GAAAsG,EAAAtG,EAAA,GAAAuG,EAAAvG,EAAA,IAAAmH,EAAAnH,EAAA,KAAAoH,EACAzD,GAWAH,EAAA4J,cAAA,SAAAzJ,EAAAtB,EAAArC,GACA,GAAAsG,GAAAjE,EAAA,GAAAkE,EAAAlE,EAAA,GAAA8E,EAAA9E,EAAA,EAIA,OAHAsB,GAAA,GAAA2C,EAAAtG,EAAA,GAAAuG,EAAAvG,EAAA,GAAAmH,EAAAnH,EAAA,GACA2D,EAAA,GAAA2C,EAAAtG,EAAA,GAAAuG,EAAAvG,EAAA,GAAAmH,EAAAnH,EAAA,GACA2D,EAAA,GAAA2C,EAAAtG,EAAA,GAAAuG,EAAAvG,EAAA,GAAAmH,EAAAnH,EAAA,GACA2D,GAWAH,EAAA6J,cAAA,SAAA1J,EAAAtB,EAAA6E,GAGA,GAAAZ,GAAAjE,EAAA,GAAAkE,EAAAlE,EAAA,GAAA8E,EAAA9E,EAAA,GACAiL,EAAApG,EAAA,GAAAqG,EAAArG,EAAA,GAAAsG,EAAAtG,EAAA,GAAAuG,EAAAvG,EAAA,GAGAwG,EAAAD,EAAAnH,EAAAiH,EAAApG,EAAAqG,EAAAjH,EACAoH,EAAAF,EAAAlH,EAAAiH,EAAAlH,EAAAgH,EAAAnG,EACAyG,EAAAH,EAAAtG,EAAAmG,EAAA/G,EAAAgH,EAAAjH,EACAuH,GAAAP,EAAAhH,EAAAiH,EAAAhH,EAAAiH,EAAArG,CAMA,OAHAxD,GAAA,GAAA+J,EAAAD,EAAAI,GAAAP,EAAAK,GAAAH,EAAAI,GAAAL,EACA5J,EAAA,GAAAgK,EAAAF,EAAAI,GAAAN,EAAAK,GAAAN,EAAAI,GAAAF,EACA7J,EAAA,GAAAiK,EAAAH,EAAAI,GAAAL,EAAAE,GAAAH,EAAAI,GAAAL,EACA3J,GAWAH,EAAAsK,QAAA,SAAAnK,EAAAtB,EAAAE,EAAAtC,GACA,GAAAiB,MAAA+L,IAgBA,OAdA/L,GAAA,GAAAmB,EAAA,GAAAE,EAAA,GACArB,EAAA,GAAAmB,EAAA,GAAAE,EAAA,GACArB,EAAA,GAAAmB,EAAA,GAAAE,EAAA,GAGA0K,EAAA,GAAA/L,EAAA,GACA+L,EAAA,GAAA/L,EAAA,GAAAQ,KAAAiF,IAAA1G,GAAAiB,EAAA,GAAAQ,KAAAgF,IAAAzG,GACAgN,EAAA,GAAA/L,EAAA,GAAAQ,KAAAgF,IAAAzG,GAAAiB,EAAA,GAAAQ,KAAAiF,IAAA1G,GAGA0D,EAAA,GAAAsJ,EAAA,GAAA1K,EAAA,GACAoB,EAAA,GAAAsJ,EAAA,GAAA1K,EAAA,GACAoB,EAAA,GAAAsJ,EAAA,GAAA1K,EAAA,GAEAoB,GAWAH,EAAAuK,QAAA,SAAApK,EAAAtB,EAAAE,EAAAtC,GACA,GAAAiB,MAAA+L,IAgBA,OAdA/L,GAAA,GAAAmB,EAAA,GAAAE,EAAA,GACArB,EAAA,GAAAmB,EAAA,GAAAE,EAAA,GACArB,EAAA,GAAAmB,EAAA,GAAAE,EAAA,GAGA0K,EAAA,GAAA/L,EAAA,GAAAQ,KAAAgF,IAAAzG,GAAAiB,EAAA,GAAAQ,KAAAiF,IAAA1G,GACAgN,EAAA,GAAA/L,EAAA,GACA+L,EAAA,GAAA/L,EAAA,GAAAQ,KAAAiF,IAAA1G,GAAAiB,EAAA,GAAAQ,KAAAgF,IAAAzG,GAGA0D,EAAA,GAAAsJ,EAAA,GAAA1K,EAAA,GACAoB,EAAA,GAAAsJ,EAAA,GAAA1K,EAAA,GACAoB,EAAA,GAAAsJ,EAAA,GAAA1K,EAAA,GAEAoB,GAWAH,EAAAwK,QAAA,SAAArK,EAAAtB,EAAAE,EAAAtC,GACA,GAAAiB,MAAA+L,IAgBA,OAdA/L,GAAA,GAAAmB,EAAA,GAAAE,EAAA,GACArB,EAAA,GAAAmB,EAAA,GAAAE,EAAA,GACArB,EAAA,GAAAmB,EAAA,GAAAE,EAAA,GAGA0K,EAAA,GAAA/L,EAAA,GAAAQ,KAAAiF,IAAA1G,GAAAiB,EAAA,GAAAQ,KAAAgF,IAAAzG,GACAgN,EAAA,GAAA/L,EAAA,GAAAQ,KAAAgF,IAAAzG,GAAAiB,EAAA,GAAAQ,KAAAiF,IAAA1G,GACAgN,EAAA,GAAA/L,EAAA,GAGAyC,EAAA,GAAAsJ,EAAA,GAAA1K,EAAA,GACAoB,EAAA,GAAAsJ,EAAA,GAAA1K,EAAA,GACAoB,EAAA,GAAAsJ,EAAA,GAAA1K,EAAA,GAEAoB,GAeAH,EAAAyK,QAAA,WACA,GAAAC,GAAA1K,EAAAE,QAEA,iBAAArB,EAAA8L,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAA1O,GAAAC,CAeA,KAdAqO,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIAtO,EADAuO,EACA3M,KAAAsJ,IAAAqD,EAAAF,EAAAC,EAAA/L,EAAAkJ,QAEAlJ,EAAAkJ,OAGA1L,EAAAuO,EAAuBvO,EAAAC,EAAOD,GAAAsO,EAC9BD,EAAA,GAAA7L,EAAAxC,GAA0BqO,EAAA,GAAA7L,EAAAxC,EAAA,GAAiBqO,EAAA,GAAA7L,EAAAxC,EAAA,GAC3CyO,EAAAJ,IAAAK,GACAlM,EAAAxC,GAAAqO,EAAA,GAA0B7L,EAAAxC,EAAA,GAAAqO,EAAA,GAAiB7L,EAAAxC,EAAA,GAAAqO,EAAA,EAG3C,OAAA7L,OAUAmB,EAAAgL,MAAA,SAAAnM,EAAAE,GAEA,GAAAkM,GAAAjL,EAAAO,WAAA1B,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAqM,EAAAlL,EAAAO,WAAAxB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAEAiB,GAAAqI,UAAA4C,KACAjL,EAAAqI,UAAA6C,IAEA,IAAAC,GAAAnL,EAAAsI,IAAA2C,EAAAC,EAEA,OAAAC,GAAA,EACA,EAEAjN,KAAAkN,KAAAD,IAUAnL,EAAAwF,IAAA,SAAA3G,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAUAmB,EAAAiG,YAAA,SAAApH,EAAAE,GACA,MAAAF,GAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAUAiB,EAAAlB,OAAA,SAAAD,EAAAE,GACA,GAAAmH,GAAArH,EAAA,GAAAsH,EAAAtH,EAAA,GAAAuH,EAAAvH,EAAA,GACA8H,EAAA5H,EAAA,GAAA6H,EAAA7H,EAAA,GAAA8H,EAAA9H,EAAA,EACA,OAAAb,MAAAc,IAAAkH,EAAAS,IAAA/I,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAkH,GAAAhI,KAAAc,IAAA2H,KACAzI,KAAAc,IAAAmH,EAAAS,IAAAhJ,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAmH,GAAAjI,KAAAc,IAAA4H,KACA1I,KAAAc,IAAAoH,EAAAS,IAAAjJ,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAoH,GAAAlI,KAAAc,IAAA6H,KAGAzK,EAAAD,QAAA6D,GNs8BM,SAAS5D,EAAQD,EAASH,GO1rDhC,GAAA4B,GAAA5B,EAAA,GAMAiE,IAOAA,GAAAC,OAAA,WACA,GAAAC,GAAA,GAAAvC,GAAAE,WAAA,EAKA,OAJAqC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GASAF,EAAAI,MAAA,SAAAxB,GACA,GAAAsB,GAAA,GAAAvC,GAAAE,WAAA,EAKA,OAJAqC,GAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,GAYAF,EAAAM,WAAA,SAAAuC,EAAAC,EAAAY,EAAAC,GACA,GAAAzD,GAAA,GAAAvC,GAAAE,WAAA,EAKA,OAJAqC,GAAA,GAAA2C,EACA3C,EAAA,GAAA4C,EACA5C,EAAA,GAAAwD,EACAxD,EAAA,GAAAyD,EACAzD,GAUAF,EAAAK,KAAA,SAAAH,EAAAtB,GAKA,MAJAsB,GAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,EAAA,GAAAtB,EAAA,GACAsB,GAaAF,EAAAgB,IAAA,SAAAd,EAAA2C,EAAAC,EAAAY,EAAAC,GAKA,MAJAzD,GAAA,GAAA2C,EACA3C,EAAA,GAAA4C,EACA5C,EAAA,GAAAwD,EACAxD,EAAA,GAAAyD,EACAzD,GAWAF,EAAA2F,IAAA,SAAAzF,EAAAtB,EAAAE,GAKA,MAJAoB,GAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,GAWAF,EAAA4F,SAAA,SAAA1F,EAAAtB,EAAAE,GAKA,MAJAoB,GAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,GAOAF,EAAA6F,IAAA7F,EAAA4F,SAUA5F,EAAAmC,SAAA,SAAAjC,EAAAtB,EAAAE,GAKA,MAJAoB,GAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,GAOAF,EAAA0C,IAAA1C,EAAAmC,SAUAnC,EAAAmH,OAAA,SAAAjH,EAAAtB,EAAAE,GAKA,MAJAoB,GAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GACAoB,GAOAF,EAAAoH,IAAApH,EAAAmH,OASAnH,EAAAqH,KAAA,SAAAnH,EAAAtB,GAKA,MAJAsB,GAAA,GAAAjC,KAAAoJ,KAAAzI,EAAA,IACAsB,EAAA,GAAAjC,KAAAoJ,KAAAzI,EAAA,IACAsB,EAAA,GAAAjC,KAAAoJ,KAAAzI,EAAA,IACAsB,EAAA,GAAAjC,KAAAoJ,KAAAzI,EAAA,IACAsB,GAUAF,EAAAsH,MAAA,SAAApH,EAAAtB,GAKA,MAJAsB,GAAA,GAAAjC,KAAAqJ,MAAA1I,EAAA,IACAsB,EAAA,GAAAjC,KAAAqJ,MAAA1I,EAAA,IACAsB,EAAA,GAAAjC,KAAAqJ,MAAA1I,EAAA,IACAsB,EAAA,GAAAjC,KAAAqJ,MAAA1I,EAAA,IACAsB,GAWAF,EAAAuH,IAAA,SAAArH,EAAAtB,EAAAE,GAKA,MAJAoB,GAAA,GAAAjC,KAAAsJ,IAAA3I,EAAA,GAAAE,EAAA,IACAoB,EAAA,GAAAjC,KAAAsJ,IAAA3I,EAAA,GAAAE,EAAA,IACAoB,EAAA,GAAAjC,KAAAsJ,IAAA3I,EAAA,GAAAE,EAAA,IACAoB,EAAA,GAAAjC,KAAAsJ,IAAA3I,EAAA,GAAAE,EAAA,IACAoB,GAWAF,EAAAhB,IAAA,SAAAkB,EAAAtB,EAAAE,GAKA,MAJAoB,GAAA,GAAAjC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAoB,EAAA,GAAAjC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAoB,EAAA,GAAAjC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAoB,EAAA,GAAAjC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAoB,GAUAF,EAAAwH,MAAA,SAAAtH,EAAAtB,GAKA,MAJAsB,GAAA,GAAAjC,KAAAuJ,MAAA5I,EAAA,IACAsB,EAAA,GAAAjC,KAAAuJ,MAAA5I,EAAA,IACAsB,EAAA,GAAAjC,KAAAuJ,MAAA5I,EAAA,IACAsB,EAAA,GAAAjC,KAAAuJ,MAAA5I,EAAA,IACAsB,GAWAF,EAAAmD,MAAA,SAAAjD,EAAAtB,EAAAE,GAKA,MAJAoB,GAAA,GAAAtB,EAAA,GAAAE,EACAoB,EAAA,GAAAtB,EAAA,GAAAE,EACAoB,EAAA,GAAAtB,EAAA,GAAAE,EACAoB,EAAA,GAAAtB,EAAA,GAAAE,EACAoB,GAYAF,EAAAyH,YAAA,SAAAvH,EAAAtB,EAAAE,EAAAqE,GAKA,MAJAjD,GAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,EAAA,GAAAtB,EAAA,GAAAE,EAAA,GAAAqE,EACAjD,GAUAF,EAAA0H,SAAA,SAAA9I,EAAAE,GACA,GAAA+D,GAAA/D,EAAA,GAAAF,EAAA,GACAkE,EAAAhE,EAAA,GAAAF,EAAA,GACA8E,EAAA5E,EAAA,GAAAF,EAAA,GACA+E,EAAA7E,EAAA,GAAAF,EAAA,EACA,OAAAX,MAAAwH,KAAA5C,IAAAC,IAAAY,IAAAC,MAOA3D,EAAA2H,KAAA3H,EAAA0H,SASA1H,EAAA4H,gBAAA,SAAAhJ,EAAAE,GACA,GAAA+D,GAAA/D,EAAA,GAAAF,EAAA,GACAkE,EAAAhE,EAAA,GAAAF,EAAA,GACA8E,EAAA5E,EAAA,GAAAF,EAAA,GACA+E,EAAA7E,EAAA,GAAAF,EAAA,EACA,OAAAiE,KAAAC,IAAAY,IAAAC,KAOA3D,EAAA6H,QAAA7H,EAAA4H,gBAQA5H,EAAA8H,OAAA,SAAAlJ,GACA,GAAAiE,GAAAjE,EAAA,GACAkE,EAAAlE,EAAA,GACA8E,EAAA9E,EAAA,GACA+E,EAAA/E,EAAA,EACA,OAAAX,MAAAwH,KAAA5C,IAAAC,IAAAY,IAAAC,MAOA3D,EAAA+H,IAAA/H,EAAA8H,OAQA9H,EAAAgI,cAAA,SAAApJ,GACA,GAAAiE,GAAAjE,EAAA,GACAkE,EAAAlE,EAAA,GACA8E,EAAA9E,EAAA,GACA+E,EAAA/E,EAAA,EACA,OAAAiE,KAAAC,IAAAY,IAAAC,KAOA3D,EAAAiI,OAAAjI,EAAAgI,cASAhI,EAAAkI,OAAA,SAAAhI,EAAAtB,GAKA,MAJAsB,GAAA,IAAAtB,EAAA,GACAsB,EAAA,IAAAtB,EAAA,GACAsB,EAAA,IAAAtB,EAAA,GACAsB,EAAA,IAAAtB,EAAA,GACAsB,GAUAF,EAAAmI,QAAA,SAAAjI,EAAAtB,GAKA,MAJAsB,GAAA,KAAAtB,EAAA,GACAsB,EAAA,KAAAtB,EAAA,GACAsB,EAAA,KAAAtB,EAAA,GACAsB,EAAA,KAAAtB,EAAA,GACAsB,GAUAF,EAAAoI,UAAA,SAAAlI,EAAAtB,GACA,GAAAiE,GAAAjE,EAAA,GACAkE,EAAAlE,EAAA,GACA8E,EAAA9E,EAAA,GACA+E,EAAA/E,EAAA,GACAmJ,EAAAlF,IAAAC,IAAAY,IAAAC,GAQA,OAPAoE,GAAA,IACAA,EAAA,EAAA9J,KAAAwH,KAAAsC,GACA7H,EAAA,GAAA2C,EAAAkF,EACA7H,EAAA,GAAA4C,EAAAiF,EACA7H,EAAA,GAAAwD,EAAAqE,EACA7H,EAAA,GAAAyD,EAAAoE,GAEA7H,GAUAF,EAAAqI,IAAA,SAAAzJ,EAAAE,GACA,MAAAF,GAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,IAYAkB,EAAA6I,KAAA,SAAA3I,EAAAtB,EAAAE,EAAAgK,GACA,GAAAP,GAAA3J,EAAA,GACA4J,EAAA5J,EAAA,GACA6J,EAAA7J,EAAA,GACAwM,EAAAxM,EAAA,EAKA,OAJAsB,GAAA,GAAAqI,EAAAO,GAAAhK,EAAA,GAAAyJ,GACArI,EAAA,GAAAsI,EAAAM,GAAAhK,EAAA,GAAA0J,GACAtI,EAAA,GAAAuI,EAAAK,GAAAhK,EAAA,GAAA2J,GACAvI,EAAA,GAAAkL,EAAAtC,GAAAhK,EAAA,GAAAsM,GACAlL,GAUAF,EAAA9B,OAAA,SAAAgC,EAAAiD,GAUA,MATAA,MAAA,EAGAjD,EAAA,GAAAvC,EAAAK,SACAkC,EAAA,GAAAvC,EAAAK,SACAkC,EAAA,GAAAvC,EAAAK,SACAkC,EAAA,GAAAvC,EAAAK,SACAgC,EAAAoI,UAAAlI,KACAF,EAAAmD,MAAAjD,IAAAiD,GACAjD,GAWAF,EAAA0J,cAAA,SAAAxJ,EAAAtB,EAAArC,GACA,GAAAsG,GAAAjE,EAAA,GAAAkE,EAAAlE,EAAA,GAAA8E,EAAA9E,EAAA,GAAA+E,EAAA/E,EAAA,EAKA,OAJAsB,GAAA,GAAA3D,EAAA,GAAAsG,EAAAtG,EAAA,GAAAuG,EAAAvG,EAAA,GAAAmH,EAAAnH,EAAA,IAAAoH,EACAzD,EAAA,GAAA3D,EAAA,GAAAsG,EAAAtG,EAAA,GAAAuG,EAAAvG,EAAA,GAAAmH,EAAAnH,EAAA,IAAAoH,EACAzD,EAAA,GAAA3D,EAAA,GAAAsG,EAAAtG,EAAA,GAAAuG,EAAAvG,EAAA,IAAAmH,EAAAnH,EAAA,IAAAoH,EACAzD,EAAA,GAAA3D,EAAA,GAAAsG,EAAAtG,EAAA,GAAAuG,EAAAvG,EAAA,IAAAmH,EAAAnH,EAAA,IAAAoH,EACAzD,GAWAF,EAAA4J,cAAA,SAAA1J,EAAAtB,EAAA6E,GACA,GAAAZ,GAAAjE,EAAA,GAAAkE,EAAAlE,EAAA,GAAA8E,EAAA9E,EAAA,GACAiL,EAAApG,EAAA,GAAAqG,EAAArG,EAAA,GAAAsG,EAAAtG,EAAA,GAAAuG,EAAAvG,EAAA,GAGAwG,EAAAD,EAAAnH,EAAAiH,EAAApG,EAAAqG,EAAAjH,EACAoH,EAAAF,EAAAlH,EAAAiH,EAAAlH,EAAAgH,EAAAnG,EACAyG,EAAAH,EAAAtG,EAAAmG,EAAA/G,EAAAgH,EAAAjH,EACAuH,GAAAP,EAAAhH,EAAAiH,EAAAhH,EAAAiH,EAAArG,CAOA,OAJAxD,GAAA,GAAA+J,EAAAD,EAAAI,GAAAP,EAAAK,GAAAH,EAAAI,GAAAL,EACA5J,EAAA,GAAAgK,EAAAF,EAAAI,GAAAN,EAAAK,GAAAN,EAAAI,GAAAF,EACA7J,EAAA,GAAAiK,EAAAH,EAAAI,GAAAL,EAAAE,GAAAH,EAAAI,GAAAL,EACA3J,EAAA,GAAAtB,EAAA,GACAsB,GAeAF,EAAAwK,QAAA,WACA,GAAAC,GAAAzK,EAAAC,QAEA,iBAAArB,EAAA8L,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAA1O,GAAAC,CAeA,KAdAqO,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIAtO,EADAuO,EACA3M,KAAAsJ,IAAAqD,EAAAF,EAAAC,EAAA/L,EAAAkJ,QAEAlJ,EAAAkJ,OAGA1L,EAAAuO,EAAuBvO,EAAAC,EAAOD,GAAAsO,EAC9BD,EAAA,GAAA7L,EAAAxC,GAA0BqO,EAAA,GAAA7L,EAAAxC,EAAA,GAAiBqO,EAAA,GAAA7L,EAAAxC,EAAA,GAAiBqO,EAAA,GAAA7L,EAAAxC,EAAA,GAC5DyO,EAAAJ,IAAAK,GACAlM,EAAAxC,GAAAqO,EAAA,GAA0B7L,EAAAxC,EAAA,GAAAqO,EAAA,GAAiB7L,EAAAxC,EAAA,GAAAqO,EAAA,GAAiB7L,EAAAxC,EAAA,GAAAqO,EAAA,EAG5D,OAAA7L,OAUAoB,EAAAuF,IAAA,SAAA3G,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAUAoB,EAAAgG,YAAA,SAAApH,EAAAE,GACA,MAAAF,GAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAUAkB,EAAAnB,OAAA,SAAAD,EAAAE,GACA,GAAAmH,GAAArH,EAAA,GAAAsH,EAAAtH,EAAA,GAAAuH,EAAAvH,EAAA,GAAAwH,EAAAxH,EAAA,GACA8H,EAAA5H,EAAA,GAAA6H,EAAA7H,EAAA,GAAA8H,EAAA9H,EAAA,GAAA+H,EAAA/H,EAAA,EACA,OAAAb,MAAAc,IAAAkH,EAAAS,IAAA/I,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAkH,GAAAhI,KAAAc,IAAA2H,KACAzI,KAAAc,IAAAmH,EAAAS,IAAAhJ,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAmH,GAAAjI,KAAAc,IAAA4H,KACA1I,KAAAc,IAAAoH,EAAAS,IAAAjJ,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAoH,GAAAlI,KAAAc,IAAA6H,KACA3I,KAAAc,IAAAqH,EAAAS,IAAAlJ,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAqH,GAAAnI,KAAAc,IAAA8H,KAGA1K,EAAAD,QAAA8D,GPqtDM,SAAS7D,EAAQD,EAASH,GAEhC,YQ9yEA,SAAAsP,GAAAC,EAAAC,GAEA,OADAC,MACApP,EAAA,EAAcA,EAAAkP,EAAAxD,SAAmB1L,EAIjC,OAHAe,GAAAmO,EAAAlP,GAAAO,KACA8O,EAAAtO,EAAAuO,MAAA,KACA7O,EAAA2O,EACAG,EAAA,EAAgBA,EAAAF,EAAA3D,SAAgB6D,EAAA,CAChC,GAAA9I,GAAA4I,EAAAE,GAAAD,MAAA,IACA,IAAA7I,EAAAiF,OAAA,GACAjF,EAAA,IAAAhG,KACAA,EAAAgG,EAAA,QAEAhG,IAAAgG,EAAA,GACA,QAAA+I,GAAA,EAAoBA,EAAA/I,EAAAiF,SAAY8D,EAAA,CAChC,GAAA9I,GAAA+I,SAAAhJ,EAAA+I,GACAA,GAAA/I,EAAAiF,OAAA,GAAA6D,EAAAF,EAAA3D,OAAA,GACAhF,IAAAjG,KACA+O,EAAA/I,EAAAiF,OAAA,EACAjL,EAAAiG,MAEAjG,EAAAiG,OAGAjG,IAAAiG,IAEAyI,EACA1O,EAAAiG,GAAA1G,EAEAS,EAAAiG,GAAAwI,EAAAlP,GAAAoC,UAIOmN,GAAAF,EAAA3D,OAAA,GACPjF,EAAA,IAAAhG,KACAA,EAAAgG,EAAA,QAEAhG,IAAAgG,EAAA,KAEA0I,EACA1O,EAAAgG,EAAA,IAAAzG,EAEAS,EAAAgG,EAAA,IAAAyI,EAAAlP,GAAAoC,KAKA,MAAAgN,GArDArP,EAAAD,QAAAmP,GRk3EM,SAASlP,EAAQD,GSp3EvBC,EAAAD,SAEA,MACA,OACA,MACA,MACA,OACA,OACA,OACA,QACA,MACA,QACA,OACA,OACA,UACA,WACA,MACA,QACA,MACA,OACA,cACA,QACA,QACA,eACA,2BACA,sBACA,kBACA,wBACA,eACA,gBACA,WACA,gBACA,0BACA,eACA,eACA,eACA,eACA,SACA,cACA,kBACA,mBACA,eACA,eACA,cACA,eACA,kBACA,gBACA,iBACA,4BACA,uBACA,mBACA,yBACA,gBACA,0BACA,wBACA,mBACA,iBACA,2BACA,wBACA,mBACA,kCACA,oBACA,kCACA,eACA,sBACA,0BACA,qBACA,sBACA,sBACA,gCACA,gCACA,qBACA,4BACA,qCACA,8BACA,+BACA,sCACA,+CACA,wCACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,YACA,kBACA,iBACA,kBACA,kBACA,kBACA,kBACA,WACA,gBACA,qBACA,eACA,cACA,sBACA,6BACA,sCACA,+BACA,oBACA,cACA,qBACA,mBACA,0BACA,mCACA,4BACA,YACA,cACA,mBACA,cACA,SACA,WACA,gBACA,MACA,OACA,iBACA,MACA,MACA,MACA,MACA,YACA,MACA,WACA,MACA,UACA,UACA,UACA,OACA,MACA,aACA,OACA,OACA,MACA,YACA,eACA,gBACA,mBACA,cACA,iBACA,kBACA,sBACA,oBACA,mBACA,uBACA,uBT43EM,SAASC,EAAQD,GUhhFvBC,EAAAD,SAEA,YACA,QACA,UACA,OACA,YACA,QACA,UACA,UACA,QACA,WACA,KACA,MACA,QACA,KACA,OACA,KACA,MACA,QACA,QACA,MACA,OACA,OACA,OACA,QACA,UACA,SACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,QACA,YACA,YACA,YACA,cACA,kBACA,kBACA,SAGA,MACA,QACA,QACA,OACA,UACA,WACA,OACA,SACA,OACA,SACA,UACA,SACA,WACA,WACA,SACA,SACA,SACA,WACA,YACA,OACA,QACA,SACA,OACA,QACA,WACA,QACA,SACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,gBACA,gBACA,sBACA,SACA,OACA,YACA,UVwhFM,SAASC,EAAQD,GWnnFvB,GAAA4P,EAGAA,GAAA,WAAiB,MAAAzN,QAEjB,KAEAyN,KAAAC,SAAA,qBAAAC,MAAA,QACC,MAAAC,GAED,gBAAAC,UACAJ,EAAAI,QAOA/P,EAAAD,QAAA4P,GX0nFM,SAAS3P,EAAQD,EAASH,GAEhC,YY9nFA,SAAAoQ,GAAAC,EAAA5N,EAAA6N,EAAAvE,EAAAwE,GACAjO,KAAA+N,KACA/N,KAAAG,OACAH,KAAAgO,SACAhO,KAAAyJ,SACAzJ,KAAAiO,QAiBA,QAAAC,GAAAH,EAAA5N,EAAAuJ,EAAAuE,EAAAE,EAAA7B,GACA,GAAA8B,GAAAD,EAAA1E,OAAA0E,EAAAE,iBACA,IAAA/B,EAAA,EAEA,MADAyB,GAAAO,WAAAnO,EAAAgO,EAAAF,GACAG,CAEA,IAAAA,EAAA9B,EAAA5C,EACA,SAAAxI,OAAA,yDAGA,OADA6M,GAAAQ,cAAApO,EAAAmM,EAAA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AAA,IACAo2C,EAAAp2C,EAAA,GACAw2C,EAAAx2C,EAAA,IACAu2C,EAAAv2C,EAAA,IAEAm1C,EAAA,IACAJ,EAAA,KACAb,EAAA,EACAE,EAAA,EACAE,EAAA,EACAE,EAAA,EACAE,EAAA,EACA3G,EAAA,EACAoI,EAAA,EACAD,EAAA,EACAF,EAAA,EACAf,EAAA,EACAM,EAAA,GACAX,EAAA,GAEA/3B,GACA,gBACA,eACA,eACA,WACA,UACA,QACA,QACA,UACA,UACA,aACA,MACA,YxCgiXM,SAASzc,EAAQD,EAASH,GyClkXhC,GAAAy2C,GAAAz2C,EAAA,EAIAy2C,KAAAh9B,QAAAi9B,OAAA,SAAA3zC,GACA,yBAAAyyC,KAAAzyC,KAGA3C,EAAAD,QAAAs2C,EAAAlvB,QAEA,cACA,gBACA,cACA,eACA,eACA,iBACA,eACA,gBACA,sBACA,6BACA,4BACA,6BACA,gCACA,kCACA,0BACA,+BACA,oBACA,2BACA,2BACA,0BACA,gBAGA,QACA,QACA,YACA,QACA,QACA,iBACA,kBACA,iBACA,kBACA,gBACA,kBACA,gBACA,kBACA,eACA,iBACA,eACA,YACA,cACA,UACA,UACA,cACA,cACA,aACA,gBACA,aACA,mBACA,oBACA,mBACA,iBACA,uBACA,cACA,oBACA,kBACA,2BzC2kXM,SAASnnB,EAAQD,EAASH,G0C9oXhC,GAAAy2C,GAAAz2C,EAAA,EAEAI,GAAAD,QAAAs2C,EAAAh9B,QAAA8N,QACA,SACA,WACA,SACA,OACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,OACA,QACA,QACA,QACA,oBACA,iBACA,uBACA,aACA,aACA,eACA,kBACA,aACA,aACA,eACA,kBACA,WACA,WACA,WACA,YACA,WACA,cACA,gBACA,QACA,SACA,aACA,SACA,YACA,SACA,SACA,UACA,UACA,UACA,YACA,WACA,WACA,WACA,aACA,WACA,WACA,WACA,aACA,eACA,eACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,qBACA,qBACA,cACA,eACA,eACA,iBACA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","file":"demo.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 57);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n// Configuration Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\nglMatrix.ENABLE_SIMD = false;\n\n// Capability detection\nglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in this);\nglMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    glMatrix.ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less \n * than or equal to 1.0, and a relative tolerance is used for larger values)\n * \n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nglMatrix.equals = function(a, b) {\n\treturn Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nmodule.exports = glMatrix;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\nfunction GLError (rawError, shortMessage, longMessage) {\n    this.shortMessage = shortMessage || ''\n    this.longMessage = longMessage || ''\n    this.rawError = rawError || ''\n    this.message =\n      'gl-shader: ' + (shortMessage || rawError || '') +\n      (longMessage ? '\\n'+longMessage : '')\n    this.stack = (new Error()).stack\n}\nGLError.prototype = new Error\nGLError.prototype.name = 'GLError'\nGLError.prototype.constructor = GLError\nmodule.exports = GLError\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.3.2\n */\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n// END HEADER\n\nexports.glMatrix = __webpack_require__(0);\nexports.mat2 = __webpack_require__(28);\nexports.mat2d = __webpack_require__(29);\nexports.mat3 = __webpack_require__(3);\nexports.mat4 = __webpack_require__(30);\nexports.quat = __webpack_require__(31);\nexports.vec2 = __webpack_require__(32);\nexports.vec3 = __webpack_require__(4);\nexports.vec4 = __webpack_require__(5);\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(0);\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nmat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nmat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n};\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nmat3.sub = mat3.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nmat3.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n};\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nmat3.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    return out;\n};\n\n/*\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && \n           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n};\n\n\nmodule.exports = mat3;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(0);\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nvec3.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nvec3.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nvec3.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n  var factorTimes2 = t * t,\n      factor1 = factorTimes2 * (2 * t - 3) + 1,\n      factor2 = factorTimes2 * (t - 2) + t,\n      factor3 = factorTimes2 * (t - 1),\n      factor4 = factorTimes2 * (3 - 2 * t);\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n  var inverseFactor = 1 - t,\n      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n      factorTimes2 = t * t,\n      factor1 = inverseFactorTimesTwo * inverseFactor,\n      factor2 = 3 * t * inverseFactorTimesTwo,\n      factor3 = 3 * factorTimes2 * inverseFactor,\n      factor4 = factorTimes2 * t;\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n   \n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n \n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n \n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0){\n        return 0;\n    } else {\n        return Math.acos(cosine);\n    }     \n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2];\n    var b0 = b[0], b1 = b[1], b2 = b[2];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n};\n\nmodule.exports = vec3;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(0);\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nvec4.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nvec4.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nvec4.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = x * len;\n        out[1] = y * len;\n        out[2] = z * len;\n        out[3] = w * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = glMatrix.RANDOM();\n    out[1] = glMatrix.RANDOM();\n    out[2] = glMatrix.RANDOM();\n    out[3] = glMatrix.RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\nmodule.exports = vec4;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = makeReflectTypes\n\n//Construct type info for reflection.\n//\n// This iterates over the flattened list of uniform type values and smashes them into a JSON object.\n//\n// The leaves of the resulting object are either indices or type strings representing primitive glslify types\nfunction makeReflectTypes(uniforms, useIndex) {\n  var obj = {}\n  for(var i=0; i<uniforms.length; ++i) {\n    var n = uniforms[i].name\n    var parts = n.split(\".\")\n    var o = obj\n    for(var j=0; j<parts.length; ++j) {\n      var x = parts[j].split(\"[\")\n      if(x.length > 1) {\n        if(!(x[0] in o)) {\n          o[x[0]] = []\n        }\n        o = o[x[0]]\n        for(var k=1; k<x.length; ++k) {\n          var y = parseInt(x[k])\n          if(k<x.length-1 || j<parts.length-1) {\n            if(!(y in o)) {\n              if(k < x.length-1) {\n                o[y] = []\n              } else {\n                o[y] = {}\n              }\n            }\n            o = o[y]\n          } else {\n            if(useIndex) {\n              o[y] = i\n            } else {\n              o[y] = uniforms[i].type\n            }\n          }\n        }\n      } else if(j < parts.length-1) {\n        if(!(x[0] in o)) {\n          o[x[0]] = {}\n        }\n        o = o[x[0]]\n      } else {\n        if(useIndex) {\n          o[x[0]] = i\n        } else {\n          o[x[0]] = uniforms[i].type\n        }\n      }\n    }\n  }\n  return obj\n}\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\nmodule.exports = [\n  // Keep this list sorted\n  'abs'\n  , 'acos'\n  , 'all'\n  , 'any'\n  , 'asin'\n  , 'atan'\n  , 'ceil'\n  , 'clamp'\n  , 'cos'\n  , 'cross'\n  , 'dFdx'\n  , 'dFdy'\n  , 'degrees'\n  , 'distance'\n  , 'dot'\n  , 'equal'\n  , 'exp'\n  , 'exp2'\n  , 'faceforward'\n  , 'floor'\n  , 'fract'\n  , 'gl_BackColor'\n  , 'gl_BackLightModelProduct'\n  , 'gl_BackLightProduct'\n  , 'gl_BackMaterial'\n  , 'gl_BackSecondaryColor'\n  , 'gl_ClipPlane'\n  , 'gl_ClipVertex'\n  , 'gl_Color'\n  , 'gl_DepthRange'\n  , 'gl_DepthRangeParameters'\n  , 'gl_EyePlaneQ'\n  , 'gl_EyePlaneR'\n  , 'gl_EyePlaneS'\n  , 'gl_EyePlaneT'\n  , 'gl_Fog'\n  , 'gl_FogCoord'\n  , 'gl_FogFragCoord'\n  , 'gl_FogParameters'\n  , 'gl_FragColor'\n  , 'gl_FragCoord'\n  , 'gl_FragData'\n  , 'gl_FragDepth'\n  , 'gl_FragDepthEXT'\n  , 'gl_FrontColor'\n  , 'gl_FrontFacing'\n  , 'gl_FrontLightModelProduct'\n  , 'gl_FrontLightProduct'\n  , 'gl_FrontMaterial'\n  , 'gl_FrontSecondaryColor'\n  , 'gl_LightModel'\n  , 'gl_LightModelParameters'\n  , 'gl_LightModelProducts'\n  , 'gl_LightProducts'\n  , 'gl_LightSource'\n  , 'gl_LightSourceParameters'\n  , 'gl_MaterialParameters'\n  , 'gl_MaxClipPlanes'\n  , 'gl_MaxCombinedTextureImageUnits'\n  , 'gl_MaxDrawBuffers'\n  , 'gl_MaxFragmentUniformComponents'\n  , 'gl_MaxLights'\n  , 'gl_MaxTextureCoords'\n  , 'gl_MaxTextureImageUnits'\n  , 'gl_MaxTextureUnits'\n  , 'gl_MaxVaryingFloats'\n  , 'gl_MaxVertexAttribs'\n  , 'gl_MaxVertexTextureImageUnits'\n  , 'gl_MaxVertexUniformComponents'\n  , 'gl_ModelViewMatrix'\n  , 'gl_ModelViewMatrixInverse'\n  , 'gl_ModelViewMatrixInverseTranspose'\n  , 'gl_ModelViewMatrixTranspose'\n  , 'gl_ModelViewProjectionMatrix'\n  , 'gl_ModelViewProjectionMatrixInverse'\n  , 'gl_ModelViewProjectionMatrixInverseTranspose'\n  , 'gl_ModelViewProjectionMatrixTranspose'\n  , 'gl_MultiTexCoord0'\n  , 'gl_MultiTexCoord1'\n  , 'gl_MultiTexCoord2'\n  , 'gl_MultiTexCoord3'\n  , 'gl_MultiTexCoord4'\n  , 'gl_MultiTexCoord5'\n  , 'gl_MultiTexCoord6'\n  , 'gl_MultiTexCoord7'\n  , 'gl_Normal'\n  , 'gl_NormalMatrix'\n  , 'gl_NormalScale'\n  , 'gl_ObjectPlaneQ'\n  , 'gl_ObjectPlaneR'\n  , 'gl_ObjectPlaneS'\n  , 'gl_ObjectPlaneT'\n  , 'gl_Point'\n  , 'gl_PointCoord'\n  , 'gl_PointParameters'\n  , 'gl_PointSize'\n  , 'gl_Position'\n  , 'gl_ProjectionMatrix'\n  , 'gl_ProjectionMatrixInverse'\n  , 'gl_ProjectionMatrixInverseTranspose'\n  , 'gl_ProjectionMatrixTranspose'\n  , 'gl_SecondaryColor'\n  , 'gl_TexCoord'\n  , 'gl_TextureEnvColor'\n  , 'gl_TextureMatrix'\n  , 'gl_TextureMatrixInverse'\n  , 'gl_TextureMatrixInverseTranspose'\n  , 'gl_TextureMatrixTranspose'\n  , 'gl_Vertex'\n  , 'greaterThan'\n  , 'greaterThanEqual'\n  , 'inversesqrt'\n  , 'length'\n  , 'lessThan'\n  , 'lessThanEqual'\n  , 'log'\n  , 'log2'\n  , 'matrixCompMult'\n  , 'max'\n  , 'min'\n  , 'mix'\n  , 'mod'\n  , 'normalize'\n  , 'not'\n  , 'notEqual'\n  , 'pow'\n  , 'radians'\n  , 'reflect'\n  , 'refract'\n  , 'sign'\n  , 'sin'\n  , 'smoothstep'\n  , 'sqrt'\n  , 'step'\n  , 'tan'\n  , 'texture2D'\n  , 'texture2DLod'\n  , 'texture2DProj'\n  , 'texture2DProjLod'\n  , 'textureCube'\n  , 'textureCubeLod'\n  , 'texture2DLodEXT'\n  , 'texture2DProjLodEXT'\n  , 'textureCubeLodEXT'\n  , 'texture2DGradEXT'\n  , 'texture2DProjGradEXT'\n  , 'textureCubeGradEXT'\n]\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\nmodule.exports = [\n  // current\n    'precision'\n  , 'highp'\n  , 'mediump'\n  , 'lowp'\n  , 'attribute'\n  , 'const'\n  , 'uniform'\n  , 'varying'\n  , 'break'\n  , 'continue'\n  , 'do'\n  , 'for'\n  , 'while'\n  , 'if'\n  , 'else'\n  , 'in'\n  , 'out'\n  , 'inout'\n  , 'float'\n  , 'int'\n  , 'void'\n  , 'bool'\n  , 'true'\n  , 'false'\n  , 'discard'\n  , 'return'\n  , 'mat2'\n  , 'mat3'\n  , 'mat4'\n  , 'vec2'\n  , 'vec3'\n  , 'vec4'\n  , 'ivec2'\n  , 'ivec3'\n  , 'ivec4'\n  , 'bvec2'\n  , 'bvec3'\n  , 'bvec4'\n  , 'sampler1D'\n  , 'sampler2D'\n  , 'sampler3D'\n  , 'samplerCube'\n  , 'sampler1DShadow'\n  , 'sampler2DShadow'\n  , 'struct'\n\n  // future\n  , 'asm'\n  , 'class'\n  , 'union'\n  , 'enum'\n  , 'typedef'\n  , 'template'\n  , 'this'\n  , 'packed'\n  , 'goto'\n  , 'switch'\n  , 'default'\n  , 'inline'\n  , 'noinline'\n  , 'volatile'\n  , 'public'\n  , 'static'\n  , 'extern'\n  , 'external'\n  , 'interface'\n  , 'long'\n  , 'short'\n  , 'double'\n  , 'half'\n  , 'fixed'\n  , 'unsigned'\n  , 'input'\n  , 'output'\n  , 'hvec2'\n  , 'hvec3'\n  , 'hvec4'\n  , 'dvec2'\n  , 'dvec3'\n  , 'dvec4'\n  , 'fvec2'\n  , 'fvec3'\n  , 'fvec4'\n  , 'sampler2DRect'\n  , 'sampler3DRect'\n  , 'sampler2DRectShadow'\n  , 'sizeof'\n  , 'cast'\n  , 'namespace'\n  , 'using'\n]\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar pool = __webpack_require__(52)\nvar ops = __webpack_require__(47)\nvar ndarray = __webpack_require__(48)\n\nvar SUPPORTED_TYPES = [\n  \"uint8\",\n  \"uint8_clamped\",\n  \"uint16\",\n  \"uint32\",\n  \"int8\",\n  \"int16\",\n  \"int32\",\n  \"float32\" ]\n\nfunction GLBuffer(gl, type, handle, length, usage) {\n  this.gl = gl\n  this.type = type\n  this.handle = handle\n  this.length = length\n  this.usage = usage\n}\n\nvar proto = GLBuffer.prototype\n\nproto.bind = function() {\n  this.gl.bindBuffer(this.type, this.handle)\n}\n\nproto.unbind = function() {\n  this.gl.bindBuffer(this.type, null)\n}\n\nproto.dispose = function() {\n  this.gl.deleteBuffer(this.handle)\n}\n\nfunction updateTypeArray(gl, type, len, usage, data, offset) {\n  var dataLen = data.length * data.BYTES_PER_ELEMENT\n  if(offset < 0) {\n    gl.bufferData(type, data, usage)\n    return dataLen\n  }\n  if(dataLen + offset > len) {\n    throw new Error(\"gl-buffer: If resizing buffer, must not specify offset\")\n  }\n  gl.bufferSubData(type, offset, data)\n  return len\n}\n\nfunction makeScratchTypeArray(array, dtype) {\n  var res = pool.malloc(array.length, dtype)\n  var n = array.length\n  for(var i=0; i<n; ++i) {\n    res[i] = array[i]\n  }\n  return res\n}\n\nfunction isPacked(shape, stride) {\n  var n = 1\n  for(var i=stride.length-1; i>=0; --i) {\n    if(stride[i] !== n) {\n      return false\n    }\n    n *= shape[i]\n  }\n  return true\n}\n\nproto.update = function(array, offset) {\n  if(typeof offset !== \"number\") {\n    offset = -1\n  }\n  this.bind()\n  if(typeof array === \"object\" && typeof array.shape !== \"undefined\") { //ndarray\n    var dtype = array.dtype\n    if(SUPPORTED_TYPES.indexOf(dtype) < 0) {\n      dtype = \"float32\"\n    }\n    if(this.type === this.gl.ELEMENT_ARRAY_BUFFER) {\n      var ext = gl.getExtension('OES_element_index_uint')\n      if(ext && dtype !== \"uint16\") {\n        dtype = \"uint32\"\n      } else {\n        dtype = \"uint16\"\n      }\n    }\n    if(dtype === array.dtype && isPacked(array.shape, array.stride)) {\n      if(array.offset === 0 && array.data.length === array.shape[0]) {\n        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array.data, offset)\n      } else {\n        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array.data.subarray(array.offset, array.shape[0]), offset)\n      }\n    } else {\n      var tmp = pool.malloc(array.size, dtype)\n      var ndt = ndarray(tmp, array.shape)\n      ops.assign(ndt, array)\n      if(offset < 0) {\n        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, tmp, offset)\n      } else {\n        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, tmp.subarray(0, array.size), offset)\n      }\n      pool.free(tmp)\n    }\n  } else if(Array.isArray(array)) { //Vanilla array\n    var t\n    if(this.type === this.gl.ELEMENT_ARRAY_BUFFER) {\n      t = makeScratchTypeArray(array, \"uint16\")\n    } else {\n      t = makeScratchTypeArray(array, \"float32\")\n    }\n    if(offset < 0) {\n      this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, t, offset)\n    } else {\n      this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, t.subarray(0, array.length), offset)\n    }\n    pool.free(t)\n  } else if(typeof array === \"object\" && typeof array.length === \"number\") { //Typed array\n    this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array, offset)\n  } else if(typeof array === \"number\" || array === undefined) { //Number/default\n    if(offset >= 0) {\n      throw new Error(\"gl-buffer: Cannot specify offset when resizing buffer\")\n    }\n    array = array | 0\n    if(array <= 0) {\n      array = 1\n    }\n    this.gl.bufferData(this.type, array|0, this.usage)\n    this.length = array\n  } else { //Error, case should not happen\n    throw new Error(\"gl-buffer: Invalid data type\")\n  }\n}\n\nfunction createBuffer(gl, data, type, usage) {\n  type = type || gl.ARRAY_BUFFER\n  usage = usage || gl.DYNAMIC_DRAW\n  if(type !== gl.ARRAY_BUFFER && type !== gl.ELEMENT_ARRAY_BUFFER) {\n    throw new Error(\"gl-buffer: Invalid type for webgl buffer, must be either gl.ARRAY_BUFFER or gl.ELEMENT_ARRAY_BUFFER\")\n  }\n  if(usage !== gl.DYNAMIC_DRAW && usage !== gl.STATIC_DRAW && usage !== gl.STREAM_DRAW) {\n    throw new Error(\"gl-buffer: Invalid usage for buffer, must be either gl.DYNAMIC_DRAW, gl.STATIC_DRAW or gl.STREAM_DRAW\")\n  }\n  var handle = gl.createBuffer()\n  var result = new GLBuffer(gl, type, handle, 0, usage)\n  result.update(data)\n  return result\n}\n\nmodule.exports = createBuffer\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar glMatrix = __webpack_require__(2);\n\nvar flyCamera = function( opts ) {\n\tif ( !opts ) opts = {};\n\tthis.domElement = ( opts.domElement !== undefined ) ? opts.domElement : document;\n\tif ( opts.domElement ) this.domElement.setAttribute( 'tabindex', -1 );\n\n\tthis.movementSpeed = opts.movementSpeed || 10.0;\n\tthis.rollSpeed = opts.rollSpeed || Math.PI / 3;\n\tthis.dragToLook = opts.dragToLook || false;\n\tthis.autoForward = opts.autoForward || false;\n\tthis.paused = opts.paused || false;\n\tthis.mouseStatus = 0;\n\n\tthis.tmpQuaternion = glMatrix.quat.create();\n\tthis.moveVector = glMatrix.vec3.create();\n\tthis.rotationVector = glMatrix.vec3.create();\n\n\n\tif (opts.position){\n\t\tthis.position = glMatrix.vec3.fromValues(opts.position[0], opts.position[1], opts.position[2])\n\t} else {\n\t\tthis.position = glMatrix.vec3.create();\n\t}\n\tif(opts.quaternion){\n\t\tthis.quaternion = glMatrix.quat.fromValues(opts.quaternion[0], opts.quaternion[1], opts.quaternion[2], opts.quaternion[3])\n\t} else {\n\t\tthis.quaternion = glMatrix.quat.create();\n\t}\n\n\tthis.moveState = { \n\t\tup: 0, \n\t\tdown: 0, \n\t\tleft: 0, \n\t\tright: 0, \n\t\tforward: 0, \n\t\tback: 0, \n\t\tpitchUp: 0, \n\t\tpitchDown: 0, \n\t\tyawLeft: 0, \n\t\tyawRight: 0, \n\t\trollLeft: 0, \n\t\trollRight: 0 \n\t};\n}\n\nflyCamera.prototype.keydown = function (event) {\n\tif ( event.altKey ) {\n\t\t\treturn;\n\t}\n\tevent.preventDefault();\n\tswitch ( event.keyCode ) {\n\t\tcase 16: /* shift */ this.movementSpeedMultiplier = .1; break;\n\t\tcase 87: /*W*/ this.moveState.forward = 1; break;\n\t\tcase 83: /*S*/ this.moveState.back = 1; break;\n\t\tcase 65: /*A*/ this.moveState.left = 1; break;\n\t\tcase 68: /*D*/ this.moveState.right = 1; break;\n\t\tcase 82: /*R*/ this.moveState.up = 1; break;\n\t\tcase 70: /*F*/ this.moveState.down = 1; break;\n\t\tcase 38: /*up*/ this.moveState.pitchUp = 1; break;\n\t\tcase 40: /*down*/ this.moveState.pitchDown = 1; break;\n\t\tcase 37: /*left*/ this.moveState.yawLeft = 1; break;\n\t\tcase 39: /*right*/ this.moveState.yawRight = 1; break;\n\t\tcase 81: /*Q*/ this.moveState.rollLeft = 1; break;\n\t\tcase 69: /*E*/ this.moveState.rollRight = 1; break;\n\t\tcase 32: /*space*/ this.paused = !this.paused; break;\n\t}\n\tthis.updateMovementVector();\n\tthis.updateRotationVector();\n}\n\nflyCamera.prototype.keyup = function (event) {\n\tswitch ( event.keyCode ) {\n\t\tcase 16: /* shift */ this.movementSpeedMultiplier = 1; break;\n\t\tcase 87: /*W*/ this.moveState.forward = 0; break;\n\t\tcase 83: /*S*/ this.moveState.back = 0; break;\n\t\tcase 65: /*A*/ this.moveState.left = 0; break;\n\t\tcase 68: /*D*/ this.moveState.right = 0; break;\n\t\tcase 82: /*R*/ this.moveState.up = 0; break;\n\t\tcase 70: /*F*/ this.moveState.down = 0; break;\n\t\tcase 38: /*up*/ this.moveState.pitchUp = 0; break;\n\t\tcase 40: /*down*/ this.moveState.pitchDown = 0; break;\n\t\tcase 37: /*left*/ this.moveState.yawLeft = 0; break;\n\t\tcase 39: /*right*/ this.moveState.yawRight = 0; break;\n\t\tcase 81: /*Q*/ this.moveState.rollLeft = 0; break;\n\t\tcase 69: /*E*/ this.moveState.rollRight = 0; break;\n\t}\n\tthis.updateMovementVector();\n\tthis.updateRotationVector();\n};\n\nflyCamera.prototype.mousemove = function (event) {\n\tif ( !this.dragToLook || this.mouseStatus > 0 ) {\n\t\tvar container = this.getContainerDimensions();\n\t\tvar halfWidth  = container.size[ 0 ] / 2;\n\t\tvar halfHeight = container.size[ 1 ] / 2;\n\t\tthis.moveState.yawLeft   = - ( ( event.pageX - container.offset[ 0 ] ) - halfWidth  ) / halfWidth;\n\t\tthis.moveState.pitchDown =   ( ( event.pageY - container.offset[ 1 ] ) - halfHeight ) / halfHeight;\n\t\tthis.updateRotationVector();\n\t}\n};\n\nflyCamera.prototype.mousedown = function (event) {\n\tif ( this.domElement !== document ) {\n\t\tthis.domElement.focus();\n\t}\n\tevent.preventDefault();\n\tevent.stopPropagation();\n\tif ( this.dragToLook ) {\n\t\tthis.mouseStatus ++;\n\t} else {\n\t\tswitch ( event.button ) {\n\t\t\tcase 0: this.moveState.forward = 1; break;\n\t\t\tcase 2: this.moveState.back = 1; break;\n\t\t}\n\t\tthis.updateMovementVector();\n\t}\n};\n\nflyCamera.prototype.mouseup = function (event) {\n\tevent.preventDefault();\n\tevent.stopPropagation();\n\tif ( this.dragToLook ) {\n\t\tthis.mouseStatus --;\n\t\tthis.moveState.yawLeft = this.moveState.pitchDown = 0;\n\t} else {\n\t\tswitch ( event.button ) {\n\t\t\tcase 0: this.moveState.forward = 0; break;\n\t\t\tcase 2: this.moveState.back = 0; break;\n\t\t}\n\t\tthis.updateMovementVector();\n\t}\n\tthis.updateRotationVector();\n};\n\nflyCamera.prototype.update = function (delta) {\n\tif (!this.paused){\n\t\tthis.updateMovementVector();\n\t\tthis.updateRotationVector();\n\n\t\tdelta = delta / 1000;\n\n\t\tvar moveMult = delta * this.movementSpeed;\n\t\tvar rotMult  = delta * this.rollSpeed;\n\n\n\t\tglMatrix.vec3.scale( this.rotationVector, this.rotationVector, rotMult );\n\t\tthis.tmpQuaternion = glMatrix.quat.fromValues(this.rotationVector[0],this.rotationVector[1],this.rotationVector[2], 1);\n\t\tglMatrix.quat.normalize(this.tmpQuaternion,this.tmpQuaternion);\n\t\tglMatrix.quat.mul(this.quaternion, this.quaternion, this.tmpQuaternion);\n\n\t\tglMatrix.vec3.scale( this.moveVector, this.moveVector, moveMult );\n\t\tglMatrix.vec3.transformQuat( this.moveVector,  this.moveVector, this.quaternion );\n\t\tglMatrix.vec3.add( this.position, this.position, this.moveVector );\n\t}\n};\n\nflyCamera.prototype.updateMovementVector = function () {\n\tif (!this.paused){\n\t\tvar forward = ( this.moveState.forward || ( this.autoForward && !this.moveState.back ) ) ? 1 : 0;\n\t\tthis.moveVector = glMatrix.vec3.fromValues(\n\t\t\t-this.moveState.left    + this.moveState.right,\n\t\t\t-this.moveState.down    + this.moveState.up,\n\t\t\t-forward + this.moveState.back\n\t\t);\n\t}\n};\n\nflyCamera.prototype.updateRotationVector = function () {\n\tif (!this.paused){\n\t\tthis.rotationVector = glMatrix.vec3.fromValues(\n\t\t\t-this.moveState.pitchDown + this.moveState.pitchUp,\n\t\t\t-this.moveState.yawRight  + this.moveState.yawLeft,\n\t\t\t-this.moveState.rollRight + this.moveState.rollLeft\n\t\t);\n\t}\n};\n\nflyCamera.prototype.getContainerDimensions = function () {\n\tif ( this.domElement !== document ) {\n\t\treturn {\n\t\t\tsize  : [ this.domElement.offsetWidth, this.domElement.offsetHeight ],\n\t\t\toffset  : [ this.domElement.offsetLeft,  this.domElement.offsetTop ]\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\tsize  : [ window.innerWidth, window.innerHeight ],\n\t\t\toffset  : [ 0, 0 ]\n\t\t};\n\t}\n};\n\nflyCamera.prototype.start = function () {\n\tdocument.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); } );\n\tdocument.addEventListener( 'mousemove', this.mousemove.bind(this) );\n\tdocument.addEventListener( 'mousedown', this.mousedown.bind(this) );\n\tdocument.addEventListener( 'mouseup',   this.mouseup.bind(this) );\n\twindow.addEventListener( 'keydown', this.keydown.bind(this) );\n\twindow.addEventListener( 'keyup',   this.keyup.bind(this) );\n\tthis.updateMovementVector();\n\tthis.updateRotationVector();\n}\n\nmodule.exports = flyCamera;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar createUniformWrapper   = __webpack_require__(34)\nvar createAttributeWrapper = __webpack_require__(33)\nvar makeReflect            = __webpack_require__(6)\nvar shaderCache            = __webpack_require__(36)\nvar runtime                = __webpack_require__(35)\nvar GLError                = __webpack_require__(1)\n\n//Shader object\nfunction Shader(gl) {\n  this.gl         = gl\n\n  //Default initialize these to null\n  this._vref      =\n  this._fref      =\n  this._relink    =\n  this.vertShader =\n  this.fragShader =\n  this.program    =\n  this.attributes =\n  this.uniforms   =\n  this.types      = null\n}\n\nvar proto = Shader.prototype\n\nproto.bind = function() {\n  if(!this.program) {\n    this._relink()\n  }\n  this.gl.useProgram(this.program)\n}\n\nproto.dispose = function() {\n  if(this._fref) {\n    this._fref.dispose()\n  }\n  if(this._vref) {\n    this._vref.dispose()\n  }\n  this.attributes =\n  this.types      =\n  this.vertShader =\n  this.fragShader =\n  this.program    =\n  this._relink    =\n  this._fref      =\n  this._vref      = null\n}\n\nfunction compareAttributes(a, b) {\n  if(a.name < b.name) {\n    return -1\n  }\n  return 1\n}\n\n//Update export hook for glslify-live\nproto.update = function(\n    vertSource\n  , fragSource\n  , uniforms\n  , attributes) {\n\n  //If only one object passed, assume glslify style output\n  if(!fragSource || arguments.length === 1) {\n    var obj = vertSource\n    vertSource = obj.vertex\n    fragSource = obj.fragment\n    uniforms   = obj.uniforms\n    attributes = obj.attributes\n  }\n\n  var wrapper = this\n  var gl      = wrapper.gl\n\n  //Compile vertex and fragment shaders\n  var pvref = wrapper._vref\n  wrapper._vref = shaderCache.shader(gl, gl.VERTEX_SHADER, vertSource)\n  if(pvref) {\n    pvref.dispose()\n  }\n  wrapper.vertShader = wrapper._vref.shader\n  var pfref = this._fref\n  wrapper._fref = shaderCache.shader(gl, gl.FRAGMENT_SHADER, fragSource)\n  if(pfref) {\n    pfref.dispose()\n  }\n  wrapper.fragShader = wrapper._fref.shader\n\n  //If uniforms/attributes is not specified, use RT reflection\n  if(!uniforms || !attributes) {\n\n    //Create initial test program\n    var testProgram = gl.createProgram()\n    gl.attachShader(testProgram, wrapper.fragShader)\n    gl.attachShader(testProgram, wrapper.vertShader)\n    gl.linkProgram(testProgram)\n    if(!gl.getProgramParameter(testProgram, gl.LINK_STATUS)) {\n      var errLog = gl.getProgramInfoLog(testProgram)\n      throw new GLError(errLog, 'Error linking program:' + errLog)\n    }\n\n    //Load data from runtime\n    uniforms   = uniforms   || runtime.uniforms(gl, testProgram)\n    attributes = attributes || runtime.attributes(gl, testProgram)\n\n    //Release test program\n    gl.deleteProgram(testProgram)\n  }\n\n  //Sort attributes lexicographically\n  // overrides undefined WebGL behavior for attribute locations\n  attributes = attributes.slice()\n  attributes.sort(compareAttributes)\n\n  //Convert attribute types, read out locations\n  var attributeUnpacked  = []\n  var attributeNames     = []\n  var attributeLocations = []\n  for(var i=0; i<attributes.length; ++i) {\n    var attr = attributes[i]\n    if(attr.type.indexOf('mat') >= 0) {\n      var size = attr.type.charAt(attr.type.length-1)|0\n      var locVector = new Array(size)\n      for(var j=0; j<size; ++j) {\n        locVector[j] = attributeLocations.length\n        attributeNames.push(attr.name + '[' + j + ']')\n        if(typeof attr.location === 'number') {\n          attributeLocations.push(attr.location + j)\n        } else if(Array.isArray(attr.location) &&\n                  attr.location.length === size &&\n                  typeof attr.location[j] === 'number') {\n          attributeLocations.push(attr.location[j]|0)\n        } else {\n          attributeLocations.push(-1)\n        }\n      }\n      attributeUnpacked.push({\n        name: attr.name,\n        type: attr.type,\n        locations: locVector\n      })\n    } else {\n      attributeUnpacked.push({\n        name: attr.name,\n        type: attr.type,\n        locations: [ attributeLocations.length ]\n      })\n      attributeNames.push(attr.name)\n      if(typeof attr.location === 'number') {\n        attributeLocations.push(attr.location|0)\n      } else {\n        attributeLocations.push(-1)\n      }\n    }\n  }\n\n  //For all unspecified attributes, assign them lexicographically min attribute\n  var curLocation = 0\n  for(var i=0; i<attributeLocations.length; ++i) {\n    if(attributeLocations[i] < 0) {\n      while(attributeLocations.indexOf(curLocation) >= 0) {\n        curLocation += 1\n      }\n      attributeLocations[i] = curLocation\n    }\n  }\n\n  //Rebuild program and recompute all uniform locations\n  var uniformLocations = new Array(uniforms.length)\n  function relink() {\n    wrapper.program = shaderCache.program(\n        gl\n      , wrapper._vref\n      , wrapper._fref\n      , attributeNames\n      , attributeLocations)\n\n    for(var i=0; i<uniforms.length; ++i) {\n      uniformLocations[i] = gl.getUniformLocation(\n          wrapper.program\n        , uniforms[i].name)\n    }\n  }\n\n  //Perform initial linking, reuse program used for reflection\n  relink()\n\n  //Save relinking procedure, defer until runtime\n  wrapper._relink = relink\n\n  //Generate type info\n  wrapper.types = {\n    uniforms:   makeReflect(uniforms),\n    attributes: makeReflect(attributes)\n  }\n\n  //Generate attribute wrappers\n  wrapper.attributes = createAttributeWrapper(\n      gl\n    , wrapper\n    , attributeUnpacked\n    , attributeLocations)\n\n  //Generate uniform wrappers\n  Object.defineProperty(wrapper, 'uniforms', createUniformWrapper(\n      gl\n    , wrapper\n    , uniforms\n    , uniformLocations))\n}\n\n//Compiles and links a shader program with the given attribute and vertex list\nfunction createShader(\n    gl\n  , vertSource\n  , fragSource\n  , uniforms\n  , attributes) {\n\n  var shader = new Shader(gl)\n\n  shader.update(\n      vertSource\n    , fragSource\n    , uniforms\n    , attributes)\n\n  return shader\n}\n\nmodule.exports = createShader\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\nmodule.exports = \"//Distance field functions found here : http://www.iquilezles.org/www/articles/distfunctions/distfunctions.html\\nprecision mediump float;\\n\\nuniform float uGlobalTime;\\nuniform vec2 uResolution;\\n\\nuniform vec3 uCamPosition;\\nuniform vec3 uCamDir;\\nuniform vec3 uCamUp;\\n\\nvarying vec2 uv;\\n#define FieldOfView 1.0\\n\\n//-----------------Operation functions--------------------\\n\\n//Union operation (d1 + d2)\\nfloat opU(float d1, float d2)\\n{\\n\\treturn min(d1,d2);   \\n}\\n\\n//Subtraction operation (d1 - d2)\\nfloat opS(float d1, float d2)\\n{\\n\\treturn max(-d1,d2);   \\n}\\n\\n//Intersection operation (only shows the primitives that intersect)\\nfloat opI(float d1, float d2)\\n{\\n\\treturn max(d1,d2);\\n}\\n\\n//Changes the colour based on it's distance from the camera\\nfloat opFog(float p)\\n{\\n\\treturn 1.0 / (1.0 * p * p * 0.05);   \\n}\\n\\n//Repeats the primitive across the coordinate space (p = point along ray, c = dimensions of repetition)\\nvec3 opRepeat(vec3 p, vec3 c)\\n{\\n\\tvec3 q = mod(p,c) - 0.5 * c;\\n\\treturn q;\\n}\\n\\n//-----------------Distance field functions--------------------\\n\\n//Distance field function for a torus primitive (p = point along ray, t = dimesions of torus (inner radius, outer radius))\\nfloat rTorus(vec3 p, vec2 t)\\n{\\n\\tvec3 q = fract(p) * 2.0 - 1.0;\\n\\t\\n\\tvec2 s = vec2(length(q.xz) - t.x,q.y);\\n\\treturn length(s)-t.y;\\n}\\n//-----------------Main functions--------------------\\n\\n//Main tracing function that maps the distances of each pixel\\nfloat trace(vec3 ro, vec3 rt)\\n{\\n\\tfloat t = 0.0;\\n\\t\\n\\t//Loop through (in this case 32 times)\\n\\tfor(int i = 0; i < 32; ++i)\\n\\t{\\n\\t\\t//Get the point along the ray\\n\\t\\tvec3 p = ro + rt * t;\\n\\n\\t\\tfloat n = abs(sin(uGlobalTime));\\n\\t\\tp.y *= n;\\n\\t\\t//Get the value for the distance field\\n\\t\\tfloat d = rTorus(p, vec2(1.0, -0.1));\\n\\n\\t\\tt += d * 0.5;\\n\\t}\\n\\treturn t;\\n}\\n\\nvoid main()\\n{\\n\\n\\tvec2 coord = uv;\\n\\tcoord.x *= uResolution.x / uResolution.y;\\n\\n\\n\\t// Camera position (eye), and camera target\\n\\tvec3 camPos = vec3(uCamPosition.x,uCamPosition.y,uCamPosition.z);\\n\\tvec3 target = camPos+vec3(uCamDir.x,uCamDir.y,uCamDir.z);\\n\\tvec3 camUp  = vec3(uCamUp.x,uCamUp.y,uCamUp.z);\\n\\t\\n\\t// Calculate orthonormal camera reference system\\n\\tvec3 camDir   = normalize(target-camPos); // direction for center ray\\n\\tcamUp = normalize(camUp-dot(camDir,camUp)*camDir); // orthogonalize\\n\\tvec3 camRight = normalize(cross(camDir,camUp));\\n\\t\\n\\t\\n\\t// Get direction for this pixel\\n\\tvec3 rayDir = normalize(camDir + (coord.x*camRight + coord.y*camUp)*FieldOfView);\\n\\n\\t//Call the main trace function and get a value\\n\\tfloat t = trace(camPos,rayDir);\\n\\n\\t//Call the fogging function to apply some depth to the image\\n\\tt = opFog(t);\\n\\n\\tgl_FragColor = vec4(t,0.0,0.0,1.0);\\n}\\n\"\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\n\\nattribute vec2 position;\\n\\nvarying vec2 uv;\\n\\nvoid main() {\\n\\tgl_Position = vec4(position, 0, 1);\\n\\tuv = position.xy;\\n}\"\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){ true?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar padLeft = __webpack_require__(49)\n\nmodule.exports = addLineNumbers\nfunction addLineNumbers (string, start, delim) {\n  start = typeof start === 'number' ? start : 1\n  delim = delim || ': '\n\n  var lines = string.split(/\\r?\\n/)\n  var totalDigits = String(lines.length + start - 1).length\n  return lines.map(function (line, i) {\n    var c = i + start\n    var digits = String(c).length\n    var prefix = padLeft(c, totalDigits - digits)\n    return prefix + delim + line\n  }).join('\\n')\n}\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\nmodule.exports = function _atob(str) {\n  return atob(str)\n}\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * Bit twiddling hacks for JavaScript.\n *\n * Author: Mikola Lysenko\n *\n * Ported from Stanford bit twiddling hack library:\n *    http://graphics.stanford.edu/~seander/bithacks.html\n */\n\n \"use restrict\";\n\n//Number of bits in an integer\nvar INT_BITS = 32;\n\n//Constants\nexports.INT_BITS  = INT_BITS;\nexports.INT_MAX   =  0x7fffffff;\nexports.INT_MIN   = -1<<(INT_BITS-1);\n\n//Returns -1, 0, +1 depending on sign of x\nexports.sign = function(v) {\n  return (v > 0) - (v < 0);\n}\n\n//Computes absolute value of integer\nexports.abs = function(v) {\n  var mask = v >> (INT_BITS-1);\n  return (v ^ mask) - mask;\n}\n\n//Computes minimum of integers x and y\nexports.min = function(x, y) {\n  return y ^ ((x ^ y) & -(x < y));\n}\n\n//Computes maximum of integers x and y\nexports.max = function(x, y) {\n  return x ^ ((x ^ y) & -(x < y));\n}\n\n//Checks if a number is a power of two\nexports.isPow2 = function(v) {\n  return !(v & (v-1)) && (!!v);\n}\n\n//Computes log base 2 of v\nexports.log2 = function(v) {\n  var r, shift;\n  r =     (v > 0xFFFF) << 4; v >>>= r;\n  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;\n  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;\n  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;\n  return r | (v >> 1);\n}\n\n//Computes log base 10 of v\nexports.log10 = function(v) {\n  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :\n          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :\n          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;\n}\n\n//Counts number of bits\nexports.popCount = function(v) {\n  v = v - ((v >>> 1) & 0x55555555);\n  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);\n  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;\n}\n\n//Counts number of trailing zeros\nfunction countTrailingZeros(v) {\n  var c = 32;\n  v &= -v;\n  if (v) c--;\n  if (v & 0x0000FFFF) c -= 16;\n  if (v & 0x00FF00FF) c -= 8;\n  if (v & 0x0F0F0F0F) c -= 4;\n  if (v & 0x33333333) c -= 2;\n  if (v & 0x55555555) c -= 1;\n  return c;\n}\nexports.countTrailingZeros = countTrailingZeros;\n\n//Rounds to next power of 2\nexports.nextPow2 = function(v) {\n  v += v === 0;\n  --v;\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v + 1;\n}\n\n//Rounds down to previous power of 2\nexports.prevPow2 = function(v) {\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v - (v>>>1);\n}\n\n//Computes parity of word\nexports.parity = function(v) {\n  v ^= v >>> 16;\n  v ^= v >>> 8;\n  v ^= v >>> 4;\n  v &= 0xf;\n  return (0x6996 >>> v) & 1;\n}\n\nvar REVERSE_TABLE = new Array(256);\n\n(function(tab) {\n  for(var i=0; i<256; ++i) {\n    var v = i, r = i, s = 7;\n    for (v >>>= 1; v; v >>>= 1) {\n      r <<= 1;\n      r |= v & 1;\n      --s;\n    }\n    tab[i] = (r << s) & 0xff;\n  }\n})(REVERSE_TABLE);\n\n//Reverse bits in a 32 bit word\nexports.reverse = function(v) {\n  return  (REVERSE_TABLE[ v         & 0xff] << 24) |\n          (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |\n          (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |\n           REVERSE_TABLE[(v >>> 24) & 0xff];\n}\n\n//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes\nexports.interleave2 = function(x, y) {\n  x &= 0xFFFF;\n  x = (x | (x << 8)) & 0x00FF00FF;\n  x = (x | (x << 4)) & 0x0F0F0F0F;\n  x = (x | (x << 2)) & 0x33333333;\n  x = (x | (x << 1)) & 0x55555555;\n\n  y &= 0xFFFF;\n  y = (y | (y << 8)) & 0x00FF00FF;\n  y = (y | (y << 4)) & 0x0F0F0F0F;\n  y = (y | (y << 2)) & 0x33333333;\n  y = (y | (y << 1)) & 0x55555555;\n\n  return x | (y << 1);\n}\n\n//Extracts the nth interleaved component\nexports.deinterleave2 = function(v, n) {\n  v = (v >>> n) & 0x55555555;\n  v = (v | (v >>> 1))  & 0x33333333;\n  v = (v | (v >>> 2))  & 0x0F0F0F0F;\n  v = (v | (v >>> 4))  & 0x00FF00FF;\n  v = (v | (v >>> 16)) & 0x000FFFF;\n  return (v << 16) >> 16;\n}\n\n\n//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes\nexports.interleave3 = function(x, y, z) {\n  x &= 0x3FF;\n  x  = (x | (x<<16)) & 4278190335;\n  x  = (x | (x<<8))  & 251719695;\n  x  = (x | (x<<4))  & 3272356035;\n  x  = (x | (x<<2))  & 1227133513;\n\n  y &= 0x3FF;\n  y  = (y | (y<<16)) & 4278190335;\n  y  = (y | (y<<8))  & 251719695;\n  y  = (y | (y<<4))  & 3272356035;\n  y  = (y | (y<<2))  & 1227133513;\n  x |= (y << 1);\n  \n  z &= 0x3FF;\n  z  = (z | (z<<16)) & 4278190335;\n  z  = (z | (z<<8))  & 251719695;\n  z  = (z | (z<<4))  & 3272356035;\n  z  = (z | (z<<2))  & 1227133513;\n  \n  return x | (z << 2);\n}\n\n//Extracts nth interleaved component of a 3-tuple\nexports.deinterleave3 = function(v, n) {\n  v = (v >>> n)       & 1227133513;\n  v = (v | (v>>>2))   & 3272356035;\n  v = (v | (v>>>4))   & 251719695;\n  v = (v | (v>>>8))   & 4278190335;\n  v = (v | (v>>>16))  & 0x3FF;\n  return (v<<22)>>22;\n}\n\n//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)\nexports.nextCombination = function(v) {\n  var t = v | (v - 1);\n  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));\n}\n\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(18)\nvar ieee754 = __webpack_require__(43)\nvar isArray = __webpack_require__(46)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)))\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n\r\nvar createThunk = __webpack_require__(23)\r\n\r\nfunction Procedure() {\r\n  this.argTypes = []\r\n  this.shimArgs = []\r\n  this.arrayArgs = []\r\n  this.arrayBlockIndices = []\r\n  this.scalarArgs = []\r\n  this.offsetArgs = []\r\n  this.offsetArgIndex = []\r\n  this.indexArgs = []\r\n  this.shapeArgs = []\r\n  this.funcName = \"\"\r\n  this.pre = null\r\n  this.body = null\r\n  this.post = null\r\n  this.debug = false\r\n}\r\n\r\nfunction compileCwise(user_args) {\r\n  //Create procedure\r\n  var proc = new Procedure()\r\n  \r\n  //Parse blocks\r\n  proc.pre    = user_args.pre\r\n  proc.body   = user_args.body\r\n  proc.post   = user_args.post\r\n\r\n  //Parse arguments\r\n  var proc_args = user_args.args.slice(0)\r\n  proc.argTypes = proc_args\r\n  for(var i=0; i<proc_args.length; ++i) {\r\n    var arg_type = proc_args[i]\r\n    if(arg_type === \"array\" || (typeof arg_type === \"object\" && arg_type.blockIndices)) {\r\n      proc.argTypes[i] = \"array\"\r\n      proc.arrayArgs.push(i)\r\n      proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0)\r\n      proc.shimArgs.push(\"array\" + i)\r\n      if(i < proc.pre.args.length && proc.pre.args[i].count>0) {\r\n        throw new Error(\"cwise: pre() block may not reference array args\")\r\n      }\r\n      if(i < proc.post.args.length && proc.post.args[i].count>0) {\r\n        throw new Error(\"cwise: post() block may not reference array args\")\r\n      }\r\n    } else if(arg_type === \"scalar\") {\r\n      proc.scalarArgs.push(i)\r\n      proc.shimArgs.push(\"scalar\" + i)\r\n    } else if(arg_type === \"index\") {\r\n      proc.indexArgs.push(i)\r\n      if(i < proc.pre.args.length && proc.pre.args[i].count > 0) {\r\n        throw new Error(\"cwise: pre() block may not reference array index\")\r\n      }\r\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\r\n        throw new Error(\"cwise: body() block may not write to array index\")\r\n      }\r\n      if(i < proc.post.args.length && proc.post.args[i].count > 0) {\r\n        throw new Error(\"cwise: post() block may not reference array index\")\r\n      }\r\n    } else if(arg_type === \"shape\") {\r\n      proc.shapeArgs.push(i)\r\n      if(i < proc.pre.args.length && proc.pre.args[i].lvalue) {\r\n        throw new Error(\"cwise: pre() block may not write to array shape\")\r\n      }\r\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\r\n        throw new Error(\"cwise: body() block may not write to array shape\")\r\n      }\r\n      if(i < proc.post.args.length && proc.post.args[i].lvalue) {\r\n        throw new Error(\"cwise: post() block may not write to array shape\")\r\n      }\r\n    } else if(typeof arg_type === \"object\" && arg_type.offset) {\r\n      proc.argTypes[i] = \"offset\"\r\n      proc.offsetArgs.push({ array: arg_type.array, offset:arg_type.offset })\r\n      proc.offsetArgIndex.push(i)\r\n    } else {\r\n      throw new Error(\"cwise: Unknown argument type \" + proc_args[i])\r\n    }\r\n  }\r\n  \r\n  //Make sure at least one array argument was specified\r\n  if(proc.arrayArgs.length <= 0) {\r\n    throw new Error(\"cwise: No array arguments specified\")\r\n  }\r\n  \r\n  //Make sure arguments are correct\r\n  if(proc.pre.args.length > proc_args.length) {\r\n    throw new Error(\"cwise: Too many arguments in pre() block\")\r\n  }\r\n  if(proc.body.args.length > proc_args.length) {\r\n    throw new Error(\"cwise: Too many arguments in body() block\")\r\n  }\r\n  if(proc.post.args.length > proc_args.length) {\r\n    throw new Error(\"cwise: Too many arguments in post() block\")\r\n  }\r\n\r\n  //Check debug flag\r\n  proc.debug = !!user_args.printCode || !!user_args.debug\r\n  \r\n  //Retrieve name\r\n  proc.funcName = user_args.funcName || \"cwise\"\r\n  \r\n  //Read in block size\r\n  proc.blockSize = user_args.blockSize || 64\r\n\r\n  return createThunk(proc)\r\n}\r\n\r\nmodule.exports = compileCwise\r\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n\r\nvar uniq = __webpack_require__(53)\r\n\r\n// This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)\r\n// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of \"pointers\" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.\r\nfunction innerFill(order, proc, body) {\r\n  var dimension = order.length\r\n    , nargs = proc.arrayArgs.length\r\n    , has_index = proc.indexArgs.length>0\r\n    , code = []\r\n    , vars = []\r\n    , idx=0, pidx=0, i, j\r\n  for(i=0; i<dimension; ++i) { // Iteration variables\r\n    vars.push([\"i\",i,\"=0\"].join(\"\"))\r\n  }\r\n  //Compute scan deltas\r\n  for(j=0; j<nargs; ++j) {\r\n    for(i=0; i<dimension; ++i) {\r\n      pidx = idx\r\n      idx = order[i]\r\n      if(i === 0) { // The innermost/fastest dimension's delta is simply its stride\r\n        vars.push([\"d\",j,\"s\",i,\"=t\",j,\"p\",idx].join(\"\"))\r\n      } else { // For other dimensions the delta is basically the stride minus something which essentially \"rewinds\" the previous (more inner) dimension\r\n        vars.push([\"d\",j,\"s\",i,\"=(t\",j,\"p\",idx,\"-s\",pidx,\"*t\",j,\"p\",pidx,\")\"].join(\"\"))\r\n      }\r\n    }\r\n  }\r\n  code.push(\"var \" + vars.join(\",\"))\r\n  //Scan loop\r\n  for(i=dimension-1; i>=0; --i) { // Start at largest stride and work your way inwards\r\n    idx = order[i]\r\n    code.push([\"for(i\",i,\"=0;i\",i,\"<s\",idx,\";++i\",i,\"){\"].join(\"\"))\r\n  }\r\n  //Push body of inner loop\r\n  code.push(body)\r\n  //Advance scan pointers\r\n  for(i=0; i<dimension; ++i) {\r\n    pidx = idx\r\n    idx = order[i]\r\n    for(j=0; j<nargs; ++j) {\r\n      code.push([\"p\",j,\"+=d\",j,\"s\",i].join(\"\"))\r\n    }\r\n    if(has_index) {\r\n      if(i > 0) {\r\n        code.push([\"index[\",pidx,\"]-=s\",pidx].join(\"\"))\r\n      }\r\n      code.push([\"++index[\",idx,\"]\"].join(\"\"))\r\n    }\r\n    code.push(\"}\")\r\n  }\r\n  return code.join(\"\\n\")\r\n}\r\n\r\n// Generate \"outer\" loops that loop over blocks of data, applying \"inner\" loops to the blocks by manipulating the local variables in such a way that the inner loop only \"sees\" the current block.\r\n// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.\r\n//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and \"shape\" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.\r\nfunction outerFill(matched, order, proc, body) {\r\n  var dimension = order.length\r\n    , nargs = proc.arrayArgs.length\r\n    , blockSize = proc.blockSize\r\n    , has_index = proc.indexArgs.length > 0\r\n    , code = []\r\n  for(var i=0; i<nargs; ++i) {\r\n    code.push([\"var offset\",i,\"=p\",i].join(\"\"))\r\n  }\r\n  //Generate loops for unmatched dimensions\r\n  // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)\r\n  // TODO: It would be nice if the order in which these loops are placed would also be somehow \"optimal\" (at the very least we should check that it really doesn't hurt us if they're not).\r\n  for(var i=matched; i<dimension; ++i) {\r\n    code.push([\"for(var j\"+i+\"=SS[\", order[i], \"]|0;j\", i, \">0;){\"].join(\"\")) // Iterate back to front\r\n    code.push([\"if(j\",i,\"<\",blockSize,\"){\"].join(\"\")) // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).\r\n    code.push([\"s\",order[i],\"=j\",i].join(\"\"))\r\n    code.push([\"j\",i,\"=0\"].join(\"\"))\r\n    code.push([\"}else{s\",order[i],\"=\",blockSize].join(\"\"))\r\n    code.push([\"j\",i,\"-=\",blockSize,\"}\"].join(\"\"))\r\n    if(has_index) {\r\n      code.push([\"index[\",order[i],\"]=j\",i].join(\"\"))\r\n    }\r\n  }\r\n  for(var i=0; i<nargs; ++i) {\r\n    var indexStr = [\"offset\"+i]\r\n    for(var j=matched; j<dimension; ++j) {\r\n      indexStr.push([\"j\",j,\"*t\",i,\"p\",order[j]].join(\"\"))\r\n    }\r\n    code.push([\"p\",i,\"=(\",indexStr.join(\"+\"),\")\"].join(\"\"))\r\n  }\r\n  code.push(innerFill(order, proc, body))\r\n  for(var i=matched; i<dimension; ++i) {\r\n    code.push(\"}\")\r\n  }\r\n  return code.join(\"\\n\")\r\n}\r\n\r\n//Count the number of compatible inner orders\r\n// This is the length of the longest common prefix of the arrays in orders.\r\n// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.\r\n// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.\r\nfunction countMatches(orders) {\r\n  var matched = 0, dimension = orders[0].length\r\n  while(matched < dimension) {\r\n    for(var j=1; j<orders.length; ++j) {\r\n      if(orders[j][matched] !== orders[0][matched]) {\r\n        return matched\r\n      }\r\n    }\r\n    ++matched\r\n  }\r\n  return matched\r\n}\r\n\r\n//Processes a block according to the given data types\r\n// Replaces variable names by different ones, either \"local\" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.\r\nfunction processBlock(block, proc, dtypes) {\r\n  var code = block.body\r\n  var pre = []\r\n  var post = []\r\n  for(var i=0; i<block.args.length; ++i) {\r\n    var carg = block.args[i]\r\n    if(carg.count <= 0) {\r\n      continue\r\n    }\r\n    var re = new RegExp(carg.name, \"g\")\r\n    var ptrStr = \"\"\r\n    var arrNum = proc.arrayArgs.indexOf(i)\r\n    switch(proc.argTypes[i]) {\r\n      case \"offset\":\r\n        var offArgIndex = proc.offsetArgIndex.indexOf(i)\r\n        var offArg = proc.offsetArgs[offArgIndex]\r\n        arrNum = offArg.array\r\n        ptrStr = \"+q\" + offArgIndex // Adds offset to the \"pointer\" in the array\r\n      case \"array\":\r\n        ptrStr = \"p\" + arrNum + ptrStr\r\n        var localStr = \"l\" + i\r\n        var arrStr = \"a\" + arrNum\r\n        if (proc.arrayBlockIndices[arrNum] === 0) { // Argument to body is just a single value from this array\r\n          if(carg.count === 1) { // Argument/array used only once(?)\r\n            if(dtypes[arrNum] === \"generic\") {\r\n              if(carg.lvalue) {\r\n                pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\r\n                code = code.replace(re, localStr)\r\n                post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\r\n              } else {\r\n                code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\r\n              }\r\n            } else {\r\n              code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\r\n            }\r\n          } else if(dtypes[arrNum] === \"generic\") {\r\n            pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\r\n            code = code.replace(re, localStr)\r\n            if(carg.lvalue) {\r\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\r\n            }\r\n          } else {\r\n            pre.push([\"var \", localStr, \"=\", arrStr, \"[\", ptrStr, \"]\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\r\n            code = code.replace(re, localStr)\r\n            if(carg.lvalue) {\r\n              post.push([arrStr, \"[\", ptrStr, \"]=\", localStr].join(\"\"))\r\n            }\r\n          }\r\n        } else { // Argument to body is a \"block\"\r\n          var reStrArr = [carg.name], ptrStrArr = [ptrStr]\r\n          for(var j=0; j<Math.abs(proc.arrayBlockIndices[arrNum]); j++) {\r\n            reStrArr.push(\"\\\\s*\\\\[([^\\\\]]+)\\\\]\")\r\n            ptrStrArr.push(\"$\" + (j+1) + \"*t\" + arrNum + \"b\" + j) // Matched index times stride\r\n          }\r\n          re = new RegExp(reStrArr.join(\"\"), \"g\")\r\n          ptrStr = ptrStrArr.join(\"+\")\r\n          if(dtypes[arrNum] === \"generic\") {\r\n            /*if(carg.lvalue) {\r\n              pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\r\n              code = code.replace(re, localStr)\r\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\r\n            } else {\r\n              code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\r\n            }*/\r\n            throw new Error(\"cwise: Generic arrays not supported in combination with blocks!\")\r\n          } else {\r\n            // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.\r\n            code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\r\n          }\r\n        }\r\n      break\r\n      case \"scalar\":\r\n        code = code.replace(re, \"Y\" + proc.scalarArgs.indexOf(i))\r\n      break\r\n      case \"index\":\r\n        code = code.replace(re, \"index\")\r\n      break\r\n      case \"shape\":\r\n        code = code.replace(re, \"shape\")\r\n      break\r\n    }\r\n  }\r\n  return [pre.join(\"\\n\"), code, post.join(\"\\n\")].join(\"\\n\").trim()\r\n}\r\n\r\nfunction typeSummary(dtypes) {\r\n  var summary = new Array(dtypes.length)\r\n  var allEqual = true\r\n  for(var i=0; i<dtypes.length; ++i) {\r\n    var t = dtypes[i]\r\n    var digits = t.match(/\\d+/)\r\n    if(!digits) {\r\n      digits = \"\"\r\n    } else {\r\n      digits = digits[0]\r\n    }\r\n    if(t.charAt(0) === 0) {\r\n      summary[i] = \"u\" + t.charAt(1) + digits\r\n    } else {\r\n      summary[i] = t.charAt(0) + digits\r\n    }\r\n    if(i > 0) {\r\n      allEqual = allEqual && summary[i] === summary[i-1]\r\n    }\r\n  }\r\n  if(allEqual) {\r\n    return summary[0]\r\n  }\r\n  return summary.join(\"\")\r\n}\r\n\r\n//Generates a cwise operator\r\nfunction generateCWiseOp(proc, typesig) {\r\n\r\n  //Compute dimension\r\n  // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.\r\n  var dimension = (typesig[1].length - Math.abs(proc.arrayBlockIndices[0]))|0\r\n  var orders = new Array(proc.arrayArgs.length)\r\n  var dtypes = new Array(proc.arrayArgs.length)\r\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\r\n    dtypes[i] = typesig[2*i]\r\n    orders[i] = typesig[2*i+1]\r\n  }\r\n  \r\n  //Determine where block and loop indices start and end\r\n  var blockBegin = [], blockEnd = [] // These indices are exposed as blocks\r\n  var loopBegin = [], loopEnd = [] // These indices are iterated over\r\n  var loopOrders = [] // orders restricted to the loop indices\r\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\r\n    if (proc.arrayBlockIndices[i]<0) {\r\n      loopBegin.push(0)\r\n      loopEnd.push(dimension)\r\n      blockBegin.push(dimension)\r\n      blockEnd.push(dimension+proc.arrayBlockIndices[i])\r\n    } else {\r\n      loopBegin.push(proc.arrayBlockIndices[i]) // Non-negative\r\n      loopEnd.push(proc.arrayBlockIndices[i]+dimension)\r\n      blockBegin.push(0)\r\n      blockEnd.push(proc.arrayBlockIndices[i])\r\n    }\r\n    var newOrder = []\r\n    for(var j=0; j<orders[i].length; j++) {\r\n      if (loopBegin[i]<=orders[i][j] && orders[i][j]<loopEnd[i]) {\r\n        newOrder.push(orders[i][j]-loopBegin[i]) // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.\r\n      }\r\n    }\r\n    loopOrders.push(newOrder)\r\n  }\r\n\r\n  //First create arguments for procedure\r\n  var arglist = [\"SS\"] // SS is the overall shape over which we iterate\r\n  var code = [\"'use strict'\"]\r\n  var vars = []\r\n  \r\n  for(var j=0; j<dimension; ++j) {\r\n    vars.push([\"s\", j, \"=SS[\", j, \"]\"].join(\"\")) // The limits for each dimension.\r\n  }\r\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\r\n    arglist.push(\"a\"+i) // Actual data array\r\n    arglist.push(\"t\"+i) // Strides\r\n    arglist.push(\"p\"+i) // Offset in the array at which the data starts (also used for iterating over the data)\r\n    \r\n    for(var j=0; j<dimension; ++j) { // Unpack the strides into vars for looping\r\n      vars.push([\"t\",i,\"p\",j,\"=t\",i,\"[\",loopBegin[i]+j,\"]\"].join(\"\"))\r\n    }\r\n    \r\n    for(var j=0; j<Math.abs(proc.arrayBlockIndices[i]); ++j) { // Unpack the strides into vars for block iteration\r\n      vars.push([\"t\",i,\"b\",j,\"=t\",i,\"[\",blockBegin[i]+j,\"]\"].join(\"\"))\r\n    }\r\n  }\r\n  for(var i=0; i<proc.scalarArgs.length; ++i) {\r\n    arglist.push(\"Y\" + i)\r\n  }\r\n  if(proc.shapeArgs.length > 0) {\r\n    vars.push(\"shape=SS.slice(0)\") // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)\r\n  }\r\n  if(proc.indexArgs.length > 0) {\r\n    // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.\r\n    var zeros = new Array(dimension)\r\n    for(var i=0; i<dimension; ++i) {\r\n      zeros[i] = \"0\"\r\n    }\r\n    vars.push([\"index=[\", zeros.join(\",\"), \"]\"].join(\"\"))\r\n  }\r\n  for(var i=0; i<proc.offsetArgs.length; ++i) { // Offset arguments used for stencil operations\r\n    var off_arg = proc.offsetArgs[i]\r\n    var init_string = []\r\n    for(var j=0; j<off_arg.offset.length; ++j) {\r\n      if(off_arg.offset[j] === 0) {\r\n        continue\r\n      } else if(off_arg.offset[j] === 1) {\r\n        init_string.push([\"t\", off_arg.array, \"p\", j].join(\"\"))      \r\n      } else {\r\n        init_string.push([off_arg.offset[j], \"*t\", off_arg.array, \"p\", j].join(\"\"))\r\n      }\r\n    }\r\n    if(init_string.length === 0) {\r\n      vars.push(\"q\" + i + \"=0\")\r\n    } else {\r\n      vars.push([\"q\", i, \"=\", init_string.join(\"+\")].join(\"\"))\r\n    }\r\n  }\r\n\r\n  //Prepare this variables\r\n  var thisVars = uniq([].concat(proc.pre.thisVars)\r\n                      .concat(proc.body.thisVars)\r\n                      .concat(proc.post.thisVars))\r\n  vars = vars.concat(thisVars)\r\n  code.push(\"var \" + vars.join(\",\"))\r\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\r\n    code.push(\"p\"+i+\"|=0\")\r\n  }\r\n  \r\n  //Inline prelude\r\n  if(proc.pre.body.length > 3) {\r\n    code.push(processBlock(proc.pre, proc, dtypes))\r\n  }\r\n\r\n  //Process body\r\n  var body = processBlock(proc.body, proc, dtypes)\r\n  var matched = countMatches(loopOrders)\r\n  if(matched < dimension) {\r\n    code.push(outerFill(matched, loopOrders[0], proc, body)) // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.\r\n  } else {\r\n    code.push(innerFill(loopOrders[0], proc, body))\r\n  }\r\n\r\n  //Inline epilog\r\n  if(proc.post.body.length > 3) {\r\n    code.push(processBlock(proc.post, proc, dtypes))\r\n  }\r\n  \r\n  if(proc.debug) {\r\n    console.log(\"-----Generated cwise routine for \", typesig, \":\\n\" + code.join(\"\\n\") + \"\\n----------\")\r\n  }\r\n  \r\n  var loopName = [(proc.funcName||\"unnamed\"), \"_cwise_loop_\", orders[0].join(\"s\"),\"m\",matched,typeSummary(dtypes)].join(\"\")\r\n  var f = new Function([\"function \",loopName,\"(\", arglist.join(\",\"),\"){\", code.join(\"\\n\"),\"} return \", loopName].join(\"\"))\r\n  return f()\r\n}\r\nmodule.exports = generateCWiseOp\r\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n\r\n// The function below is called when constructing a cwise function object, and does the following:\r\n// A function object is constructed which accepts as argument a compilation function and returns another function.\r\n// It is this other function that is eventually returned by createThunk, and this function is the one that actually\r\n// checks whether a certain pattern of arguments has already been used before and compiles new loops as needed.\r\n// The compilation passed to the first function object is used for compiling new functions.\r\n// Once this function object is created, it is called with compile as argument, where the first argument of compile\r\n// is bound to \"proc\" (essentially containing a preprocessed version of the user arguments to cwise).\r\n// So createThunk roughly works like this:\r\n// function createThunk(proc) {\r\n//   var thunk = function(compileBound) {\r\n//     var CACHED = {}\r\n//     return function(arrays and scalars) {\r\n//       if (dtype and order of arrays in CACHED) {\r\n//         var func = CACHED[dtype and order of arrays]\r\n//       } else {\r\n//         var func = CACHED[dtype and order of arrays] = compileBound(dtype and order of arrays)\r\n//       }\r\n//       return func(arrays and scalars)\r\n//     }\r\n//   }\r\n//   return thunk(compile.bind1(proc))\r\n// }\r\n\r\nvar compile = __webpack_require__(22)\r\n\r\nfunction createThunk(proc) {\r\n  var code = [\"'use strict'\", \"var CACHED={}\"]\r\n  var vars = []\r\n  var thunkName = proc.funcName + \"_cwise_thunk\"\r\n  \r\n  //Build thunk\r\n  code.push([\"return function \", thunkName, \"(\", proc.shimArgs.join(\",\"), \"){\"].join(\"\"))\r\n  var typesig = []\r\n  var string_typesig = []\r\n  var proc_args = [[\"array\",proc.arrayArgs[0],\".shape.slice(\", // Slice shape so that we only retain the shape over which we iterate (which gets passed to the cwise operator as SS).\r\n                    Math.max(0,proc.arrayBlockIndices[0]),proc.arrayBlockIndices[0]<0?(\",\"+proc.arrayBlockIndices[0]+\")\"):\")\"].join(\"\")]\r\n  var shapeLengthConditions = [], shapeConditions = []\r\n  // Process array arguments\r\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\r\n    var j = proc.arrayArgs[i]\r\n    vars.push([\"t\", j, \"=array\", j, \".dtype,\",\r\n               \"r\", j, \"=array\", j, \".order\"].join(\"\"))\r\n    typesig.push(\"t\" + j)\r\n    typesig.push(\"r\" + j)\r\n    string_typesig.push(\"t\"+j)\r\n    string_typesig.push(\"r\"+j+\".join()\")\r\n    proc_args.push(\"array\" + j + \".data\")\r\n    proc_args.push(\"array\" + j + \".stride\")\r\n    proc_args.push(\"array\" + j + \".offset|0\")\r\n    if (i>0) { // Gather conditions to check for shape equality (ignoring block indices)\r\n      shapeLengthConditions.push(\"array\" + proc.arrayArgs[0] + \".shape.length===array\" + j + \".shape.length+\" + (Math.abs(proc.arrayBlockIndices[0])-Math.abs(proc.arrayBlockIndices[i])))\r\n      shapeConditions.push(\"array\" + proc.arrayArgs[0] + \".shape[shapeIndex+\" + Math.max(0,proc.arrayBlockIndices[0]) + \"]===array\" + j + \".shape[shapeIndex+\" + Math.max(0,proc.arrayBlockIndices[i]) + \"]\")\r\n    }\r\n  }\r\n  // Check for shape equality\r\n  if (proc.arrayArgs.length > 1) {\r\n    code.push(\"if (!(\" + shapeLengthConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same dimensionality!')\")\r\n    code.push(\"for(var shapeIndex=array\" + proc.arrayArgs[0] + \".shape.length-\" + Math.abs(proc.arrayBlockIndices[0]) + \"; shapeIndex-->0;) {\")\r\n    code.push(\"if (!(\" + shapeConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same shape!')\")\r\n    code.push(\"}\")\r\n  }\r\n  // Process scalar arguments\r\n  for(var i=0; i<proc.scalarArgs.length; ++i) {\r\n    proc_args.push(\"scalar\" + proc.scalarArgs[i])\r\n  }\r\n  // Check for cached function (and if not present, generate it)\r\n  vars.push([\"type=[\", string_typesig.join(\",\"), \"].join()\"].join(\"\"))\r\n  vars.push(\"proc=CACHED[type]\")\r\n  code.push(\"var \" + vars.join(\",\"))\r\n  \r\n  code.push([\"if(!proc){\",\r\n             \"CACHED[type]=proc=compile([\", typesig.join(\",\"), \"])}\",\r\n             \"return proc(\", proc_args.join(\",\"), \")}\"].join(\"\"))\r\n\r\n  if(proc.debug) {\r\n    console.log(\"-----Generated thunk:\\n\" + code.join(\"\\n\") + \"\\n----------\")\r\n  }\r\n  \r\n  //Compile thunk\r\n  var thunk = new Function(\"compile\", code.join(\"\\n\"))\r\n  return thunk(compile.bind(undefined, proc))\r\n}\r\n\r\nmodule.exports = createThunk\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction dupe_array(count, value, i) {\n  var c = count[i]|0\n  if(c <= 0) {\n    return []\n  }\n  var result = new Array(c), j\n  if(i === count.length-1) {\n    for(j=0; j<c; ++j) {\n      result[j] = value\n    }\n  } else {\n    for(j=0; j<c; ++j) {\n      result[j] = dupe_array(count, value, i+1)\n    }\n  }\n  return result\n}\n\nfunction dupe_number(count, value) {\n  var result, i\n  result = new Array(count)\n  for(i=0; i<count; ++i) {\n    result[i] = value\n  }\n  return result\n}\n\nfunction dupe(count, value) {\n  if(typeof value === \"undefined\") {\n    value = 0\n  }\n  switch(typeof count) {\n    case \"number\":\n      if(count > 0) {\n        return dupe_number(count|0, value)\n      }\n    break\n    case \"object\":\n      if(typeof (count.length) === \"number\") {\n        return dupe_array(count, value, 0)\n      }\n    break\n  }\n  return []\n}\n\nmodule.exports = dupe\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\nmodule.exports = {\n  0: 'NONE',\n  1: 'ONE',\n  2: 'LINE_LOOP',\n  3: 'LINE_STRIP',\n  4: 'TRIANGLES',\n  5: 'TRIANGLE_STRIP',\n  6: 'TRIANGLE_FAN',\n  256: 'DEPTH_BUFFER_BIT',\n  512: 'NEVER',\n  513: 'LESS',\n  514: 'EQUAL',\n  515: 'LEQUAL',\n  516: 'GREATER',\n  517: 'NOTEQUAL',\n  518: 'GEQUAL',\n  519: 'ALWAYS',\n  768: 'SRC_COLOR',\n  769: 'ONE_MINUS_SRC_COLOR',\n  770: 'SRC_ALPHA',\n  771: 'ONE_MINUS_SRC_ALPHA',\n  772: 'DST_ALPHA',\n  773: 'ONE_MINUS_DST_ALPHA',\n  774: 'DST_COLOR',\n  775: 'ONE_MINUS_DST_COLOR',\n  776: 'SRC_ALPHA_SATURATE',\n  1024: 'STENCIL_BUFFER_BIT',\n  1028: 'FRONT',\n  1029: 'BACK',\n  1032: 'FRONT_AND_BACK',\n  1280: 'INVALID_ENUM',\n  1281: 'INVALID_VALUE',\n  1282: 'INVALID_OPERATION',\n  1285: 'OUT_OF_MEMORY',\n  1286: 'INVALID_FRAMEBUFFER_OPERATION',\n  2304: 'CW',\n  2305: 'CCW',\n  2849: 'LINE_WIDTH',\n  2884: 'CULL_FACE',\n  2885: 'CULL_FACE_MODE',\n  2886: 'FRONT_FACE',\n  2928: 'DEPTH_RANGE',\n  2929: 'DEPTH_TEST',\n  2930: 'DEPTH_WRITEMASK',\n  2931: 'DEPTH_CLEAR_VALUE',\n  2932: 'DEPTH_FUNC',\n  2960: 'STENCIL_TEST',\n  2961: 'STENCIL_CLEAR_VALUE',\n  2962: 'STENCIL_FUNC',\n  2963: 'STENCIL_VALUE_MASK',\n  2964: 'STENCIL_FAIL',\n  2965: 'STENCIL_PASS_DEPTH_FAIL',\n  2966: 'STENCIL_PASS_DEPTH_PASS',\n  2967: 'STENCIL_REF',\n  2968: 'STENCIL_WRITEMASK',\n  2978: 'VIEWPORT',\n  3024: 'DITHER',\n  3042: 'BLEND',\n  3088: 'SCISSOR_BOX',\n  3089: 'SCISSOR_TEST',\n  3106: 'COLOR_CLEAR_VALUE',\n  3107: 'COLOR_WRITEMASK',\n  3317: 'UNPACK_ALIGNMENT',\n  3333: 'PACK_ALIGNMENT',\n  3379: 'MAX_TEXTURE_SIZE',\n  3386: 'MAX_VIEWPORT_DIMS',\n  3408: 'SUBPIXEL_BITS',\n  3410: 'RED_BITS',\n  3411: 'GREEN_BITS',\n  3412: 'BLUE_BITS',\n  3413: 'ALPHA_BITS',\n  3414: 'DEPTH_BITS',\n  3415: 'STENCIL_BITS',\n  3553: 'TEXTURE_2D',\n  4352: 'DONT_CARE',\n  4353: 'FASTEST',\n  4354: 'NICEST',\n  5120: 'BYTE',\n  5121: 'UNSIGNED_BYTE',\n  5122: 'SHORT',\n  5123: 'UNSIGNED_SHORT',\n  5124: 'INT',\n  5125: 'UNSIGNED_INT',\n  5126: 'FLOAT',\n  5386: 'INVERT',\n  5890: 'TEXTURE',\n  6401: 'STENCIL_INDEX',\n  6402: 'DEPTH_COMPONENT',\n  6406: 'ALPHA',\n  6407: 'RGB',\n  6408: 'RGBA',\n  6409: 'LUMINANCE',\n  6410: 'LUMINANCE_ALPHA',\n  7680: 'KEEP',\n  7681: 'REPLACE',\n  7682: 'INCR',\n  7683: 'DECR',\n  7936: 'VENDOR',\n  7937: 'RENDERER',\n  7938: 'VERSION',\n  9728: 'NEAREST',\n  9729: 'LINEAR',\n  9984: 'NEAREST_MIPMAP_NEAREST',\n  9985: 'LINEAR_MIPMAP_NEAREST',\n  9986: 'NEAREST_MIPMAP_LINEAR',\n  9987: 'LINEAR_MIPMAP_LINEAR',\n  10240: 'TEXTURE_MAG_FILTER',\n  10241: 'TEXTURE_MIN_FILTER',\n  10242: 'TEXTURE_WRAP_S',\n  10243: 'TEXTURE_WRAP_T',\n  10497: 'REPEAT',\n  10752: 'POLYGON_OFFSET_UNITS',\n  16384: 'COLOR_BUFFER_BIT',\n  32769: 'CONSTANT_COLOR',\n  32770: 'ONE_MINUS_CONSTANT_COLOR',\n  32771: 'CONSTANT_ALPHA',\n  32772: 'ONE_MINUS_CONSTANT_ALPHA',\n  32773: 'BLEND_COLOR',\n  32774: 'FUNC_ADD',\n  32777: 'BLEND_EQUATION_RGB',\n  32778: 'FUNC_SUBTRACT',\n  32779: 'FUNC_REVERSE_SUBTRACT',\n  32819: 'UNSIGNED_SHORT_4_4_4_4',\n  32820: 'UNSIGNED_SHORT_5_5_5_1',\n  32823: 'POLYGON_OFFSET_FILL',\n  32824: 'POLYGON_OFFSET_FACTOR',\n  32854: 'RGBA4',\n  32855: 'RGB5_A1',\n  32873: 'TEXTURE_BINDING_2D',\n  32926: 'SAMPLE_ALPHA_TO_COVERAGE',\n  32928: 'SAMPLE_COVERAGE',\n  32936: 'SAMPLE_BUFFERS',\n  32937: 'SAMPLES',\n  32938: 'SAMPLE_COVERAGE_VALUE',\n  32939: 'SAMPLE_COVERAGE_INVERT',\n  32968: 'BLEND_DST_RGB',\n  32969: 'BLEND_SRC_RGB',\n  32970: 'BLEND_DST_ALPHA',\n  32971: 'BLEND_SRC_ALPHA',\n  33071: 'CLAMP_TO_EDGE',\n  33170: 'GENERATE_MIPMAP_HINT',\n  33189: 'DEPTH_COMPONENT16',\n  33306: 'DEPTH_STENCIL_ATTACHMENT',\n  33635: 'UNSIGNED_SHORT_5_6_5',\n  33648: 'MIRRORED_REPEAT',\n  33901: 'ALIASED_POINT_SIZE_RANGE',\n  33902: 'ALIASED_LINE_WIDTH_RANGE',\n  33984: 'TEXTURE0',\n  33985: 'TEXTURE1',\n  33986: 'TEXTURE2',\n  33987: 'TEXTURE3',\n  33988: 'TEXTURE4',\n  33989: 'TEXTURE5',\n  33990: 'TEXTURE6',\n  33991: 'TEXTURE7',\n  33992: 'TEXTURE8',\n  33993: 'TEXTURE9',\n  33994: 'TEXTURE10',\n  33995: 'TEXTURE11',\n  33996: 'TEXTURE12',\n  33997: 'TEXTURE13',\n  33998: 'TEXTURE14',\n  33999: 'TEXTURE15',\n  34000: 'TEXTURE16',\n  34001: 'TEXTURE17',\n  34002: 'TEXTURE18',\n  34003: 'TEXTURE19',\n  34004: 'TEXTURE20',\n  34005: 'TEXTURE21',\n  34006: 'TEXTURE22',\n  34007: 'TEXTURE23',\n  34008: 'TEXTURE24',\n  34009: 'TEXTURE25',\n  34010: 'TEXTURE26',\n  34011: 'TEXTURE27',\n  34012: 'TEXTURE28',\n  34013: 'TEXTURE29',\n  34014: 'TEXTURE30',\n  34015: 'TEXTURE31',\n  34016: 'ACTIVE_TEXTURE',\n  34024: 'MAX_RENDERBUFFER_SIZE',\n  34041: 'DEPTH_STENCIL',\n  34055: 'INCR_WRAP',\n  34056: 'DECR_WRAP',\n  34067: 'TEXTURE_CUBE_MAP',\n  34068: 'TEXTURE_BINDING_CUBE_MAP',\n  34069: 'TEXTURE_CUBE_MAP_POSITIVE_X',\n  34070: 'TEXTURE_CUBE_MAP_NEGATIVE_X',\n  34071: 'TEXTURE_CUBE_MAP_POSITIVE_Y',\n  34072: 'TEXTURE_CUBE_MAP_NEGATIVE_Y',\n  34073: 'TEXTURE_CUBE_MAP_POSITIVE_Z',\n  34074: 'TEXTURE_CUBE_MAP_NEGATIVE_Z',\n  34076: 'MAX_CUBE_MAP_TEXTURE_SIZE',\n  34338: 'VERTEX_ATTRIB_ARRAY_ENABLED',\n  34339: 'VERTEX_ATTRIB_ARRAY_SIZE',\n  34340: 'VERTEX_ATTRIB_ARRAY_STRIDE',\n  34341: 'VERTEX_ATTRIB_ARRAY_TYPE',\n  34342: 'CURRENT_VERTEX_ATTRIB',\n  34373: 'VERTEX_ATTRIB_ARRAY_POINTER',\n  34466: 'NUM_COMPRESSED_TEXTURE_FORMATS',\n  34467: 'COMPRESSED_TEXTURE_FORMATS',\n  34660: 'BUFFER_SIZE',\n  34661: 'BUFFER_USAGE',\n  34816: 'STENCIL_BACK_FUNC',\n  34817: 'STENCIL_BACK_FAIL',\n  34818: 'STENCIL_BACK_PASS_DEPTH_FAIL',\n  34819: 'STENCIL_BACK_PASS_DEPTH_PASS',\n  34877: 'BLEND_EQUATION_ALPHA',\n  34921: 'MAX_VERTEX_ATTRIBS',\n  34922: 'VERTEX_ATTRIB_ARRAY_NORMALIZED',\n  34930: 'MAX_TEXTURE_IMAGE_UNITS',\n  34962: 'ARRAY_BUFFER',\n  34963: 'ELEMENT_ARRAY_BUFFER',\n  34964: 'ARRAY_BUFFER_BINDING',\n  34965: 'ELEMENT_ARRAY_BUFFER_BINDING',\n  34975: 'VERTEX_ATTRIB_ARRAY_BUFFER_BINDING',\n  35040: 'STREAM_DRAW',\n  35044: 'STATIC_DRAW',\n  35048: 'DYNAMIC_DRAW',\n  35632: 'FRAGMENT_SHADER',\n  35633: 'VERTEX_SHADER',\n  35660: 'MAX_VERTEX_TEXTURE_IMAGE_UNITS',\n  35661: 'MAX_COMBINED_TEXTURE_IMAGE_UNITS',\n  35663: 'SHADER_TYPE',\n  35664: 'FLOAT_VEC2',\n  35665: 'FLOAT_VEC3',\n  35666: 'FLOAT_VEC4',\n  35667: 'INT_VEC2',\n  35668: 'INT_VEC3',\n  35669: 'INT_VEC4',\n  35670: 'BOOL',\n  35671: 'BOOL_VEC2',\n  35672: 'BOOL_VEC3',\n  35673: 'BOOL_VEC4',\n  35674: 'FLOAT_MAT2',\n  35675: 'FLOAT_MAT3',\n  35676: 'FLOAT_MAT4',\n  35678: 'SAMPLER_2D',\n  35680: 'SAMPLER_CUBE',\n  35712: 'DELETE_STATUS',\n  35713: 'COMPILE_STATUS',\n  35714: 'LINK_STATUS',\n  35715: 'VALIDATE_STATUS',\n  35716: 'INFO_LOG_LENGTH',\n  35717: 'ATTACHED_SHADERS',\n  35718: 'ACTIVE_UNIFORMS',\n  35719: 'ACTIVE_UNIFORM_MAX_LENGTH',\n  35720: 'SHADER_SOURCE_LENGTH',\n  35721: 'ACTIVE_ATTRIBUTES',\n  35722: 'ACTIVE_ATTRIBUTE_MAX_LENGTH',\n  35724: 'SHADING_LANGUAGE_VERSION',\n  35725: 'CURRENT_PROGRAM',\n  36003: 'STENCIL_BACK_REF',\n  36004: 'STENCIL_BACK_VALUE_MASK',\n  36005: 'STENCIL_BACK_WRITEMASK',\n  36006: 'FRAMEBUFFER_BINDING',\n  36007: 'RENDERBUFFER_BINDING',\n  36048: 'FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE',\n  36049: 'FRAMEBUFFER_ATTACHMENT_OBJECT_NAME',\n  36050: 'FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL',\n  36051: 'FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE',\n  36053: 'FRAMEBUFFER_COMPLETE',\n  36054: 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT',\n  36055: 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT',\n  36057: 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS',\n  36061: 'FRAMEBUFFER_UNSUPPORTED',\n  36064: 'COLOR_ATTACHMENT0',\n  36096: 'DEPTH_ATTACHMENT',\n  36128: 'STENCIL_ATTACHMENT',\n  36160: 'FRAMEBUFFER',\n  36161: 'RENDERBUFFER',\n  36162: 'RENDERBUFFER_WIDTH',\n  36163: 'RENDERBUFFER_HEIGHT',\n  36164: 'RENDERBUFFER_INTERNAL_FORMAT',\n  36168: 'STENCIL_INDEX8',\n  36176: 'RENDERBUFFER_RED_SIZE',\n  36177: 'RENDERBUFFER_GREEN_SIZE',\n  36178: 'RENDERBUFFER_BLUE_SIZE',\n  36179: 'RENDERBUFFER_ALPHA_SIZE',\n  36180: 'RENDERBUFFER_DEPTH_SIZE',\n  36181: 'RENDERBUFFER_STENCIL_SIZE',\n  36194: 'RGB565',\n  36336: 'LOW_FLOAT',\n  36337: 'MEDIUM_FLOAT',\n  36338: 'HIGH_FLOAT',\n  36339: 'LOW_INT',\n  36340: 'MEDIUM_INT',\n  36341: 'HIGH_INT',\n  36346: 'SHADER_COMPILER',\n  36347: 'MAX_VERTEX_UNIFORM_VECTORS',\n  36348: 'MAX_VARYING_VECTORS',\n  36349: 'MAX_FRAGMENT_UNIFORM_VECTORS',\n  37440: 'UNPACK_FLIP_Y_WEBGL',\n  37441: 'UNPACK_PREMULTIPLY_ALPHA_WEBGL',\n  37442: 'CONTEXT_LOST_WEBGL',\n  37443: 'UNPACK_COLORSPACE_CONVERSION_WEBGL',\n  37444: 'BROWSER_DEFAULT_WEBGL'\n}\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar gl10 = __webpack_require__(25)\n\nmodule.exports = function lookupConstant (number) {\n  return gl10[number]\n}\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\nvar sprintf = __webpack_require__(51).sprintf;\nvar glConstants = __webpack_require__(26);\nvar shaderName = __webpack_require__(37);\nvar addLineNumbers = __webpack_require__(16);\n\nmodule.exports = formatCompilerError;\n\nfunction formatCompilerError(errLog, src, type) {\n    \"use strict\";\n\n    var name = shaderName(src) || 'of unknown name (see npm glsl-shader-name)';\n\n    var typeName = 'unknown type';\n    if (type !== undefined) {\n        typeName = type === glConstants.FRAGMENT_SHADER ? 'fragment' : 'vertex'\n    }\n\n    var longForm = sprintf('Error compiling %s shader %s:\\n', typeName, name);\n    var shortForm = sprintf(\"%s%s\", longForm, errLog);\n\n    var errorStrings = errLog.split('\\n');\n    var errors = {};\n\n    for (var i = 0; i < errorStrings.length; i++) {\n        var errorString = errorStrings[i];\n        if (errorString === '') continue;\n        var lineNo = parseInt(errorString.split(':')[2]);\n        if (isNaN(lineNo)) {\n            throw new Error(sprintf('Could not parse error: %s', errorString));\n        }\n        errors[lineNo] = errorString;\n    }\n\n    var lines = addLineNumbers(src).split('\\n');\n\n    for (var i = 0; i < lines.length; i++) {\n        if (!errors[i+3] && !errors[i+2] && !errors[i+1]) continue;\n        var line = lines[i];\n        longForm += line + '\\n';\n        if (errors[i+1]) {\n            var e = errors[i+1];\n            e = e.substr(e.split(':', 3).join(':').length + 1).trim();\n            longForm += sprintf('^^^ %s\\n\\n', e);\n        }\n    }\n\n    return {\n        long: longForm.trim(),\n        short: shortForm.trim()\n    };\n}\n\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(0);\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\nvar mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nmat2.fromValues = function(m00, m01, m10, m11) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nmat2.set = function(out, m00, m01, m10, m11) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a1 = a[1];\n        out[1] = a[2];\n        out[2] = a1;\n    } else {\n        out[0] = a[0];\n        out[1] = a[2];\n        out[2] = a[1];\n        out[3] = a[3];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\n        // Calculate the determinant\n        det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    \n    out[0] =  a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] =  a0 * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function(out, a) {\n    // Caching this value is nessecary if out == a\n    var a0 = a[0];\n    out[0] =  a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] =  a0;\n\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n    return a[0] * a[3] - a[2] * a[1];\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.fromRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nmat2.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix \n * @param {mat2} D the diagonal matrix \n * @param {mat2} U the upper triangular matrix \n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) { \n    L[2] = a[2]/a[0]; \n    U[0] = a[0]; \n    U[1] = a[1]; \n    U[3] = a[3] - L[2] * U[1]; \n    return [L, D, U];       \n}; \n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nmat2.sub = mat2.subtract;\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nmat2.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nmat2.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\nmodule.exports = mat2;\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(0);\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n * \n * @description \n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nmat2d.fromValues = function(a, b, c, d, tx, ty) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nmat2d.set = function(out, a, b, c, d, tx, ty) {\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nmat2d.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nmat2d.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2d.str = function (a) {\n    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) { \n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}; \n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nmat2d.sub = mat2d.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nmat2d.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    return out;\n};\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nmat2d.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n};\n\nmodule.exports = mat2d;\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(0);\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\nvar mat4 = {\n  scalar: {},\n  SIMD: {},\n};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nmat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nmat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.transpose = function(out, a) {\n    var a0, a1, a2, a3,\n        tmp01, tmp23,\n        out0, out1, out2, out3;\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    a1 = SIMD.Float32x4.load(a, 4);\n    a2 = SIMD.Float32x4.load(a, 8);\n    a3 = SIMD.Float32x4.load(a, 12);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 0,  out0);\n    SIMD.Float32x4.store(out, 4,  out1);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 8,  out2);\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Transpse a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;\n\n/**\n * Inverts a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Inverts a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.invert = function(out, a) {\n  var row0, row1, row2, row3,\n      tmp1,\n      minor0, minor1, minor2, minor3,\n      det,\n      a0 = SIMD.Float32x4.load(a, 0),\n      a1 = SIMD.Float32x4.load(a, 4),\n      a2 = SIMD.Float32x4.load(a, 8),\n      a3 = SIMD.Float32x4.load(a, 12);\n\n  // Compute matrix adjugate\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  // Compute matrix determinant\n  det   = SIMD.Float32x4.mul(row0, minor0);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);\n  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);\n  det   = SIMD.Float32x4.sub(\n               SIMD.Float32x4.add(tmp1, tmp1),\n               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));\n  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);\n  if (!det) {\n      return null;\n  }\n\n  // Compute matrix inverse\n  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));\n  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));\n  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));\n  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));\n  return out;\n}\n\n/**\n * Inverts a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;\n\n/**\n * Calculates the adjugate of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.adjoint = function(out, a) {\n  var a0, a1, a2, a3;\n  var row0, row1, row2, row3;\n  var tmp1;\n  var minor0, minor1, minor2, minor3;\n\n  var a0 = SIMD.Float32x4.load(a, 0);\n  var a1 = SIMD.Float32x4.load(a, 4);\n  var a2 = SIMD.Float32x4.load(a, 8);\n  var a3 = SIMD.Float32x4.load(a, 12);\n\n  // Transpose the source matrix.  Sort of.  Not a true transpose operation\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  SIMD.Float32x4.store(out, 0,  minor0);\n  SIMD.Float32x4.store(out, 4,  minor1);\n  SIMD.Float32x4.store(out, 8,  minor2);\n  SIMD.Float32x4.store(out, 12, minor3);\n  return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's explicitly using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand, must be a Float32Array\n * @param {mat4} b the second operand, must be a Float32Array\n * @returns {mat4} out\n */\nmat4.SIMD.multiply = function (out, a, b) {\n    var a0 = SIMD.Float32x4.load(a, 0);\n    var a1 = SIMD.Float32x4.load(a, 4);\n    var a2 = SIMD.Float32x4.load(a, 8);\n    var a3 = SIMD.Float32x4.load(a, 12);\n\n    var b0 = SIMD.Float32x4.load(b, 0);\n    var out0 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 0, out0);\n\n    var b1 = SIMD.Float32x4.load(b, 4);\n    var out1 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 4, out1);\n\n    var b2 = SIMD.Float32x4.load(b, 8);\n    var out2 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 8, out2);\n\n    var b3 = SIMD.Float32x4.load(b, 12);\n    var out3 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),\n                        SIMD.Float32x4.add(\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Multiplies two mat4's explicitly not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.scalar.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Multiplies two mat4's using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.scalar.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.SIMD.translate = function (out, a, v) {\n    var a0 = SIMD.Float32x4.load(a, 0),\n        a1 = SIMD.Float32x4.load(a, 4),\n        a2 = SIMD.Float32x4.load(a, 8),\n        a3 = SIMD.Float32x4.load(a, 12),\n        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);\n\n    if (a !== out) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];\n        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];\n    }\n\n    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));\n    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));\n    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));\n\n    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));\n    SIMD.Float32x4.store(out, 12, t0);\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scalar.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.SIMD.scale = function(out, a, v) {\n    var a0, a1, a2;\n    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    SIMD.Float32x4.store(\n        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));\n\n    a1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(\n        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));\n\n    a2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(\n        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));\n\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n */\nmat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateX = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n      out[0]  = a[0];\n      out[1]  = a[1];\n      out[2]  = a[2];\n      out[3]  = a[3];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;\n\n/**\n * Rotates a matrix by the given angle around the Y axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateY = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;\n\n/**\n * Rotates a matrix by the given angle around the Z axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateZ = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = 1;\n    out[1]  = 0;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = 0;\n    out[2]  = -s;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = s;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getTranslation = function (out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n};\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nmat4.getRotation = function (out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) { \n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S; \n    out[2] = (mat[1] - mat[4]) / S; \n  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { \n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S; \n    out[2] = (mat[8] + mat[2]) / S; \n  } else if (mat[5] > mat[10]) { \n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S; \n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S; \n  } else { \n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScale = function (out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n        sx = s[0],\n        sy = s[1],\n        sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2,\n\n      sx = s[0],\n      sy = s[1],\n      sz = s[2],\n\n      ox = o[0],\n      oy = o[1],\n      oz = o[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n  out[15] = 1;\n\n  return out;\n};\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n};\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nmat4.sub = mat4.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nmat4.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n};\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nmat4.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    out[9] = a[9] + (b[9] * scale);\n    out[10] = a[10] + (b[10] * scale);\n    out[11] = a[11] + (b[11] * scale);\n    out[12] = a[12] + (b[12] * scale);\n    out[13] = a[13] + (b[13] * scale);\n    out[14] = a[14] + (b[14] * scale);\n    out[15] = a[15] + (b[15] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && \n           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && \n           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.equals = function (a, b) {\n    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],\n        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], \n        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], \n        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],\n        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], \n        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], \n        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n};\n\n\n\nmodule.exports = mat4;\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(0);\nvar mat3 = __webpack_require__(3);\nvar vec3 = __webpack_require__(4);\nvar vec4 = __webpack_require__(5);\n\n/**\n * @class Quaternion\n * @name quat\n */\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nquat.getAxisAngle = function(out_axis, q) {\n    var rad = Math.acos(q[3]) * 2.0;\n    var s = Math.sin(rad / 2.0);\n    if (s != 0.0) {\n        out_axis[0] = q[0] / s;\n        out_axis[1] = q[1] / s;\n        out_axis[2] = q[2] / s;\n    } else {\n        // If s is zero, return any axis (no rotation - axis does not matter)\n        out_axis[0] = 1;\n        out_axis[1] = 0;\n        out_axis[2] = 0;\n    }\n    return rad;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nquat.sqlerp = (function () {\n  var temp1 = quat.create();\n  var temp2 = quat.create();\n  \n  return function (out, a, b, c, d, t) {\n    quat.slerp(temp1, a, d, t);\n    quat.slerp(temp2, b, c, t);\n    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n    \n    return out;\n  };\n}());\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.equals = vec4.equals;\n\nmodule.exports = quat;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(0);\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nvec2.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nvec2.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nvec2.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1];\n    var b0 = b[0], b1 = b[1];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n};\n\nmodule.exports = vec2;\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = createAttributeWrapper\n\nvar GLError = __webpack_require__(1)\n\nfunction ShaderAttribute(\n    gl\n  , wrapper\n  , index\n  , locations\n  , dimension\n  , constFunc) {\n  this._gl        = gl\n  this._wrapper   = wrapper\n  this._index     = index\n  this._locations = locations\n  this._dimension = dimension\n  this._constFunc = constFunc\n}\n\nvar proto = ShaderAttribute.prototype\n\nproto.pointer = function setAttribPointer(\n    type\n  , normalized\n  , stride\n  , offset) {\n\n  var self      = this\n  var gl        = self._gl\n  var location  = self._locations[self._index]\n\n  gl.vertexAttribPointer(\n      location\n    , self._dimension\n    , type || gl.FLOAT\n    , !!normalized\n    , stride || 0\n    , offset || 0)\n  gl.enableVertexAttribArray(location)\n}\n\nproto.set = function(x0, x1, x2, x3) {\n  return this._constFunc(this._locations[this._index], x0, x1, x2, x3)\n}\n\nObject.defineProperty(proto, 'location', {\n  get: function() {\n    return this._locations[this._index]\n  }\n  , set: function(v) {\n    if(v !== this._locations[this._index]) {\n      this._locations[this._index] = v|0\n      this._wrapper.program = null\n    }\n    return v|0\n  }\n})\n\n//Adds a vector attribute to obj\nfunction addVectorAttribute(\n    gl\n  , wrapper\n  , index\n  , locations\n  , dimension\n  , obj\n  , name) {\n\n  //Construct constant function\n  var constFuncArgs = [ 'gl', 'v' ]\n  var varNames = []\n  for(var i=0; i<dimension; ++i) {\n    constFuncArgs.push('x'+i)\n    varNames.push('x'+i)\n  }\n  constFuncArgs.push(\n    'if(x0.length===void 0){return gl.vertexAttrib' +\n    dimension + 'f(v,' +\n    varNames.join() +\n    ')}else{return gl.vertexAttrib' +\n    dimension +\n    'fv(v,x0)}')\n  var constFunc = Function.apply(null, constFuncArgs)\n\n  //Create attribute wrapper\n  var attr = new ShaderAttribute(\n      gl\n    , wrapper\n    , index\n    , locations\n    , dimension\n    , constFunc)\n\n  //Create accessor\n  Object.defineProperty(obj, name, {\n    set: function(x) {\n      gl.disableVertexAttribArray(locations[index])\n      constFunc(gl, locations[index], x)\n      return x\n    }\n    , get: function() {\n      return attr\n    }\n    , enumerable: true\n  })\n}\n\nfunction addMatrixAttribute(\n    gl\n  , wrapper\n  , index\n  , locations\n  , dimension\n  , obj\n  , name) {\n\n  var parts = new Array(dimension)\n  var attrs = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    addVectorAttribute(\n        gl\n      , wrapper\n      , index[i]\n      , locations\n      , dimension\n      , parts\n      , i)\n    attrs[i] = parts[i]\n  }\n\n  Object.defineProperty(parts, 'location', {\n    set: function(v) {\n      if(Array.isArray(v)) {\n        for(var i=0; i<dimension; ++i) {\n          attrs[i].location = v[i]\n        }\n      } else {\n        for(var i=0; i<dimension; ++i) {\n          attrs[i].location = v + i\n        }\n      }\n      return v\n    }\n    , get: function() {\n      var result = new Array(dimension)\n      for(var i=0; i<dimension; ++i) {\n        result[i] = locations[index[i]]\n      }\n      return result\n    }\n    , enumerable: true\n  })\n\n  parts.pointer = function(type, normalized, stride, offset) {\n    type       = type || gl.FLOAT\n    normalized = !!normalized\n    stride     = stride || (dimension * dimension)\n    offset     = offset || 0\n    for(var i=0; i<dimension; ++i) {\n      var location = locations[index[i]]\n      gl.vertexAttribPointer(\n            location\n          , dimension\n          , type\n          , normalized\n          , stride\n          , offset + i * dimension)\n      gl.enableVertexAttribArray(location)\n    }\n  }\n\n  var scratch = new Array(dimension)\n  var vertexAttrib = gl['vertexAttrib' + dimension + 'fv']\n\n  Object.defineProperty(obj, name, {\n    set: function(x) {\n      for(var i=0; i<dimension; ++i) {\n        var loc = locations[index[i]]\n        gl.disableVertexAttribArray(loc)\n        if(Array.isArray(x[0])) {\n          vertexAttrib.call(gl, loc, x[i])\n        } else {\n          for(var j=0; j<dimension; ++j) {\n            scratch[j] = x[dimension*i + j]\n          }\n          vertexAttrib.call(gl, loc, scratch)\n        }\n      }\n      return x\n    }\n    , get: function() {\n      return parts\n    }\n    , enumerable: true\n  })\n}\n\n//Create shims for attributes\nfunction createAttributeWrapper(\n    gl\n  , wrapper\n  , attributes\n  , locations) {\n\n  var obj = {}\n  for(var i=0, n=attributes.length; i<n; ++i) {\n\n    var a = attributes[i]\n    var name = a.name\n    var type = a.type\n    var locs = a.locations\n\n    switch(type) {\n      case 'bool':\n      case 'int':\n      case 'float':\n        addVectorAttribute(\n            gl\n          , wrapper\n          , locs[0]\n          , locations\n          , 1\n          , obj\n          , name)\n      break\n\n      default:\n        if(type.indexOf('vec') >= 0) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type for attribute ' + name + ': ' + type)\n          }\n          addVectorAttribute(\n              gl\n            , wrapper\n            , locs[0]\n            , locations\n            , d\n            , obj\n            , name)\n        } else if(type.indexOf('mat') >= 0) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type for attribute ' + name + ': ' + type)\n          }\n          addMatrixAttribute(\n              gl\n            , wrapper\n            , locs\n            , locations\n            , d\n            , obj\n            , name)\n        } else {\n          throw new GLError('', 'Unknown data type for attribute ' + name + ': ' + type)\n        }\n      break\n    }\n  }\n  return obj\n}\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar coallesceUniforms = __webpack_require__(6)\nvar GLError = __webpack_require__(1)\n\nmodule.exports = createUniformWrapper\n\n//Binds a function and returns a value\nfunction identity(x) {\n  var c = new Function('y', 'return function(){return y}')\n  return c(x)\n}\n\nfunction makeVector(length, fill) {\n  var result = new Array(length)\n  for(var i=0; i<length; ++i) {\n    result[i] = fill\n  }\n  return result\n}\n\n//Create shims for uniforms\nfunction createUniformWrapper(gl, wrapper, uniforms, locations) {\n\n  function makeGetter(index) {\n    var proc = new Function(\n        'gl'\n      , 'wrapper'\n      , 'locations'\n      , 'return function(){return gl.getUniform(wrapper.program,locations[' + index + '])}')\n    return proc(gl, wrapper, locations)\n  }\n\n  function makePropSetter(path, index, type) {\n    switch(type) {\n      case 'bool':\n      case 'int':\n      case 'sampler2D':\n      case 'samplerCube':\n        return 'gl.uniform1i(locations[' + index + '],obj' + path + ')'\n      case 'float':\n        return 'gl.uniform1f(locations[' + index + '],obj' + path + ')'\n      default:\n        var vidx = type.indexOf('vec')\n        if(0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type')\n          }\n          switch(type.charAt(0)) {\n            case 'b':\n            case 'i':\n              return 'gl.uniform' + d + 'iv(locations[' + index + '],obj' + path + ')'\n            case 'v':\n              return 'gl.uniform' + d + 'fv(locations[' + index + '],obj' + path + ')'\n            default:\n              throw new GLError('', 'Unrecognized data type for vector ' + name + ': ' + type)\n          }\n        } else if(type.indexOf('mat') === 0 && type.length === 4) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid uniform dimension type for matrix ' + name + ': ' + type)\n          }\n          return 'gl.uniformMatrix' + d + 'fv(locations[' + index + '],false,obj' + path + ')'\n        } else {\n          throw new GLError('', 'Unknown uniform data type for ' + name + ': ' + type)\n        }\n      break\n    }\n  }\n\n  function enumerateIndices(prefix, type) {\n    if(typeof type !== 'object') {\n      return [ [prefix, type] ]\n    }\n    var indices = []\n    for(var id in type) {\n      var prop = type[id]\n      var tprefix = prefix\n      if(parseInt(id) + '' === id) {\n        tprefix += '[' + id + ']'\n      } else {\n        tprefix += '.' + id\n      }\n      if(typeof prop === 'object') {\n        indices.push.apply(indices, enumerateIndices(tprefix, prop))\n      } else {\n        indices.push([tprefix, prop])\n      }\n    }\n    return indices\n  }\n\n  function makeSetter(type) {\n    var code = [ 'return function updateProperty(obj){' ]\n    var indices = enumerateIndices('', type)\n    for(var i=0; i<indices.length; ++i) {\n      var item = indices[i]\n      var path = item[0]\n      var idx  = item[1]\n      if(locations[idx]) {\n        code.push(makePropSetter(path, idx, uniforms[idx].type))\n      }\n    }\n    code.push('return obj}')\n    var proc = new Function('gl', 'locations', code.join('\\n'))\n    return proc(gl, locations)\n  }\n\n  function defaultValue(type) {\n    switch(type) {\n      case 'bool':\n        return false\n      case 'int':\n      case 'sampler2D':\n      case 'samplerCube':\n        return 0\n      case 'float':\n        return 0.0\n      default:\n        var vidx = type.indexOf('vec')\n        if(0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type')\n          }\n          if(type.charAt(0) === 'b') {\n            return makeVector(d, false)\n          }\n          return makeVector(d, 0)\n        } else if(type.indexOf('mat') === 0 && type.length === 4) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid uniform dimension type for matrix ' + name + ': ' + type)\n          }\n          return makeVector(d*d, 0)\n        } else {\n          throw new GLError('', 'Unknown uniform data type for ' + name + ': ' + type)\n        }\n      break\n    }\n  }\n\n  function storeProperty(obj, prop, type) {\n    if(typeof type === 'object') {\n      var child = processObject(type)\n      Object.defineProperty(obj, prop, {\n        get: identity(child),\n        set: makeSetter(type),\n        enumerable: true,\n        configurable: false\n      })\n    } else {\n      if(locations[type]) {\n        Object.defineProperty(obj, prop, {\n          get: makeGetter(type),\n          set: makeSetter(type),\n          enumerable: true,\n          configurable: false\n        })\n      } else {\n        obj[prop] = defaultValue(uniforms[type].type)\n      }\n    }\n  }\n\n  function processObject(obj) {\n    var result\n    if(Array.isArray(obj)) {\n      result = new Array(obj.length)\n      for(var i=0; i<obj.length; ++i) {\n        storeProperty(result, i, obj[i])\n      }\n    } else {\n      result = {}\n      for(var id in obj) {\n        storeProperty(result, id, obj[id])\n      }\n    }\n    return result\n  }\n\n  //Return data\n  var coallesced = coallesceUniforms(uniforms, true)\n  return {\n    get: identity(processObject(coallesced)),\n    set: makeSetter(coallesced),\n    enumerable: true,\n    configurable: true\n  }\n}\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.uniforms    = runtimeUniforms\nexports.attributes  = runtimeAttributes\n\nvar GL_TO_GLSL_TYPES = {\n  'FLOAT':       'float',\n  'FLOAT_VEC2':  'vec2',\n  'FLOAT_VEC3':  'vec3',\n  'FLOAT_VEC4':  'vec4',\n  'INT':         'int',\n  'INT_VEC2':    'ivec2',\n  'INT_VEC3':    'ivec3',\n  'INT_VEC4':    'ivec4',\n  'BOOL':        'bool',\n  'BOOL_VEC2':   'bvec2',\n  'BOOL_VEC3':   'bvec3',\n  'BOOL_VEC4':   'bvec4',\n  'FLOAT_MAT2':  'mat2',\n  'FLOAT_MAT3':  'mat3',\n  'FLOAT_MAT4':  'mat4',\n  'SAMPLER_2D':  'sampler2D',\n  'SAMPLER_CUBE':'samplerCube'\n}\n\nvar GL_TABLE = null\n\nfunction getType(gl, type) {\n  if(!GL_TABLE) {\n    var typeNames = Object.keys(GL_TO_GLSL_TYPES)\n    GL_TABLE = {}\n    for(var i=0; i<typeNames.length; ++i) {\n      var tn = typeNames[i]\n      GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn]\n    }\n  }\n  return GL_TABLE[type]\n}\n\nfunction runtimeUniforms(gl, program) {\n  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS)\n  var result = []\n  for(var i=0; i<numUniforms; ++i) {\n    var info = gl.getActiveUniform(program, i)\n    if(info) {\n      var type = getType(gl, info.type)\n      if(info.size > 1) {\n        for(var j=0; j<info.size; ++j) {\n          result.push({\n            name: info.name.replace('[0]', '[' + j + ']'),\n            type: type\n          })\n        }\n      } else {\n        result.push({\n          name: info.name,\n          type: type\n        })\n      }\n    }\n  }\n  return result\n}\n\nfunction runtimeAttributes(gl, program) {\n  var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES)\n  var result = []\n  for(var i=0; i<numAttributes; ++i) {\n    var info = gl.getActiveAttrib(program, i)\n    if(info) {\n      result.push({\n        name: info.name,\n        type: getType(gl, info.type)\n      })\n    }\n  }\n  return result\n}\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.shader   = getShaderReference\nexports.program  = createProgram\n\nvar GLError = __webpack_require__(1)\nvar formatCompilerError = __webpack_require__(27);\n\nvar weakMap = typeof WeakMap === 'undefined' ? __webpack_require__(56) : WeakMap\nvar CACHE = new weakMap()\n\nvar SHADER_COUNTER = 0\n\nfunction ShaderReference(id, src, type, shader, programs, count, cache) {\n  this.id       = id\n  this.src      = src\n  this.type     = type\n  this.shader   = shader\n  this.count    = count\n  this.programs = []\n  this.cache    = cache\n}\n\nShaderReference.prototype.dispose = function() {\n  if(--this.count === 0) {\n    var cache    = this.cache\n    var gl       = cache.gl\n\n    //Remove program references\n    var programs = this.programs\n    for(var i=0, n=programs.length; i<n; ++i) {\n      var p = cache.programs[programs[i]]\n      if(p) {\n        delete cache.programs[i]\n        gl.deleteProgram(p)\n      }\n    }\n\n    //Remove shader reference\n    gl.deleteShader(this.shader)\n    delete cache.shaders[(this.type === gl.FRAGMENT_SHADER)|0][this.src]\n  }\n}\n\nfunction ContextCache(gl) {\n  this.gl       = gl\n  this.shaders  = [{}, {}]\n  this.programs = {}\n}\n\nvar proto = ContextCache.prototype\n\nfunction compileShader(gl, type, src) {\n  var shader = gl.createShader(type)\n  gl.shaderSource(shader, src)\n  gl.compileShader(shader)\n  if(!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    var errLog = gl.getShaderInfoLog(shader)\n    try {\n        var fmt = formatCompilerError(errLog, src, type);\n    } catch (e){\n        console.warn('Failed to format compiler error: ' + e);\n        throw new GLError(errLog, 'Error compiling shader:\\n' + errLog)\n    }\n    throw new GLError(errLog, fmt.short, fmt.long)\n  }\n  return shader\n}\n\nproto.getShaderReference = function(type, src) {\n  var gl      = this.gl\n  var shaders = this.shaders[(type === gl.FRAGMENT_SHADER)|0]\n  var shader  = shaders[src]\n  if(!shader || !gl.isShader(shader.shader)) {\n    var shaderObj = compileShader(gl, type, src)\n    shader = shaders[src] = new ShaderReference(\n      SHADER_COUNTER++,\n      src,\n      type,\n      shaderObj,\n      [],\n      1,\n      this)\n  } else {\n    shader.count += 1\n  }\n  return shader\n}\n\nfunction linkProgram(gl, vshader, fshader, attribs, locations) {\n  var program = gl.createProgram()\n  gl.attachShader(program, vshader)\n  gl.attachShader(program, fshader)\n  for(var i=0; i<attribs.length; ++i) {\n    gl.bindAttribLocation(program, locations[i], attribs[i])\n  }\n  gl.linkProgram(program)\n  if(!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    var errLog = gl.getProgramInfoLog(program)\n    throw new GLError(errLog, 'Error linking program: ' + errLog)\n  }\n  return program\n}\n\nproto.getProgram = function(vref, fref, attribs, locations) {\n  var token = [vref.id, fref.id, attribs.join(':'), locations.join(':')].join('@')\n  var prog  = this.programs[token]\n  if(!prog || !this.gl.isProgram(prog)) {\n    this.programs[token] = prog = linkProgram(\n      this.gl,\n      vref.shader,\n      fref.shader,\n      attribs,\n      locations)\n    vref.programs.push(token)\n    fref.programs.push(token)\n  }\n  return prog\n}\n\nfunction getCache(gl) {\n  var ctxCache = CACHE.get(gl)\n  if(!ctxCache) {\n    ctxCache = new ContextCache(gl)\n    CACHE.set(gl, ctxCache)\n  }\n  return ctxCache\n}\n\nfunction getShaderReference(gl, type, src) {\n  return getCache(gl).getShaderReference(type, src)\n}\n\nfunction createProgram(gl, vref, fref, attribs, locations) {\n  return getCache(gl).getProgram(vref, fref, attribs, locations)\n}\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar tokenize = __webpack_require__(42)\nvar atob     = __webpack_require__(17)\n\nmodule.exports = getName\n\nfunction getName(src) {\n  var tokens = Array.isArray(src)\n    ? src\n    : tokenize(src)\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n    if (token.type !== 'preprocessor') continue\n    var match = token.data.match(/\\#define\\s+SHADER_NAME(_B64)?\\s+(.+)$/)\n    if (!match) continue\n    if (!match[2]) continue\n\n    var b64  = match[1]\n    var name = match[2]\n\n    return (b64 ? atob(name) : name).trim()\n  }\n}\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = tokenize\n\nvar literals100 = __webpack_require__(8)\n  , operators = __webpack_require__(41)\n  , builtins100 = __webpack_require__(7)\n  , literals300es = __webpack_require__(40)\n  , builtins300es = __webpack_require__(39)\n\nvar NORMAL = 999          // <-- never emitted\n  , TOKEN = 9999          // <-- never emitted\n  , BLOCK_COMMENT = 0\n  , LINE_COMMENT = 1\n  , PREPROCESSOR = 2\n  , OPERATOR = 3\n  , INTEGER = 4\n  , FLOAT = 5\n  , IDENT = 6\n  , BUILTIN = 7\n  , KEYWORD = 8\n  , WHITESPACE = 9\n  , EOF = 10\n  , HEX = 11\n\nvar map = [\n    'block-comment'\n  , 'line-comment'\n  , 'preprocessor'\n  , 'operator'\n  , 'integer'\n  , 'float'\n  , 'ident'\n  , 'builtin'\n  , 'keyword'\n  , 'whitespace'\n  , 'eof'\n  , 'integer'\n]\n\nfunction tokenize(opt) {\n  var i = 0\n    , total = 0\n    , mode = NORMAL\n    , c\n    , last\n    , content = []\n    , tokens = []\n    , token_idx = 0\n    , token_offs = 0\n    , line = 1\n    , col = 0\n    , start = 0\n    , isnum = false\n    , isoperator = false\n    , input = ''\n    , len\n\n  opt = opt || {}\n  var allBuiltins = builtins100\n  var allLiterals = literals100\n  if (opt.version === '300 es') {\n    allBuiltins = builtins300es\n    allLiterals = literals300es\n  }\n\n  return function(data) {\n    tokens = []\n    if (data !== null) return write(data.replace ? data.replace(/\\r\\n/g, '\\n') : data)\n    return end()\n  }\n\n  function token(data) {\n    if (data.length) {\n      tokens.push({\n        type: map[mode]\n      , data: data\n      , position: start\n      , line: line\n      , column: col\n      })\n    }\n  }\n\n  function write(chunk) {\n    i = 0\n    input += chunk\n    len = input.length\n\n    var last\n\n    while(c = input[i], i < len) {\n      last = i\n\n      switch(mode) {\n        case BLOCK_COMMENT: i = block_comment(); break\n        case LINE_COMMENT: i = line_comment(); break\n        case PREPROCESSOR: i = preprocessor(); break\n        case OPERATOR: i = operator(); break\n        case INTEGER: i = integer(); break\n        case HEX: i = hex(); break\n        case FLOAT: i = decimal(); break\n        case TOKEN: i = readtoken(); break\n        case WHITESPACE: i = whitespace(); break\n        case NORMAL: i = normal(); break\n      }\n\n      if(last !== i) {\n        switch(input[last]) {\n          case '\\n': col = 0; ++line; break\n          default: ++col; break\n        }\n      }\n    }\n\n    total += i\n    input = input.slice(i)\n    return tokens\n  }\n\n  function end(chunk) {\n    if(content.length) {\n      token(content.join(''))\n    }\n\n    mode = EOF\n    token('(eof)')\n    return tokens\n  }\n\n  function normal() {\n    content = content.length ? [] : content\n\n    if(last === '/' && c === '*') {\n      start = total + i - 1\n      mode = BLOCK_COMMENT\n      last = c\n      return i + 1\n    }\n\n    if(last === '/' && c === '/') {\n      start = total + i - 1\n      mode = LINE_COMMENT\n      last = c\n      return i + 1\n    }\n\n    if(c === '#') {\n      mode = PREPROCESSOR\n      start = total + i\n      return i\n    }\n\n    if(/\\s/.test(c)) {\n      mode = WHITESPACE\n      start = total + i\n      return i\n    }\n\n    isnum = /\\d/.test(c)\n    isoperator = /[^\\w_]/.test(c)\n\n    start = total + i\n    mode = isnum ? INTEGER : isoperator ? OPERATOR : TOKEN\n    return i\n  }\n\n  function whitespace() {\n    if(/[^\\s]/g.test(c)) {\n      token(content.join(''))\n      mode = NORMAL\n      return i\n    }\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function preprocessor() {\n    if((c === '\\r' || c === '\\n') && last !== '\\\\') {\n      token(content.join(''))\n      mode = NORMAL\n      return i\n    }\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function line_comment() {\n    return preprocessor()\n  }\n\n  function block_comment() {\n    if(c === '/' && last === '*') {\n      content.push(c)\n      token(content.join(''))\n      mode = NORMAL\n      return i + 1\n    }\n\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function operator() {\n    if(last === '.' && /\\d/.test(c)) {\n      mode = FLOAT\n      return i\n    }\n\n    if(last === '/' && c === '*') {\n      mode = BLOCK_COMMENT\n      return i\n    }\n\n    if(last === '/' && c === '/') {\n      mode = LINE_COMMENT\n      return i\n    }\n\n    if(c === '.' && content.length) {\n      while(determine_operator(content));\n\n      mode = FLOAT\n      return i\n    }\n\n    if(c === ';' || c === ')' || c === '(') {\n      if(content.length) while(determine_operator(content));\n      token(c)\n      mode = NORMAL\n      return i + 1\n    }\n\n    var is_composite_operator = content.length === 2 && c !== '='\n    if(/[\\w_\\d\\s]/.test(c) || is_composite_operator) {\n      while(determine_operator(content));\n      mode = NORMAL\n      return i\n    }\n\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function determine_operator(buf) {\n    var j = 0\n      , idx\n      , res\n\n    do {\n      idx = operators.indexOf(buf.slice(0, buf.length + j).join(''))\n      res = operators[idx]\n\n      if(idx === -1) {\n        if(j-- + buf.length > 0) continue\n        res = buf.slice(0, 1).join('')\n      }\n\n      token(res)\n\n      start += res.length\n      content = content.slice(res.length)\n      return content.length\n    } while(1)\n  }\n\n  function hex() {\n    if(/[^a-fA-F0-9]/.test(c)) {\n      token(content.join(''))\n      mode = NORMAL\n      return i\n    }\n\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function integer() {\n    if(c === '.') {\n      content.push(c)\n      mode = FLOAT\n      last = c\n      return i + 1\n    }\n\n    if(/[eE]/.test(c)) {\n      content.push(c)\n      mode = FLOAT\n      last = c\n      return i + 1\n    }\n\n    if(c === 'x' && content.length === 1 && content[0] === '0') {\n      mode = HEX\n      content.push(c)\n      last = c\n      return i + 1\n    }\n\n    if(/[^\\d]/.test(c)) {\n      token(content.join(''))\n      mode = NORMAL\n      return i\n    }\n\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function decimal() {\n    if(c === 'f') {\n      content.push(c)\n      last = c\n      i += 1\n    }\n\n    if(/[eE]/.test(c)) {\n      content.push(c)\n      last = c\n      return i + 1\n    }\n\n    if (c === '-' && /[eE]/.test(last)) {\n      content.push(c)\n      last = c\n      return i + 1\n    }\n\n    if(/[^\\d]/.test(c)) {\n      token(content.join(''))\n      mode = NORMAL\n      return i\n    }\n\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function readtoken() {\n    if(/[^\\d\\w_]/.test(c)) {\n      var contentstr = content.join('')\n      if(allLiterals.indexOf(contentstr) > -1) {\n        mode = KEYWORD\n      } else if(allBuiltins.indexOf(contentstr) > -1) {\n        mode = BUILTIN\n      } else {\n        mode = IDENT\n      }\n      token(content.join(''))\n      mode = NORMAL\n      return i\n    }\n    content.push(c)\n    last = c\n    return i + 1\n  }\n}\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n// 300es builtins/reserved words that were previously valid in v100\nvar v100 = __webpack_require__(7)\n\n// The texture2D|Cube functions have been removed\n// And the gl_ features are updated\nv100 = v100.slice().filter(function (b) {\n  return !/^(gl\\_|texture)/.test(b)\n})\n\nmodule.exports = v100.concat([\n  // the updated gl_ constants\n    'gl_VertexID'\n  , 'gl_InstanceID'\n  , 'gl_Position'\n  , 'gl_PointSize'\n  , 'gl_FragCoord'\n  , 'gl_FrontFacing'\n  , 'gl_FragDepth'\n  , 'gl_PointCoord'\n  , 'gl_MaxVertexAttribs'\n  , 'gl_MaxVertexUniformVectors'\n  , 'gl_MaxVertexOutputVectors'\n  , 'gl_MaxFragmentInputVectors'\n  , 'gl_MaxVertexTextureImageUnits'\n  , 'gl_MaxCombinedTextureImageUnits'\n  , 'gl_MaxTextureImageUnits'\n  , 'gl_MaxFragmentUniformVectors'\n  , 'gl_MaxDrawBuffers'\n  , 'gl_MinProgramTexelOffset'\n  , 'gl_MaxProgramTexelOffset'\n  , 'gl_DepthRangeParameters'\n  , 'gl_DepthRange'\n\n  // other builtins\n  , 'trunc'\n  , 'round'\n  , 'roundEven'\n  , 'isnan'\n  , 'isinf'\n  , 'floatBitsToInt'\n  , 'floatBitsToUint'\n  , 'intBitsToFloat'\n  , 'uintBitsToFloat'\n  , 'packSnorm2x16'\n  , 'unpackSnorm2x16'\n  , 'packUnorm2x16'\n  , 'unpackUnorm2x16'\n  , 'packHalf2x16'\n  , 'unpackHalf2x16'\n  , 'outerProduct'\n  , 'transpose'\n  , 'determinant'\n  , 'inverse'\n  , 'texture'\n  , 'textureSize'\n  , 'textureProj'\n  , 'textureLod'\n  , 'textureOffset'\n  , 'texelFetch'\n  , 'texelFetchOffset'\n  , 'textureProjOffset'\n  , 'textureLodOffset'\n  , 'textureProjLod'\n  , 'textureProjLodOffset'\n  , 'textureGrad'\n  , 'textureGradOffset'\n  , 'textureProjGrad'\n  , 'textureProjGradOffset'\n])\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar v100 = __webpack_require__(8)\n\nmodule.exports = v100.slice().concat([\n   'layout'\n  , 'centroid'\n  , 'smooth'\n  , 'case'\n  , 'mat2x2'\n  , 'mat2x3'\n  , 'mat2x4'\n  , 'mat3x2'\n  , 'mat3x3'\n  , 'mat3x4'\n  , 'mat4x2'\n  , 'mat4x3'\n  , 'mat4x4'\n  , 'uint'\n  , 'uvec2'\n  , 'uvec3'\n  , 'uvec4'\n  , 'samplerCubeShadow'\n  , 'sampler2DArray'\n  , 'sampler2DArrayShadow'\n  , 'isampler2D'\n  , 'isampler3D'\n  , 'isamplerCube'\n  , 'isampler2DArray'\n  , 'usampler2D'\n  , 'usampler3D'\n  , 'usamplerCube'\n  , 'usampler2DArray'\n  , 'coherent'\n  , 'restrict'\n  , 'readonly'\n  , 'writeonly'\n  , 'resource'\n  , 'atomic_uint'\n  , 'noperspective'\n  , 'patch'\n  , 'sample'\n  , 'subroutine'\n  , 'common'\n  , 'partition'\n  , 'active'\n  , 'filter'\n  , 'image1D'\n  , 'image2D'\n  , 'image3D'\n  , 'imageCube'\n  , 'iimage1D'\n  , 'iimage2D'\n  , 'iimage3D'\n  , 'iimageCube'\n  , 'uimage1D'\n  , 'uimage2D'\n  , 'uimage3D'\n  , 'uimageCube'\n  , 'image1DArray'\n  , 'image2DArray'\n  , 'iimage1DArray'\n  , 'iimage2DArray'\n  , 'uimage1DArray'\n  , 'uimage2DArray'\n  , 'image1DShadow'\n  , 'image2DShadow'\n  , 'image1DArrayShadow'\n  , 'image2DArrayShadow'\n  , 'imageBuffer'\n  , 'iimageBuffer'\n  , 'uimageBuffer'\n  , 'sampler1DArray'\n  , 'sampler1DArrayShadow'\n  , 'isampler1D'\n  , 'isampler1DArray'\n  , 'usampler1D'\n  , 'usampler1DArray'\n  , 'isampler2DRect'\n  , 'usampler2DRect'\n  , 'samplerBuffer'\n  , 'isamplerBuffer'\n  , 'usamplerBuffer'\n  , 'sampler2DMS'\n  , 'isampler2DMS'\n  , 'usampler2DMS'\n  , 'sampler2DMSArray'\n  , 'isampler2DMSArray'\n  , 'usampler2DMSArray'\n])\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports) {\n\nmodule.exports = [\n    '<<='\n  , '>>='\n  , '++'\n  , '--'\n  , '<<'\n  , '>>'\n  , '<='\n  , '>='\n  , '=='\n  , '!='\n  , '&&'\n  , '||'\n  , '+='\n  , '-='\n  , '*='\n  , '/='\n  , '%='\n  , '&='\n  , '^^'\n  , '^='\n  , '|='\n  , '('\n  , ')'\n  , '['\n  , ']'\n  , '.'\n  , '!'\n  , '~'\n  , '*'\n  , '/'\n  , '%'\n  , '+'\n  , '-'\n  , '<'\n  , '>'\n  , '&'\n  , '^'\n  , '|'\n  , '?'\n  , ':'\n  , '='\n  , ','\n  , ';'\n  , '{'\n  , '}'\n]\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar tokenize = __webpack_require__(38)\n\nmodule.exports = tokenizeString\n\nfunction tokenizeString(str, opt) {\n  var generator = tokenize(opt)\n  var tokens = []\n\n  tokens = tokens.concat(generator(str))\n  tokens = tokens.concat(generator(null))\n\n  return tokens\n}\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports) {\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota\n\n/***/ },\n/* 45 */\n/***/ function(module, exports) {\n\n/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar compile = __webpack_require__(21)\n\nvar EmptyProc = {\n  body: \"\",\n  args: [],\n  thisVars: [],\n  localVars: []\n}\n\nfunction fixup(x) {\n  if(!x) {\n    return EmptyProc\n  }\n  for(var i=0; i<x.args.length; ++i) {\n    var a = x.args[i]\n    if(i === 0) {\n      x.args[i] = {name: a, lvalue:true, rvalue: !!x.rvalue, count:x.count||1 }\n    } else {\n      x.args[i] = {name: a, lvalue:false, rvalue:true, count: 1}\n    }\n  }\n  if(!x.thisVars) {\n    x.thisVars = []\n  }\n  if(!x.localVars) {\n    x.localVars = []\n  }\n  return x\n}\n\nfunction pcompile(user_args) {\n  return compile({\n    args:     user_args.args,\n    pre:      fixup(user_args.pre),\n    body:     fixup(user_args.body),\n    post:     fixup(user_args.proc),\n    funcName: user_args.funcName\n  })\n}\n\nfunction makeOp(user_args) {\n  var args = []\n  for(var i=0; i<user_args.args.length; ++i) {\n    args.push(\"a\"+i)\n  }\n  var wrapper = new Function(\"P\", [\n    \"return function \", user_args.funcName, \"_ndarrayops(\", args.join(\",\"), \") {P(\", args.join(\",\"), \");return a0}\"\n  ].join(\"\"))\n  return wrapper(pcompile(user_args))\n}\n\nvar assign_ops = {\n  add:  \"+\",\n  sub:  \"-\",\n  mul:  \"*\",\n  div:  \"/\",\n  mod:  \"%\",\n  band: \"&\",\n  bor:  \"|\",\n  bxor: \"^\",\n  lshift: \"<<\",\n  rshift: \">>\",\n  rrshift: \">>>\"\n}\n;(function(){\n  for(var id in assign_ops) {\n    var op = assign_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\",\"b\",\"c\"],\n             body: \"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\",\"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a\"+op+\"=b\"},\n      rvalue: true,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      body: {args:[\"a\",\"b\",\"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\",\"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a\"+op+\"=s\"},\n      rvalue: true,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar unary_ops = {\n  not: \"!\",\n  bnot: \"~\",\n  neg: \"-\",\n  recip: \"1.0/\"\n}\n;(function(){\n  for(var id in unary_ops) {\n    var op = unary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a=\"+op+\"b\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\"],\n      body: {args:[\"a\"],\n             body:\"a=\"+op+\"a\"},\n      rvalue: true,\n      count: 2,\n      funcName: id+\"eq\"\n    })\n  }\n})();\n\nvar binary_ops = {\n  and: \"&&\",\n  or: \"||\",\n  eq: \"===\",\n  neq: \"!==\",\n  lt: \"<\",\n  gt: \">\",\n  leq: \"<=\",\n  geq: \">=\"\n}\n;(function() {\n  for(var id in binary_ops) {\n    var op = binary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\", \"b\", \"c\"],\n             body:\"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\",\"array\",\"scalar\"],\n      body: {args:[\"a\", \"b\", \"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\", \"b\"],\n             body:\"a=a\"+op+\"b\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a=a\"+op+\"s\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar math_unary = [\n  \"abs\",\n  \"acos\",\n  \"asin\",\n  \"atan\",\n  \"ceil\",\n  \"cos\",\n  \"exp\",\n  \"floor\",\n  \"log\",\n  \"round\",\n  \"sin\",\n  \"sqrt\",\n  \"tan\"\n]\n;(function() {\n  for(var i=0; i<math_unary.length; ++i) {\n    var f = math_unary[i]\n    exports[f] = makeOp({\n                    args: [\"array\", \"array\"],\n                    pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                    body: {args:[\"a\",\"b\"], body:\"a=this_f(b)\", thisVars:[\"this_f\"]},\n                    funcName: f\n                  })\n    exports[f+\"eq\"] = makeOp({\n                      args: [\"array\"],\n                      pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                      body: {args: [\"a\"], body:\"a=this_f(a)\", thisVars:[\"this_f\"]},\n                      rvalue: true,\n                      count: 2,\n                      funcName: f+\"eq\"\n                    })\n  }\n})();\n\nvar math_comm = [\n  \"max\",\n  \"min\",\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_comm.length; ++i) {\n    var f= math_comm[i]\n    exports[f] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f\n                })\n    exports[f+\"s\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"s\"\n                  })\n    exports[f+\"eq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"eq\"\n                  })\n    exports[f+\"seq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"seq\"\n                  })\n  }\n})();\n\nvar math_noncomm = [\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_noncomm.length; ++i) {\n    var f= math_noncomm[i]\n    exports[f+\"op\"] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"op\"\n                })\n    exports[f+\"ops\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"ops\"\n                  })\n    exports[f+\"opeq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"opeq\"\n                  })\n    exports[f+\"opseq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"opseq\"\n                  })\n  }\n})();\n\nexports.any = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"if(a){return true}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return false\"},\n  funcName: \"any\"\n})\n\nexports.all = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1}], body: \"if(!x){return false}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"all\"\n})\n\nexports.sum = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s+=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"sum\"\n})\n\nexports.prod = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=1\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s*=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"prod\"\n})\n\nexports.norm2squared = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm2squared\"\n})\n  \nexports.norm2 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return Math.sqrt(this_s)\"},\n  funcName: \"norm2\"\n})\n  \n\nexports.norminf = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:4}], body:\"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norminf\"\n})\n\nexports.norm1 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:3}], body: \"this_s+=a<0?-a:a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm1\"\n})\n\nexports.sup = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=-Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.inf = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.argmin = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})\n\nexports.argmax = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})  \n\nexports.random = makeOp({\n  args: [\"array\"],\n  pre: {args:[], body:\"this_f=Math.random\", thisVars:[\"this_f\"]},\n  body: {args: [\"a\"], body:\"a=this_f()\", thisVars:[\"this_f\"]},\n  funcName: \"random\"\n})\n\nexports.assign = makeOp({\n  args:[\"array\", \"array\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assign\" })\n\nexports.assigns = makeOp({\n  args:[\"array\", \"scalar\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assigns\" })\n\n\nexports.equals = compile({\n  args:[\"array\", \"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1},\n               {name:\"y\", lvalue:false, rvalue:true, count:1}], \n        body: \"if(x!==y){return false}\", \n        localVars: [], \n        thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"equals\"\n})\n\n\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar iota = __webpack_require__(44)\nvar isBuffer = __webpack_require__(45)\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*!\n * pad-left <https://github.com/jonschlinkert/pad-left>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n\n\nvar repeat = __webpack_require__(50);\n\nmodule.exports = function padLeft(str, num, ch) {\n  ch = typeof ch !== 'undefined' ? (ch + '') : ' ';\n  return repeat(ch, num) + str;\n};\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n(function(window) {\n    var re = {\n        not_string: /[^s]/,\n        number: /[diefg]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijosuxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[\\+\\-]/\n    }\n\n    function sprintf() {\n        var key = arguments[0], cache = sprintf.cache\n        if (!(cache[key] && cache.hasOwnProperty(key))) {\n            cache[key] = sprintf.parse(key)\n        }\n        return sprintf.format.call(null, cache[key], arguments)\n    }\n\n    sprintf.format = function(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, node_type = \"\", arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = \"\"\n        for (i = 0; i < tree_length; i++) {\n            node_type = get_type(parse_tree[i])\n            if (node_type === \"string\") {\n                output[output.length] = parse_tree[i]\n            }\n            else if (node_type === \"array\") {\n                match = parse_tree[i] // convenience purposes only\n                if (match[2]) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < match[2].length; k++) {\n                        if (!arg.hasOwnProperty(match[2][k])) {\n                            throw new Error(sprintf(\"[sprintf] property '%s' does not exist\", match[2][k]))\n                        }\n                        arg = arg[match[2][k]]\n                    }\n                }\n                else if (match[1]) { // positional argument (explicit)\n                    arg = argv[match[1]]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (get_type(arg) == \"function\") {\n                    arg = arg()\n                }\n\n                if (re.not_string.test(match[8]) && re.not_json.test(match[8]) && (get_type(arg) != \"number\" && isNaN(arg))) {\n                    throw new TypeError(sprintf(\"[sprintf] expecting number but found %s\", get_type(arg)))\n                }\n\n                if (re.number.test(match[8])) {\n                    is_positive = arg >= 0\n                }\n\n                switch (match[8]) {\n                    case \"b\":\n                        arg = arg.toString(2)\n                    break\n                    case \"c\":\n                        arg = String.fromCharCode(arg)\n                    break\n                    case \"d\":\n                    case \"i\":\n                        arg = parseInt(arg, 10)\n                    break\n                    case \"j\":\n                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)\n                    break\n                    case \"e\":\n                        arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential()\n                    break\n                    case \"f\":\n                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)\n                    break\n                    case \"g\":\n                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)\n                    break\n                    case \"o\":\n                        arg = arg.toString(8)\n                    break\n                    case \"s\":\n                        arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg)\n                    break\n                    case \"u\":\n                        arg = arg >>> 0\n                    break\n                    case \"x\":\n                        arg = arg.toString(16)\n                    break\n                    case \"X\":\n                        arg = arg.toString(16).toUpperCase()\n                    break\n                }\n                if (re.json.test(match[8])) {\n                    output[output.length] = arg\n                }\n                else {\n                    if (re.number.test(match[8]) && (!is_positive || match[3])) {\n                        sign = is_positive ? \"+\" : \"-\"\n                        arg = arg.toString().replace(re.sign, \"\")\n                    }\n                    else {\n                        sign = \"\"\n                    }\n                    pad_character = match[4] ? match[4] === \"0\" ? \"0\" : match[4].charAt(1) : \" \"\n                    pad_length = match[6] - (sign + arg).length\n                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : \"\") : \"\"\n                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === \"0\" ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output.join(\"\")\n    }\n\n    sprintf.cache = {}\n\n    sprintf.parse = function(fmt) {\n        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree[parse_tree.length] = match[0]\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree[parse_tree.length] = \"%\"\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list[field_list.length] = field_match[1]\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== \"\") {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list[field_list.length] = field_match[1]\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list[field_list.length] = field_match[1]\n                            }\n                            else {\n                                throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error(\"[sprintf] mixing positional and named placeholders is not (yet) supported\")\n                }\n                parse_tree[parse_tree.length] = match\n            }\n            else {\n                throw new SyntaxError(\"[sprintf] unexpected placeholder\")\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return parse_tree\n    }\n\n    var vsprintf = function(fmt, argv, _argv) {\n        _argv = (argv || []).slice(0)\n        _argv.splice(0, 0, fmt)\n        return sprintf.apply(null, _argv)\n    }\n\n    /**\n     * helpers\n     */\n    function get_type(variable) {\n        return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()\n    }\n\n    function str_repeat(input, multiplier) {\n        return Array(multiplier + 1).join(input)\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    if (true) {\n        exports.sprintf = sprintf\n        exports.vsprintf = vsprintf\n    }\n    else {\n        window.sprintf = sprintf\n        window.vsprintf = vsprintf\n\n        if (typeof define === \"function\" && define.amd) {\n            define(function() {\n                return {\n                    sprintf: sprintf,\n                    vsprintf: vsprintf\n                }\n            })\n        }\n    }\n})(typeof window === \"undefined\" ? this : window);\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global, Buffer) {\n\nvar bits = __webpack_require__(19)\nvar dup = __webpack_require__(24)\n\n//Legacy pool support\nif(!global.__TYPEDARRAY_POOL) {\n  global.__TYPEDARRAY_POOL = {\n      UINT8   : dup([32, 0])\n    , UINT16  : dup([32, 0])\n    , UINT32  : dup([32, 0])\n    , INT8    : dup([32, 0])\n    , INT16   : dup([32, 0])\n    , INT32   : dup([32, 0])\n    , FLOAT   : dup([32, 0])\n    , DOUBLE  : dup([32, 0])\n    , DATA    : dup([32, 0])\n    , UINT8C  : dup([32, 0])\n    , BUFFER  : dup([32, 0])\n  }\n}\n\nvar hasUint8C = (typeof Uint8ClampedArray) !== 'undefined'\nvar POOL = global.__TYPEDARRAY_POOL\n\n//Upgrade pool\nif(!POOL.UINT8C) {\n  POOL.UINT8C = dup([32, 0])\n}\nif(!POOL.BUFFER) {\n  POOL.BUFFER = dup([32, 0])\n}\n\n//New technique: Only allocate from ArrayBufferView and Buffer\nvar DATA    = POOL.DATA\n  , BUFFER  = POOL.BUFFER\n\nexports.free = function free(array) {\n  if(Buffer.isBuffer(array)) {\n    BUFFER[bits.log2(array.length)].push(array)\n  } else {\n    if(Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {\n      array = array.buffer\n    }\n    if(!array) {\n      return\n    }\n    var n = array.length || array.byteLength\n    var log_n = bits.log2(n)|0\n    DATA[log_n].push(array)\n  }\n}\n\nfunction freeArrayBuffer(buffer) {\n  if(!buffer) {\n    return\n  }\n  var n = buffer.length || buffer.byteLength\n  var log_n = bits.log2(n)\n  DATA[log_n].push(buffer)\n}\n\nfunction freeTypedArray(array) {\n  freeArrayBuffer(array.buffer)\n}\n\nexports.freeUint8 =\nexports.freeUint16 =\nexports.freeUint32 =\nexports.freeInt8 =\nexports.freeInt16 =\nexports.freeInt32 =\nexports.freeFloat32 = \nexports.freeFloat =\nexports.freeFloat64 = \nexports.freeDouble = \nexports.freeUint8Clamped = \nexports.freeDataView = freeTypedArray\n\nexports.freeArrayBuffer = freeArrayBuffer\n\nexports.freeBuffer = function freeBuffer(array) {\n  BUFFER[bits.log2(array.length)].push(array)\n}\n\nexports.malloc = function malloc(n, dtype) {\n  if(dtype === undefined || dtype === 'arraybuffer') {\n    return mallocArrayBuffer(n)\n  } else {\n    switch(dtype) {\n      case 'uint8':\n        return mallocUint8(n)\n      case 'uint16':\n        return mallocUint16(n)\n      case 'uint32':\n        return mallocUint32(n)\n      case 'int8':\n        return mallocInt8(n)\n      case 'int16':\n        return mallocInt16(n)\n      case 'int32':\n        return mallocInt32(n)\n      case 'float':\n      case 'float32':\n        return mallocFloat(n)\n      case 'double':\n      case 'float64':\n        return mallocDouble(n)\n      case 'uint8_clamped':\n        return mallocUint8Clamped(n)\n      case 'buffer':\n        return mallocBuffer(n)\n      case 'data':\n      case 'dataview':\n        return mallocDataView(n)\n\n      default:\n        return null\n    }\n  }\n  return null\n}\n\nfunction mallocArrayBuffer(n) {\n  var n = bits.nextPow2(n)\n  var log_n = bits.log2(n)\n  var d = DATA[log_n]\n  if(d.length > 0) {\n    return d.pop()\n  }\n  return new ArrayBuffer(n)\n}\nexports.mallocArrayBuffer = mallocArrayBuffer\n\nfunction mallocUint8(n) {\n  return new Uint8Array(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocUint8 = mallocUint8\n\nfunction mallocUint16(n) {\n  return new Uint16Array(mallocArrayBuffer(2*n), 0, n)\n}\nexports.mallocUint16 = mallocUint16\n\nfunction mallocUint32(n) {\n  return new Uint32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocUint32 = mallocUint32\n\nfunction mallocInt8(n) {\n  return new Int8Array(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocInt8 = mallocInt8\n\nfunction mallocInt16(n) {\n  return new Int16Array(mallocArrayBuffer(2*n), 0, n)\n}\nexports.mallocInt16 = mallocInt16\n\nfunction mallocInt32(n) {\n  return new Int32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocInt32 = mallocInt32\n\nfunction mallocFloat(n) {\n  return new Float32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocFloat32 = exports.mallocFloat = mallocFloat\n\nfunction mallocDouble(n) {\n  return new Float64Array(mallocArrayBuffer(8*n), 0, n)\n}\nexports.mallocFloat64 = exports.mallocDouble = mallocDouble\n\nfunction mallocUint8Clamped(n) {\n  if(hasUint8C) {\n    return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n)\n  } else {\n    return mallocUint8(n)\n  }\n}\nexports.mallocUint8Clamped = mallocUint8Clamped\n\nfunction mallocDataView(n) {\n  return new DataView(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocDataView = mallocDataView\n\nfunction mallocBuffer(n) {\n  n = bits.nextPow2(n)\n  var log_n = bits.log2(n)\n  var cache = BUFFER[log_n]\n  if(cache.length > 0) {\n    return cache.pop()\n  }\n  return new Buffer(n)\n}\nexports.mallocBuffer = mallocBuffer\n\nexports.clearCache = function clearCache() {\n  for(var i=0; i<32; ++i) {\n    POOL.UINT8[i].length = 0\n    POOL.UINT16[i].length = 0\n    POOL.UINT32[i].length = 0\n    POOL.INT8[i].length = 0\n    POOL.INT16[i].length = 0\n    POOL.INT32[i].length = 0\n    POOL.FLOAT[i].length = 0\n    POOL.DOUBLE[i].length = 0\n    POOL.UINT8C[i].length = 0\n    DATA[i].length = 0\n    BUFFER[i].length = 0\n  }\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9), __webpack_require__(20).Buffer))\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction unique_pred(list, compare) {\n  var ptr = 1\n    , len = list.length\n    , a=list[0], b=list[0]\n  for(var i=1; i<len; ++i) {\n    b = a\n    a = list[i]\n    if(compare(a, b)) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      list[ptr++] = a\n    }\n  }\n  list.length = ptr\n  return list\n}\n\nfunction unique_eq(list) {\n  var ptr = 1\n    , len = list.length\n    , a=list[0], b = list[0]\n  for(var i=1; i<len; ++i, b=a) {\n    b = a\n    a = list[i]\n    if(a !== b) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      list[ptr++] = a\n    }\n  }\n  list.length = ptr\n  return list\n}\n\nfunction unique(list, compare, sorted) {\n  if(list.length === 0) {\n    return list\n  }\n  if(compare) {\n    if(!sorted) {\n      list.sort(compare)\n    }\n    return unique_pred(list, compare)\n  }\n  if(!sorted) {\n    list.sort()\n  }\n  return unique_eq(list)\n}\n\nmodule.exports = unique\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar hiddenStore = __webpack_require__(55);\n\nmodule.exports = createStore;\n\nfunction createStore() {\n    var key = {};\n\n    return function (obj) {\n        if ((typeof obj !== 'object' || obj === null) &&\n            typeof obj !== 'function'\n        ) {\n            throw new Error('Weakmap-shim: Key must be object')\n        }\n\n        var store = obj.valueOf(key);\n        return store && store.identity === key ?\n            store : hiddenStore(obj, key);\n    };\n}\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports) {\n\nmodule.exports = hiddenStore;\n\nfunction hiddenStore(obj, key) {\n    var store = { identity: key };\n    var valueOf = obj.valueOf;\n\n    Object.defineProperty(obj, \"valueOf\", {\n        value: function (value) {\n            return value !== key ?\n                valueOf.apply(this, arguments) : store;\n        },\n        writable: true\n    });\n\n    return store;\n}\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n// Original - @Gozola.\n// https://gist.github.com/Gozala/1269991\n// This is a reimplemented version (with a few bug fixes).\n\nvar createStore = __webpack_require__(54);\n\nmodule.exports = weakMap;\n\nfunction weakMap() {\n    var privates = createStore();\n\n    return {\n        'get': function (key, fallback) {\n            var store = privates(key)\n            return store.hasOwnProperty('value') ?\n                store.value : fallback\n        },\n        'set': function (key, value) {\n            privates(key).value = value;\n            return this;\n        },\n        'has': function(key) {\n            return 'value' in privates(key);\n        },\n        'delete': function (key) {\n            return delete privates(key).value;\n        }\n    }\n}\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_shader__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_shader___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_gl_shader__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_gl_buffer__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_gl_buffer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_gl_buffer__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_flyCamera__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_flyCamera___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_gl_flyCamera__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_matrix__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_matrix___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_gl_matrix__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shaders_scene_vert__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shaders_scene_vert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__shaders_scene_vert__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shaders_scene_frag__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shaders_scene_frag___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__shaders_scene_frag__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_stats_js__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_stats_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_stats_js__);\n\n\n\n\n\n\n\n\nconst demo = {\n\tstats: new __WEBPACK_IMPORTED_MODULE_6_stats_js___default.a(),\n\tcontrols: new __WEBPACK_IMPORTED_MODULE_2_gl_flyCamera___default.a({\n\t\tmovementSpeed: 5.0,\n\t\trollSpeed: Math.PI / 3\n\t}),\n\tdefaultQuality: 1,\n\tquality: 1,\n\tshader: undefined,\n\tbuffer: undefined,\n\tlastTimeStamp: 0,\n\tstartTime: undefined,\n\tellapsedTime: undefined,\n\tgl: undefined,\n\tcanvas: document.body.appendChild(document.createElement(\"canvas\")),\n\tcreateContext: function(){\n\t\tthis.gl = (\n\t\t\tthis.canvas.getContext(\"webgl\") ||\n\t\t\tthis.canvas.getContext(\"webgl-experimental\") ||\n\t\t\tthis.canvas.getContext(\"experimental-webgl\")\n\t\t);\n\t\tif (!this.gl) {\n\t\t\tthrow new Error(\"Unable to initialize gl\");\n\t\t}\n\t},\n\trender: function(dt){\n\t\tthis.stats.begin();\n\n\t\t//Bind shader\n\t\tthis.shader.bind();\n\n\t\t//Bind buffer\n\t\tthis.buffer.bind();\n\n\t\t//Set attributes\n\t\tthis.shader.attributes.position.pointer();\n\n\t\t//Set uniforms\n\t\tthis.shader.uniforms.uResolution = [this.canvas.width, this.canvas.height];\n\n\t\tconst vectorDir = __WEBPACK_IMPORTED_MODULE_3_gl_matrix___default.a.vec3.fromValues( 0, 0, -1 );\n\t\t__WEBPACK_IMPORTED_MODULE_3_gl_matrix___default.a.vec3.transformQuat( vectorDir, vectorDir, this.controls.quaternion );\n\t\t__WEBPACK_IMPORTED_MODULE_3_gl_matrix___default.a.vec3.normalize( vectorDir, vectorDir );\n\t\tconst vectorUp = __WEBPACK_IMPORTED_MODULE_3_gl_matrix___default.a.vec3.fromValues( 0, 1, 0 );\n\t\t__WEBPACK_IMPORTED_MODULE_3_gl_matrix___default.a.vec3.transformQuat( vectorUp, vectorUp, this.controls.quaternion );\n\t\t__WEBPACK_IMPORTED_MODULE_3_gl_matrix___default.a.vec3.normalize( vectorUp, vectorUp );\n\n\t\tthis.shader.uniforms.uCamPosition = this.controls.position;\n\t\tthis.shader.uniforms.uCamUp = vectorUp;\n\t\tthis.shader.uniforms.uCamDir = vectorDir;\n\n\t\tthis.shader.uniforms.uGlobalTime += dt / 3000;\n\t\tthis.shader.uniforms.uMinimumDistance = 0.005;\n\t\tthis.shader.uniforms.uNormalDistance = 1.3;\n\t\tthis.shader.uniforms.uAnaglyph = 0;\n\t\tthis.shader.uniforms.uForms = 3;\n\t\tthis.shader.uniforms.uSpaceFolding = 1;\n\n\t\t//Draw\n\t\tthis.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n\n\t\tthis.controls.update(dt);\n\t\tthis.stats.end();\n\t},\n\tloop: function(timeStamp){\n\t\tif (!this.startTime) {\n\t\t\tthis.startTime = timeStamp;\n\t\t}\n\t\tthis.ellapsedTime = timeStamp - this.startTime;\n\t\tvar dt = timeStamp - this.lastTimeStamp;\n\t\tthis.lastTimeStamp = timeStamp;\n\n\t\tif (this.ellapsedTime < 5000 && dt > 45.0){\n\t\t\tthis.quality = this.quality - 0.01;\n\t\t\tthis.resizeCanvas();\n\t\t}\n\t\tthis.render(dt);\n\t\twindow.requestAnimationFrame(this.loop.bind(this));\n\t},\n\tresizeCanvas: function(){\n\t\tthis.canvas.width = window.innerWidth * this.quality;\n\t\tthis.canvas.height = window.innerHeight * this.quality;\n\t\tthis.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n\t},\n\tresize: function(){\n\t\tconst canvas = this.gl.canvas;\n\t\tthis.quality = this.defaultQuality;\n\t\tconst displayWidth  = window.innerWidth * this.quality;\n\t\tconst displayHeight = window.innerHeight * this.quality;\n\n\t\tif (canvas.width  !== displayWidth || canvas.height !== displayHeight) {\n\t\t\tthis.startTime = 0;\n\t\t\tthis.resizeCanvas();\n\t\t}\n\t},\n\tkeydown: function(event){\n\t\tif ( event.altKey ) {\n\t\t\t\treturn;\n\t\t}\n\t\tevent.preventDefault();\n\t\tif( event.shiftKey ){\n\t\t\tswitch ( event.keyCode ) {\n\t\t\t\tcase 187: /* + */ this.quality += 0.05; this.resizeCanvas(); break;\n\t\t\t\tcase 189: /* - */ this.quality -= 0.05; this.resizeCanvas(); break;\n\t\t\t}\n\t\t}\n\t},\n\tinit: function(){\n\t\tthis.createContext();\n\t\tthis.canvas.width  = window.innerWidth * this.quality;\n\t\tthis.canvas.height = window.innerHeight * this.quality;\n\t\tthis.canvas.style.width  = \"100%\";\n\t\tthis.canvas.style.height = \"100%\";\n\t\tdocument.body.appendChild( this.stats.dom );\n\t\tthis.controls.start();\n\t\t//Create full screen vertex buffer\n\t\tthis.buffer = __WEBPACK_IMPORTED_MODULE_1_gl_buffer___default()(this.gl, [\n\t\t\t// First triangle:\n\t\t\t 1.0,  1.0,\n\t\t\t-1.0,  1.0,\n\t\t\t-1.0, -1.0,\n\t\t\t// Second triangle:\n\t\t\t-1.0, -1.0,\n\t\t\t 1.0, -1.0,\n\t\t\t 1.0,  1.0\n\t\t]);\n\n\t\t//Create shader\n\t\tthis.shader = __WEBPACK_IMPORTED_MODULE_0_gl_shader___default()(\n\t\t\tthis.gl,\n\t\t\t__WEBPACK_IMPORTED_MODULE_4__shaders_scene_vert___default.a,\n\t\t\t__WEBPACK_IMPORTED_MODULE_5__shaders_scene_frag___default.a\n\t\t);\n\t\tthis.shader.attributes.position.location = 0\n\n\t\twindow.addEventListener(\"resize\", this.resize.bind(this)); \n\t\twindow.addEventListener(\"keydown\", this.keydown.bind(this));\n\t\twindow.requestAnimationFrame(this.loop.bind(this));\n\t}\n}\ndemo.init();\n\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// demo.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 57);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap dae5ee476e17d6b934f0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n// Configuration Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\nglMatrix.ENABLE_SIMD = false;\n\n// Capability detection\nglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in this);\nglMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    glMatrix.ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less \n * than or equal to 1.0, and a relative tolerance is used for larger values)\n * \n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nglMatrix.equals = function(a, b) {\n\treturn Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nmodule.exports = glMatrix;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-matrix/src/gl-matrix/common.js\n// module id = 0\n// module chunks = 0","function GLError (rawError, shortMessage, longMessage) {\n    this.shortMessage = shortMessage || ''\n    this.longMessage = longMessage || ''\n    this.rawError = rawError || ''\n    this.message =\n      'gl-shader: ' + (shortMessage || rawError || '') +\n      (longMessage ? '\\n'+longMessage : '')\n    this.stack = (new Error()).stack\n}\nGLError.prototype = new Error\nGLError.prototype.name = 'GLError'\nGLError.prototype.constructor = GLError\nmodule.exports = GLError\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-shader/lib/GLError.js\n// module id = 1\n// module chunks = 0","/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.3.2\n */\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n// END HEADER\n\nexports.glMatrix = require(\"./gl-matrix/common.js\");\nexports.mat2 = require(\"./gl-matrix/mat2.js\");\nexports.mat2d = require(\"./gl-matrix/mat2d.js\");\nexports.mat3 = require(\"./gl-matrix/mat3.js\");\nexports.mat4 = require(\"./gl-matrix/mat4.js\");\nexports.quat = require(\"./gl-matrix/quat.js\");\nexports.vec2 = require(\"./gl-matrix/vec2.js\");\nexports.vec3 = require(\"./gl-matrix/vec3.js\");\nexports.vec4 = require(\"./gl-matrix/vec4.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-matrix/src/gl-matrix.js\n// module id = 2\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nmat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nmat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n};\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nmat3.sub = mat3.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nmat3.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n};\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nmat3.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    return out;\n};\n\n/*\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && \n           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n};\n\n\nmodule.exports = mat3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-matrix/src/gl-matrix/mat3.js\n// module id = 3\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nvec3.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nvec3.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nvec3.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n  var factorTimes2 = t * t,\n      factor1 = factorTimes2 * (2 * t - 3) + 1,\n      factor2 = factorTimes2 * (t - 2) + t,\n      factor3 = factorTimes2 * (t - 1),\n      factor4 = factorTimes2 * (3 - 2 * t);\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n  var inverseFactor = 1 - t,\n      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n      factorTimes2 = t * t,\n      factor1 = inverseFactorTimesTwo * inverseFactor,\n      factor2 = 3 * t * inverseFactorTimesTwo,\n      factor3 = 3 * factorTimes2 * inverseFactor,\n      factor4 = factorTimes2 * t;\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n   \n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n \n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n \n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0){\n        return 0;\n    } else {\n        return Math.acos(cosine);\n    }     \n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2];\n    var b0 = b[0], b1 = b[1], b2 = b[2];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n};\n\nmodule.exports = vec3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-matrix/src/gl-matrix/vec3.js\n// module id = 4\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nvec4.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nvec4.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nvec4.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = x * len;\n        out[1] = y * len;\n        out[2] = z * len;\n        out[3] = w * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = glMatrix.RANDOM();\n    out[1] = glMatrix.RANDOM();\n    out[2] = glMatrix.RANDOM();\n    out[3] = glMatrix.RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\nmodule.exports = vec4;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-matrix/src/gl-matrix/vec4.js\n// module id = 5\n// module chunks = 0","'use strict'\n\nmodule.exports = makeReflectTypes\n\n//Construct type info for reflection.\n//\n// This iterates over the flattened list of uniform type values and smashes them into a JSON object.\n//\n// The leaves of the resulting object are either indices or type strings representing primitive glslify types\nfunction makeReflectTypes(uniforms, useIndex) {\n  var obj = {}\n  for(var i=0; i<uniforms.length; ++i) {\n    var n = uniforms[i].name\n    var parts = n.split(\".\")\n    var o = obj\n    for(var j=0; j<parts.length; ++j) {\n      var x = parts[j].split(\"[\")\n      if(x.length > 1) {\n        if(!(x[0] in o)) {\n          o[x[0]] = []\n        }\n        o = o[x[0]]\n        for(var k=1; k<x.length; ++k) {\n          var y = parseInt(x[k])\n          if(k<x.length-1 || j<parts.length-1) {\n            if(!(y in o)) {\n              if(k < x.length-1) {\n                o[y] = []\n              } else {\n                o[y] = {}\n              }\n            }\n            o = o[y]\n          } else {\n            if(useIndex) {\n              o[y] = i\n            } else {\n              o[y] = uniforms[i].type\n            }\n          }\n        }\n      } else if(j < parts.length-1) {\n        if(!(x[0] in o)) {\n          o[x[0]] = {}\n        }\n        o = o[x[0]]\n      } else {\n        if(useIndex) {\n          o[x[0]] = i\n        } else {\n          o[x[0]] = uniforms[i].type\n        }\n      }\n    }\n  }\n  return obj\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-shader/lib/reflect.js\n// module id = 6\n// module chunks = 0","module.exports = [\n  // Keep this list sorted\n  'abs'\n  , 'acos'\n  , 'all'\n  , 'any'\n  , 'asin'\n  , 'atan'\n  , 'ceil'\n  , 'clamp'\n  , 'cos'\n  , 'cross'\n  , 'dFdx'\n  , 'dFdy'\n  , 'degrees'\n  , 'distance'\n  , 'dot'\n  , 'equal'\n  , 'exp'\n  , 'exp2'\n  , 'faceforward'\n  , 'floor'\n  , 'fract'\n  , 'gl_BackColor'\n  , 'gl_BackLightModelProduct'\n  , 'gl_BackLightProduct'\n  , 'gl_BackMaterial'\n  , 'gl_BackSecondaryColor'\n  , 'gl_ClipPlane'\n  , 'gl_ClipVertex'\n  , 'gl_Color'\n  , 'gl_DepthRange'\n  , 'gl_DepthRangeParameters'\n  , 'gl_EyePlaneQ'\n  , 'gl_EyePlaneR'\n  , 'gl_EyePlaneS'\n  , 'gl_EyePlaneT'\n  , 'gl_Fog'\n  , 'gl_FogCoord'\n  , 'gl_FogFragCoord'\n  , 'gl_FogParameters'\n  , 'gl_FragColor'\n  , 'gl_FragCoord'\n  , 'gl_FragData'\n  , 'gl_FragDepth'\n  , 'gl_FragDepthEXT'\n  , 'gl_FrontColor'\n  , 'gl_FrontFacing'\n  , 'gl_FrontLightModelProduct'\n  , 'gl_FrontLightProduct'\n  , 'gl_FrontMaterial'\n  , 'gl_FrontSecondaryColor'\n  , 'gl_LightModel'\n  , 'gl_LightModelParameters'\n  , 'gl_LightModelProducts'\n  , 'gl_LightProducts'\n  , 'gl_LightSource'\n  , 'gl_LightSourceParameters'\n  , 'gl_MaterialParameters'\n  , 'gl_MaxClipPlanes'\n  , 'gl_MaxCombinedTextureImageUnits'\n  , 'gl_MaxDrawBuffers'\n  , 'gl_MaxFragmentUniformComponents'\n  , 'gl_MaxLights'\n  , 'gl_MaxTextureCoords'\n  , 'gl_MaxTextureImageUnits'\n  , 'gl_MaxTextureUnits'\n  , 'gl_MaxVaryingFloats'\n  , 'gl_MaxVertexAttribs'\n  , 'gl_MaxVertexTextureImageUnits'\n  , 'gl_MaxVertexUniformComponents'\n  , 'gl_ModelViewMatrix'\n  , 'gl_ModelViewMatrixInverse'\n  , 'gl_ModelViewMatrixInverseTranspose'\n  , 'gl_ModelViewMatrixTranspose'\n  , 'gl_ModelViewProjectionMatrix'\n  , 'gl_ModelViewProjectionMatrixInverse'\n  , 'gl_ModelViewProjectionMatrixInverseTranspose'\n  , 'gl_ModelViewProjectionMatrixTranspose'\n  , 'gl_MultiTexCoord0'\n  , 'gl_MultiTexCoord1'\n  , 'gl_MultiTexCoord2'\n  , 'gl_MultiTexCoord3'\n  , 'gl_MultiTexCoord4'\n  , 'gl_MultiTexCoord5'\n  , 'gl_MultiTexCoord6'\n  , 'gl_MultiTexCoord7'\n  , 'gl_Normal'\n  , 'gl_NormalMatrix'\n  , 'gl_NormalScale'\n  , 'gl_ObjectPlaneQ'\n  , 'gl_ObjectPlaneR'\n  , 'gl_ObjectPlaneS'\n  , 'gl_ObjectPlaneT'\n  , 'gl_Point'\n  , 'gl_PointCoord'\n  , 'gl_PointParameters'\n  , 'gl_PointSize'\n  , 'gl_Position'\n  , 'gl_ProjectionMatrix'\n  , 'gl_ProjectionMatrixInverse'\n  , 'gl_ProjectionMatrixInverseTranspose'\n  , 'gl_ProjectionMatrixTranspose'\n  , 'gl_SecondaryColor'\n  , 'gl_TexCoord'\n  , 'gl_TextureEnvColor'\n  , 'gl_TextureMatrix'\n  , 'gl_TextureMatrixInverse'\n  , 'gl_TextureMatrixInverseTranspose'\n  , 'gl_TextureMatrixTranspose'\n  , 'gl_Vertex'\n  , 'greaterThan'\n  , 'greaterThanEqual'\n  , 'inversesqrt'\n  , 'length'\n  , 'lessThan'\n  , 'lessThanEqual'\n  , 'log'\n  , 'log2'\n  , 'matrixCompMult'\n  , 'max'\n  , 'min'\n  , 'mix'\n  , 'mod'\n  , 'normalize'\n  , 'not'\n  , 'notEqual'\n  , 'pow'\n  , 'radians'\n  , 'reflect'\n  , 'refract'\n  , 'sign'\n  , 'sin'\n  , 'smoothstep'\n  , 'sqrt'\n  , 'step'\n  , 'tan'\n  , 'texture2D'\n  , 'texture2DLod'\n  , 'texture2DProj'\n  , 'texture2DProjLod'\n  , 'textureCube'\n  , 'textureCubeLod'\n  , 'texture2DLodEXT'\n  , 'texture2DProjLodEXT'\n  , 'textureCubeLodEXT'\n  , 'texture2DGradEXT'\n  , 'texture2DProjGradEXT'\n  , 'textureCubeGradEXT'\n]\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/glsl-tokenizer/lib/builtins.js\n// module id = 7\n// module chunks = 0","module.exports = [\n  // current\n    'precision'\n  , 'highp'\n  , 'mediump'\n  , 'lowp'\n  , 'attribute'\n  , 'const'\n  , 'uniform'\n  , 'varying'\n  , 'break'\n  , 'continue'\n  , 'do'\n  , 'for'\n  , 'while'\n  , 'if'\n  , 'else'\n  , 'in'\n  , 'out'\n  , 'inout'\n  , 'float'\n  , 'int'\n  , 'void'\n  , 'bool'\n  , 'true'\n  , 'false'\n  , 'discard'\n  , 'return'\n  , 'mat2'\n  , 'mat3'\n  , 'mat4'\n  , 'vec2'\n  , 'vec3'\n  , 'vec4'\n  , 'ivec2'\n  , 'ivec3'\n  , 'ivec4'\n  , 'bvec2'\n  , 'bvec3'\n  , 'bvec4'\n  , 'sampler1D'\n  , 'sampler2D'\n  , 'sampler3D'\n  , 'samplerCube'\n  , 'sampler1DShadow'\n  , 'sampler2DShadow'\n  , 'struct'\n\n  // future\n  , 'asm'\n  , 'class'\n  , 'union'\n  , 'enum'\n  , 'typedef'\n  , 'template'\n  , 'this'\n  , 'packed'\n  , 'goto'\n  , 'switch'\n  , 'default'\n  , 'inline'\n  , 'noinline'\n  , 'volatile'\n  , 'public'\n  , 'static'\n  , 'extern'\n  , 'external'\n  , 'interface'\n  , 'long'\n  , 'short'\n  , 'double'\n  , 'half'\n  , 'fixed'\n  , 'unsigned'\n  , 'input'\n  , 'output'\n  , 'hvec2'\n  , 'hvec3'\n  , 'hvec4'\n  , 'dvec2'\n  , 'dvec3'\n  , 'dvec4'\n  , 'fvec2'\n  , 'fvec3'\n  , 'fvec4'\n  , 'sampler2DRect'\n  , 'sampler3DRect'\n  , 'sampler2DRectShadow'\n  , 'sizeof'\n  , 'cast'\n  , 'namespace'\n  , 'using'\n]\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/glsl-tokenizer/lib/literals.js\n// module id = 8\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 9\n// module chunks = 0","\"use strict\"\n\nvar pool = require(\"typedarray-pool\")\nvar ops = require(\"ndarray-ops\")\nvar ndarray = require(\"ndarray\")\n\nvar SUPPORTED_TYPES = [\n  \"uint8\",\n  \"uint8_clamped\",\n  \"uint16\",\n  \"uint32\",\n  \"int8\",\n  \"int16\",\n  \"int32\",\n  \"float32\" ]\n\nfunction GLBuffer(gl, type, handle, length, usage) {\n  this.gl = gl\n  this.type = type\n  this.handle = handle\n  this.length = length\n  this.usage = usage\n}\n\nvar proto = GLBuffer.prototype\n\nproto.bind = function() {\n  this.gl.bindBuffer(this.type, this.handle)\n}\n\nproto.unbind = function() {\n  this.gl.bindBuffer(this.type, null)\n}\n\nproto.dispose = function() {\n  this.gl.deleteBuffer(this.handle)\n}\n\nfunction updateTypeArray(gl, type, len, usage, data, offset) {\n  var dataLen = data.length * data.BYTES_PER_ELEMENT\n  if(offset < 0) {\n    gl.bufferData(type, data, usage)\n    return dataLen\n  }\n  if(dataLen + offset > len) {\n    throw new Error(\"gl-buffer: If resizing buffer, must not specify offset\")\n  }\n  gl.bufferSubData(type, offset, data)\n  return len\n}\n\nfunction makeScratchTypeArray(array, dtype) {\n  var res = pool.malloc(array.length, dtype)\n  var n = array.length\n  for(var i=0; i<n; ++i) {\n    res[i] = array[i]\n  }\n  return res\n}\n\nfunction isPacked(shape, stride) {\n  var n = 1\n  for(var i=stride.length-1; i>=0; --i) {\n    if(stride[i] !== n) {\n      return false\n    }\n    n *= shape[i]\n  }\n  return true\n}\n\nproto.update = function(array, offset) {\n  if(typeof offset !== \"number\") {\n    offset = -1\n  }\n  this.bind()\n  if(typeof array === \"object\" && typeof array.shape !== \"undefined\") { //ndarray\n    var dtype = array.dtype\n    if(SUPPORTED_TYPES.indexOf(dtype) < 0) {\n      dtype = \"float32\"\n    }\n    if(this.type === this.gl.ELEMENT_ARRAY_BUFFER) {\n      var ext = gl.getExtension('OES_element_index_uint')\n      if(ext && dtype !== \"uint16\") {\n        dtype = \"uint32\"\n      } else {\n        dtype = \"uint16\"\n      }\n    }\n    if(dtype === array.dtype && isPacked(array.shape, array.stride)) {\n      if(array.offset === 0 && array.data.length === array.shape[0]) {\n        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array.data, offset)\n      } else {\n        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array.data.subarray(array.offset, array.shape[0]), offset)\n      }\n    } else {\n      var tmp = pool.malloc(array.size, dtype)\n      var ndt = ndarray(tmp, array.shape)\n      ops.assign(ndt, array)\n      if(offset < 0) {\n        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, tmp, offset)\n      } else {\n        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, tmp.subarray(0, array.size), offset)\n      }\n      pool.free(tmp)\n    }\n  } else if(Array.isArray(array)) { //Vanilla array\n    var t\n    if(this.type === this.gl.ELEMENT_ARRAY_BUFFER) {\n      t = makeScratchTypeArray(array, \"uint16\")\n    } else {\n      t = makeScratchTypeArray(array, \"float32\")\n    }\n    if(offset < 0) {\n      this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, t, offset)\n    } else {\n      this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, t.subarray(0, array.length), offset)\n    }\n    pool.free(t)\n  } else if(typeof array === \"object\" && typeof array.length === \"number\") { //Typed array\n    this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array, offset)\n  } else if(typeof array === \"number\" || array === undefined) { //Number/default\n    if(offset >= 0) {\n      throw new Error(\"gl-buffer: Cannot specify offset when resizing buffer\")\n    }\n    array = array | 0\n    if(array <= 0) {\n      array = 1\n    }\n    this.gl.bufferData(this.type, array|0, this.usage)\n    this.length = array\n  } else { //Error, case should not happen\n    throw new Error(\"gl-buffer: Invalid data type\")\n  }\n}\n\nfunction createBuffer(gl, data, type, usage) {\n  type = type || gl.ARRAY_BUFFER\n  usage = usage || gl.DYNAMIC_DRAW\n  if(type !== gl.ARRAY_BUFFER && type !== gl.ELEMENT_ARRAY_BUFFER) {\n    throw new Error(\"gl-buffer: Invalid type for webgl buffer, must be either gl.ARRAY_BUFFER or gl.ELEMENT_ARRAY_BUFFER\")\n  }\n  if(usage !== gl.DYNAMIC_DRAW && usage !== gl.STATIC_DRAW && usage !== gl.STREAM_DRAW) {\n    throw new Error(\"gl-buffer: Invalid usage for buffer, must be either gl.DYNAMIC_DRAW, gl.STATIC_DRAW or gl.STREAM_DRAW\")\n  }\n  var handle = gl.createBuffer()\n  var result = new GLBuffer(gl, type, handle, 0, usage)\n  result.update(data)\n  return result\n}\n\nmodule.exports = createBuffer\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-buffer/buffer.js\n// module id = 10\n// module chunks = 0","var glMatrix = require('gl-matrix');\n\nvar flyCamera = function( opts ) {\n\tif ( !opts ) opts = {};\n\tthis.domElement = ( opts.domElement !== undefined ) ? opts.domElement : document;\n\tif ( opts.domElement ) this.domElement.setAttribute( 'tabindex', -1 );\n\n\tthis.movementSpeed = opts.movementSpeed || 10.0;\n\tthis.rollSpeed = opts.rollSpeed || Math.PI / 3;\n\tthis.dragToLook = opts.dragToLook || false;\n\tthis.autoForward = opts.autoForward || false;\n\tthis.paused = opts.paused || false;\n\tthis.mouseStatus = 0;\n\n\tthis.tmpQuaternion = glMatrix.quat.create();\n\tthis.moveVector = glMatrix.vec3.create();\n\tthis.rotationVector = glMatrix.vec3.create();\n\n\n\tif (opts.position){\n\t\tthis.position = glMatrix.vec3.fromValues(opts.position[0], opts.position[1], opts.position[2])\n\t} else {\n\t\tthis.position = glMatrix.vec3.create();\n\t}\n\tif(opts.quaternion){\n\t\tthis.quaternion = glMatrix.quat.fromValues(opts.quaternion[0], opts.quaternion[1], opts.quaternion[2], opts.quaternion[3])\n\t} else {\n\t\tthis.quaternion = glMatrix.quat.create();\n\t}\n\n\tthis.moveState = { \n\t\tup: 0, \n\t\tdown: 0, \n\t\tleft: 0, \n\t\tright: 0, \n\t\tforward: 0, \n\t\tback: 0, \n\t\tpitchUp: 0, \n\t\tpitchDown: 0, \n\t\tyawLeft: 0, \n\t\tyawRight: 0, \n\t\trollLeft: 0, \n\t\trollRight: 0 \n\t};\n}\n\nflyCamera.prototype.keydown = function (event) {\n\tif ( event.altKey ) {\n\t\t\treturn;\n\t}\n\tevent.preventDefault();\n\tswitch ( event.keyCode ) {\n\t\tcase 16: /* shift */ this.movementSpeedMultiplier = .1; break;\n\t\tcase 87: /*W*/ this.moveState.forward = 1; break;\n\t\tcase 83: /*S*/ this.moveState.back = 1; break;\n\t\tcase 65: /*A*/ this.moveState.left = 1; break;\n\t\tcase 68: /*D*/ this.moveState.right = 1; break;\n\t\tcase 82: /*R*/ this.moveState.up = 1; break;\n\t\tcase 70: /*F*/ this.moveState.down = 1; break;\n\t\tcase 38: /*up*/ this.moveState.pitchUp = 1; break;\n\t\tcase 40: /*down*/ this.moveState.pitchDown = 1; break;\n\t\tcase 37: /*left*/ this.moveState.yawLeft = 1; break;\n\t\tcase 39: /*right*/ this.moveState.yawRight = 1; break;\n\t\tcase 81: /*Q*/ this.moveState.rollLeft = 1; break;\n\t\tcase 69: /*E*/ this.moveState.rollRight = 1; break;\n\t\tcase 32: /*space*/ this.paused = !this.paused; break;\n\t}\n\tthis.updateMovementVector();\n\tthis.updateRotationVector();\n}\n\nflyCamera.prototype.keyup = function (event) {\n\tswitch ( event.keyCode ) {\n\t\tcase 16: /* shift */ this.movementSpeedMultiplier = 1; break;\n\t\tcase 87: /*W*/ this.moveState.forward = 0; break;\n\t\tcase 83: /*S*/ this.moveState.back = 0; break;\n\t\tcase 65: /*A*/ this.moveState.left = 0; break;\n\t\tcase 68: /*D*/ this.moveState.right = 0; break;\n\t\tcase 82: /*R*/ this.moveState.up = 0; break;\n\t\tcase 70: /*F*/ this.moveState.down = 0; break;\n\t\tcase 38: /*up*/ this.moveState.pitchUp = 0; break;\n\t\tcase 40: /*down*/ this.moveState.pitchDown = 0; break;\n\t\tcase 37: /*left*/ this.moveState.yawLeft = 0; break;\n\t\tcase 39: /*right*/ this.moveState.yawRight = 0; break;\n\t\tcase 81: /*Q*/ this.moveState.rollLeft = 0; break;\n\t\tcase 69: /*E*/ this.moveState.rollRight = 0; break;\n\t}\n\tthis.updateMovementVector();\n\tthis.updateRotationVector();\n};\n\nflyCamera.prototype.mousemove = function (event) {\n\tif ( !this.dragToLook || this.mouseStatus > 0 ) {\n\t\tvar container = this.getContainerDimensions();\n\t\tvar halfWidth  = container.size[ 0 ] / 2;\n\t\tvar halfHeight = container.size[ 1 ] / 2;\n\t\tthis.moveState.yawLeft   = - ( ( event.pageX - container.offset[ 0 ] ) - halfWidth  ) / halfWidth;\n\t\tthis.moveState.pitchDown =   ( ( event.pageY - container.offset[ 1 ] ) - halfHeight ) / halfHeight;\n\t\tthis.updateRotationVector();\n\t}\n};\n\nflyCamera.prototype.mousedown = function (event) {\n\tif ( this.domElement !== document ) {\n\t\tthis.domElement.focus();\n\t}\n\tevent.preventDefault();\n\tevent.stopPropagation();\n\tif ( this.dragToLook ) {\n\t\tthis.mouseStatus ++;\n\t} else {\n\t\tswitch ( event.button ) {\n\t\t\tcase 0: this.moveState.forward = 1; break;\n\t\t\tcase 2: this.moveState.back = 1; break;\n\t\t}\n\t\tthis.updateMovementVector();\n\t}\n};\n\nflyCamera.prototype.mouseup = function (event) {\n\tevent.preventDefault();\n\tevent.stopPropagation();\n\tif ( this.dragToLook ) {\n\t\tthis.mouseStatus --;\n\t\tthis.moveState.yawLeft = this.moveState.pitchDown = 0;\n\t} else {\n\t\tswitch ( event.button ) {\n\t\t\tcase 0: this.moveState.forward = 0; break;\n\t\t\tcase 2: this.moveState.back = 0; break;\n\t\t}\n\t\tthis.updateMovementVector();\n\t}\n\tthis.updateRotationVector();\n};\n\nflyCamera.prototype.update = function (delta) {\n\tif (!this.paused){\n\t\tthis.updateMovementVector();\n\t\tthis.updateRotationVector();\n\n\t\tdelta = delta / 1000;\n\n\t\tvar moveMult = delta * this.movementSpeed;\n\t\tvar rotMult  = delta * this.rollSpeed;\n\n\n\t\tglMatrix.vec3.scale( this.rotationVector, this.rotationVector, rotMult );\n\t\tthis.tmpQuaternion = glMatrix.quat.fromValues(this.rotationVector[0],this.rotationVector[1],this.rotationVector[2], 1);\n\t\tglMatrix.quat.normalize(this.tmpQuaternion,this.tmpQuaternion);\n\t\tglMatrix.quat.mul(this.quaternion, this.quaternion, this.tmpQuaternion);\n\n\t\tglMatrix.vec3.scale( this.moveVector, this.moveVector, moveMult );\n\t\tglMatrix.vec3.transformQuat( this.moveVector,  this.moveVector, this.quaternion );\n\t\tglMatrix.vec3.add( this.position, this.position, this.moveVector );\n\t}\n};\n\nflyCamera.prototype.updateMovementVector = function () {\n\tif (!this.paused){\n\t\tvar forward = ( this.moveState.forward || ( this.autoForward && !this.moveState.back ) ) ? 1 : 0;\n\t\tthis.moveVector = glMatrix.vec3.fromValues(\n\t\t\t-this.moveState.left    + this.moveState.right,\n\t\t\t-this.moveState.down    + this.moveState.up,\n\t\t\t-forward + this.moveState.back\n\t\t);\n\t}\n};\n\nflyCamera.prototype.updateRotationVector = function () {\n\tif (!this.paused){\n\t\tthis.rotationVector = glMatrix.vec3.fromValues(\n\t\t\t-this.moveState.pitchDown + this.moveState.pitchUp,\n\t\t\t-this.moveState.yawRight  + this.moveState.yawLeft,\n\t\t\t-this.moveState.rollRight + this.moveState.rollLeft\n\t\t);\n\t}\n};\n\nflyCamera.prototype.getContainerDimensions = function () {\n\tif ( this.domElement !== document ) {\n\t\treturn {\n\t\t\tsize  : [ this.domElement.offsetWidth, this.domElement.offsetHeight ],\n\t\t\toffset  : [ this.domElement.offsetLeft,  this.domElement.offsetTop ]\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\tsize  : [ window.innerWidth, window.innerHeight ],\n\t\t\toffset  : [ 0, 0 ]\n\t\t};\n\t}\n};\n\nflyCamera.prototype.start = function () {\n\tdocument.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); } );\n\tdocument.addEventListener( 'mousemove', this.mousemove.bind(this) );\n\tdocument.addEventListener( 'mousedown', this.mousedown.bind(this) );\n\tdocument.addEventListener( 'mouseup',   this.mouseup.bind(this) );\n\twindow.addEventListener( 'keydown', this.keydown.bind(this) );\n\twindow.addEventListener( 'keyup',   this.keyup.bind(this) );\n\tthis.updateMovementVector();\n\tthis.updateRotationVector();\n}\n\nmodule.exports = flyCamera;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-flyCamera/index.js\n// module id = 11\n// module chunks = 0","'use strict'\n\nvar createUniformWrapper   = require('./lib/create-uniforms')\nvar createAttributeWrapper = require('./lib/create-attributes')\nvar makeReflect            = require('./lib/reflect')\nvar shaderCache            = require('./lib/shader-cache')\nvar runtime                = require('./lib/runtime-reflect')\nvar GLError                = require(\"./lib/GLError\")\n\n//Shader object\nfunction Shader(gl) {\n  this.gl         = gl\n\n  //Default initialize these to null\n  this._vref      =\n  this._fref      =\n  this._relink    =\n  this.vertShader =\n  this.fragShader =\n  this.program    =\n  this.attributes =\n  this.uniforms   =\n  this.types      = null\n}\n\nvar proto = Shader.prototype\n\nproto.bind = function() {\n  if(!this.program) {\n    this._relink()\n  }\n  this.gl.useProgram(this.program)\n}\n\nproto.dispose = function() {\n  if(this._fref) {\n    this._fref.dispose()\n  }\n  if(this._vref) {\n    this._vref.dispose()\n  }\n  this.attributes =\n  this.types      =\n  this.vertShader =\n  this.fragShader =\n  this.program    =\n  this._relink    =\n  this._fref      =\n  this._vref      = null\n}\n\nfunction compareAttributes(a, b) {\n  if(a.name < b.name) {\n    return -1\n  }\n  return 1\n}\n\n//Update export hook for glslify-live\nproto.update = function(\n    vertSource\n  , fragSource\n  , uniforms\n  , attributes) {\n\n  //If only one object passed, assume glslify style output\n  if(!fragSource || arguments.length === 1) {\n    var obj = vertSource\n    vertSource = obj.vertex\n    fragSource = obj.fragment\n    uniforms   = obj.uniforms\n    attributes = obj.attributes\n  }\n\n  var wrapper = this\n  var gl      = wrapper.gl\n\n  //Compile vertex and fragment shaders\n  var pvref = wrapper._vref\n  wrapper._vref = shaderCache.shader(gl, gl.VERTEX_SHADER, vertSource)\n  if(pvref) {\n    pvref.dispose()\n  }\n  wrapper.vertShader = wrapper._vref.shader\n  var pfref = this._fref\n  wrapper._fref = shaderCache.shader(gl, gl.FRAGMENT_SHADER, fragSource)\n  if(pfref) {\n    pfref.dispose()\n  }\n  wrapper.fragShader = wrapper._fref.shader\n\n  //If uniforms/attributes is not specified, use RT reflection\n  if(!uniforms || !attributes) {\n\n    //Create initial test program\n    var testProgram = gl.createProgram()\n    gl.attachShader(testProgram, wrapper.fragShader)\n    gl.attachShader(testProgram, wrapper.vertShader)\n    gl.linkProgram(testProgram)\n    if(!gl.getProgramParameter(testProgram, gl.LINK_STATUS)) {\n      var errLog = gl.getProgramInfoLog(testProgram)\n      throw new GLError(errLog, 'Error linking program:' + errLog)\n    }\n\n    //Load data from runtime\n    uniforms   = uniforms   || runtime.uniforms(gl, testProgram)\n    attributes = attributes || runtime.attributes(gl, testProgram)\n\n    //Release test program\n    gl.deleteProgram(testProgram)\n  }\n\n  //Sort attributes lexicographically\n  // overrides undefined WebGL behavior for attribute locations\n  attributes = attributes.slice()\n  attributes.sort(compareAttributes)\n\n  //Convert attribute types, read out locations\n  var attributeUnpacked  = []\n  var attributeNames     = []\n  var attributeLocations = []\n  for(var i=0; i<attributes.length; ++i) {\n    var attr = attributes[i]\n    if(attr.type.indexOf('mat') >= 0) {\n      var size = attr.type.charAt(attr.type.length-1)|0\n      var locVector = new Array(size)\n      for(var j=0; j<size; ++j) {\n        locVector[j] = attributeLocations.length\n        attributeNames.push(attr.name + '[' + j + ']')\n        if(typeof attr.location === 'number') {\n          attributeLocations.push(attr.location + j)\n        } else if(Array.isArray(attr.location) &&\n                  attr.location.length === size &&\n                  typeof attr.location[j] === 'number') {\n          attributeLocations.push(attr.location[j]|0)\n        } else {\n          attributeLocations.push(-1)\n        }\n      }\n      attributeUnpacked.push({\n        name: attr.name,\n        type: attr.type,\n        locations: locVector\n      })\n    } else {\n      attributeUnpacked.push({\n        name: attr.name,\n        type: attr.type,\n        locations: [ attributeLocations.length ]\n      })\n      attributeNames.push(attr.name)\n      if(typeof attr.location === 'number') {\n        attributeLocations.push(attr.location|0)\n      } else {\n        attributeLocations.push(-1)\n      }\n    }\n  }\n\n  //For all unspecified attributes, assign them lexicographically min attribute\n  var curLocation = 0\n  for(var i=0; i<attributeLocations.length; ++i) {\n    if(attributeLocations[i] < 0) {\n      while(attributeLocations.indexOf(curLocation) >= 0) {\n        curLocation += 1\n      }\n      attributeLocations[i] = curLocation\n    }\n  }\n\n  //Rebuild program and recompute all uniform locations\n  var uniformLocations = new Array(uniforms.length)\n  function relink() {\n    wrapper.program = shaderCache.program(\n        gl\n      , wrapper._vref\n      , wrapper._fref\n      , attributeNames\n      , attributeLocations)\n\n    for(var i=0; i<uniforms.length; ++i) {\n      uniformLocations[i] = gl.getUniformLocation(\n          wrapper.program\n        , uniforms[i].name)\n    }\n  }\n\n  //Perform initial linking, reuse program used for reflection\n  relink()\n\n  //Save relinking procedure, defer until runtime\n  wrapper._relink = relink\n\n  //Generate type info\n  wrapper.types = {\n    uniforms:   makeReflect(uniforms),\n    attributes: makeReflect(attributes)\n  }\n\n  //Generate attribute wrappers\n  wrapper.attributes = createAttributeWrapper(\n      gl\n    , wrapper\n    , attributeUnpacked\n    , attributeLocations)\n\n  //Generate uniform wrappers\n  Object.defineProperty(wrapper, 'uniforms', createUniformWrapper(\n      gl\n    , wrapper\n    , uniforms\n    , uniformLocations))\n}\n\n//Compiles and links a shader program with the given attribute and vertex list\nfunction createShader(\n    gl\n  , vertSource\n  , fragSource\n  , uniforms\n  , attributes) {\n\n  var shader = new Shader(gl)\n\n  shader.update(\n      vertSource\n    , fragSource\n    , uniforms\n    , attributes)\n\n  return shader\n}\n\nmodule.exports = createShader\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-shader/index.js\n// module id = 12\n// module chunks = 0","module.exports = \"//Distance field functions found here : http://www.iquilezles.org/www/articles/distfunctions/distfunctions.html\\nprecision mediump float;\\n\\nuniform float uGlobalTime;\\nuniform vec2 uResolution;\\n\\nuniform vec3 uCamPosition;\\nuniform vec3 uCamDir;\\nuniform vec3 uCamUp;\\n\\nvarying vec2 uv;\\n#define FieldOfView 1.0\\n\\n//-----------------Operation functions--------------------\\n\\n//Union operation (d1 + d2)\\nfloat opU(float d1, float d2)\\n{\\n\\treturn min(d1,d2);   \\n}\\n\\n//Subtraction operation (d1 - d2)\\nfloat opS(float d1, float d2)\\n{\\n\\treturn max(-d1,d2);   \\n}\\n\\n//Intersection operation (only shows the primitives that intersect)\\nfloat opI(float d1, float d2)\\n{\\n\\treturn max(d1,d2);\\n}\\n\\n//Changes the colour based on it's distance from the camera\\nfloat opFog(float p)\\n{\\n\\treturn 1.0 / (1.0 * p * p * 0.05);   \\n}\\n\\n//Repeats the primitive across the coordinate space (p = point along ray, c = dimensions of repetition)\\nvec3 opRepeat(vec3 p, vec3 c)\\n{\\n\\tvec3 q = mod(p,c) - 0.5 * c;\\n\\treturn q;\\n}\\n\\n//-----------------Distance field functions--------------------\\n\\n//Distance field function for a torus primitive (p = point along ray, t = dimesions of torus (inner radius, outer radius))\\nfloat rTorus(vec3 p, vec2 t)\\n{\\n\\tvec3 q = fract(p) * 2.0 - 1.0;\\n\\t\\n\\tvec2 s = vec2(length(q.xz) - t.x,q.y);\\n\\treturn length(s)-t.y;\\n}\\n//-----------------Main functions--------------------\\n\\n//Main tracing function that maps the distances of each pixel\\nfloat trace(vec3 ro, vec3 rt)\\n{\\n\\tfloat t = 0.0;\\n\\t\\n\\t//Loop through (in this case 32 times)\\n\\tfor(int i = 0; i < 32; ++i)\\n\\t{\\n\\t\\t//Get the point along the ray\\n\\t\\tvec3 p = ro + rt * t;\\n\\n\\t\\tfloat n = abs(sin(uGlobalTime));\\n\\t\\tp.y *= n;\\n\\t\\t//Get the value for the distance field\\n\\t\\tfloat d = rTorus(p, vec2(1.0, -0.1));\\n\\n\\t\\tt += d * 0.5;\\n\\t}\\n\\treturn t;\\n}\\n\\nvoid main()\\n{\\n\\n\\tvec2 coord = uv;\\n\\tcoord.x *= uResolution.x / uResolution.y;\\n\\n\\n\\t// Camera position (eye), and camera target\\n\\tvec3 camPos = vec3(uCamPosition.x,uCamPosition.y,uCamPosition.z);\\n\\tvec3 target = camPos+vec3(uCamDir.x,uCamDir.y,uCamDir.z);\\n\\tvec3 camUp  = vec3(uCamUp.x,uCamUp.y,uCamUp.z);\\n\\t\\n\\t// Calculate orthonormal camera reference system\\n\\tvec3 camDir   = normalize(target-camPos); // direction for center ray\\n\\tcamUp = normalize(camUp-dot(camDir,camUp)*camDir); // orthogonalize\\n\\tvec3 camRight = normalize(cross(camDir,camUp));\\n\\t\\n\\t\\n\\t// Get direction for this pixel\\n\\tvec3 rayDir = normalize(camDir + (coord.x*camRight + coord.y*camUp)*FieldOfView);\\n\\n\\t//Call the main trace function and get a value\\n\\tfloat t = trace(camPos,rayDir);\\n\\n\\t//Call the fogging function to apply some depth to the image\\n\\tt = opFog(t);\\n\\n\\tgl_FragColor = vec4(t,0.0,0.0,1.0);\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./shaders/scene.frag\n// module id = 13\n// module chunks = 0","module.exports = \"precision mediump float;\\n\\nattribute vec2 position;\\n\\nvarying vec2 uv;\\n\\nvoid main() {\\n\\tgl_Position = vec4(position, 0, 1);\\n\\tuv = position.xy;\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./shaders/scene.vert\n// module id = 14\n// module chunks = 0","// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/stats.js/build/stats.min.js\n// module id = 15\n// module chunks = 0","var padLeft = require('pad-left')\n\nmodule.exports = addLineNumbers\nfunction addLineNumbers (string, start, delim) {\n  start = typeof start === 'number' ? start : 1\n  delim = delim || ': '\n\n  var lines = string.split(/\\r?\\n/)\n  var totalDigits = String(lines.length + start - 1).length\n  return lines.map(function (line, i) {\n    var c = i + start\n    var digits = String(c).length\n    var prefix = padLeft(c, totalDigits - digits)\n    return prefix + delim + line\n  }).join('\\n')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/add-line-numbers/index.js\n// module id = 16\n// module chunks = 0","module.exports = function _atob(str) {\n  return atob(str)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/atob-lite/atob-browser.js\n// module id = 17\n// module chunks = 0","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/base64-js/index.js\n// module id = 18\n// module chunks = 0","/**\n * Bit twiddling hacks for JavaScript.\n *\n * Author: Mikola Lysenko\n *\n * Ported from Stanford bit twiddling hack library:\n *    http://graphics.stanford.edu/~seander/bithacks.html\n */\n\n\"use strict\"; \"use restrict\";\n\n//Number of bits in an integer\nvar INT_BITS = 32;\n\n//Constants\nexports.INT_BITS  = INT_BITS;\nexports.INT_MAX   =  0x7fffffff;\nexports.INT_MIN   = -1<<(INT_BITS-1);\n\n//Returns -1, 0, +1 depending on sign of x\nexports.sign = function(v) {\n  return (v > 0) - (v < 0);\n}\n\n//Computes absolute value of integer\nexports.abs = function(v) {\n  var mask = v >> (INT_BITS-1);\n  return (v ^ mask) - mask;\n}\n\n//Computes minimum of integers x and y\nexports.min = function(x, y) {\n  return y ^ ((x ^ y) & -(x < y));\n}\n\n//Computes maximum of integers x and y\nexports.max = function(x, y) {\n  return x ^ ((x ^ y) & -(x < y));\n}\n\n//Checks if a number is a power of two\nexports.isPow2 = function(v) {\n  return !(v & (v-1)) && (!!v);\n}\n\n//Computes log base 2 of v\nexports.log2 = function(v) {\n  var r, shift;\n  r =     (v > 0xFFFF) << 4; v >>>= r;\n  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;\n  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;\n  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;\n  return r | (v >> 1);\n}\n\n//Computes log base 10 of v\nexports.log10 = function(v) {\n  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :\n          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :\n          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;\n}\n\n//Counts number of bits\nexports.popCount = function(v) {\n  v = v - ((v >>> 1) & 0x55555555);\n  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);\n  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;\n}\n\n//Counts number of trailing zeros\nfunction countTrailingZeros(v) {\n  var c = 32;\n  v &= -v;\n  if (v) c--;\n  if (v & 0x0000FFFF) c -= 16;\n  if (v & 0x00FF00FF) c -= 8;\n  if (v & 0x0F0F0F0F) c -= 4;\n  if (v & 0x33333333) c -= 2;\n  if (v & 0x55555555) c -= 1;\n  return c;\n}\nexports.countTrailingZeros = countTrailingZeros;\n\n//Rounds to next power of 2\nexports.nextPow2 = function(v) {\n  v += v === 0;\n  --v;\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v + 1;\n}\n\n//Rounds down to previous power of 2\nexports.prevPow2 = function(v) {\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v - (v>>>1);\n}\n\n//Computes parity of word\nexports.parity = function(v) {\n  v ^= v >>> 16;\n  v ^= v >>> 8;\n  v ^= v >>> 4;\n  v &= 0xf;\n  return (0x6996 >>> v) & 1;\n}\n\nvar REVERSE_TABLE = new Array(256);\n\n(function(tab) {\n  for(var i=0; i<256; ++i) {\n    var v = i, r = i, s = 7;\n    for (v >>>= 1; v; v >>>= 1) {\n      r <<= 1;\n      r |= v & 1;\n      --s;\n    }\n    tab[i] = (r << s) & 0xff;\n  }\n})(REVERSE_TABLE);\n\n//Reverse bits in a 32 bit word\nexports.reverse = function(v) {\n  return  (REVERSE_TABLE[ v         & 0xff] << 24) |\n          (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |\n          (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |\n           REVERSE_TABLE[(v >>> 24) & 0xff];\n}\n\n//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes\nexports.interleave2 = function(x, y) {\n  x &= 0xFFFF;\n  x = (x | (x << 8)) & 0x00FF00FF;\n  x = (x | (x << 4)) & 0x0F0F0F0F;\n  x = (x | (x << 2)) & 0x33333333;\n  x = (x | (x << 1)) & 0x55555555;\n\n  y &= 0xFFFF;\n  y = (y | (y << 8)) & 0x00FF00FF;\n  y = (y | (y << 4)) & 0x0F0F0F0F;\n  y = (y | (y << 2)) & 0x33333333;\n  y = (y | (y << 1)) & 0x55555555;\n\n  return x | (y << 1);\n}\n\n//Extracts the nth interleaved component\nexports.deinterleave2 = function(v, n) {\n  v = (v >>> n) & 0x55555555;\n  v = (v | (v >>> 1))  & 0x33333333;\n  v = (v | (v >>> 2))  & 0x0F0F0F0F;\n  v = (v | (v >>> 4))  & 0x00FF00FF;\n  v = (v | (v >>> 16)) & 0x000FFFF;\n  return (v << 16) >> 16;\n}\n\n\n//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes\nexports.interleave3 = function(x, y, z) {\n  x &= 0x3FF;\n  x  = (x | (x<<16)) & 4278190335;\n  x  = (x | (x<<8))  & 251719695;\n  x  = (x | (x<<4))  & 3272356035;\n  x  = (x | (x<<2))  & 1227133513;\n\n  y &= 0x3FF;\n  y  = (y | (y<<16)) & 4278190335;\n  y  = (y | (y<<8))  & 251719695;\n  y  = (y | (y<<4))  & 3272356035;\n  y  = (y | (y<<2))  & 1227133513;\n  x |= (y << 1);\n  \n  z &= 0x3FF;\n  z  = (z | (z<<16)) & 4278190335;\n  z  = (z | (z<<8))  & 251719695;\n  z  = (z | (z<<4))  & 3272356035;\n  z  = (z | (z<<2))  & 1227133513;\n  \n  return x | (z << 2);\n}\n\n//Extracts nth interleaved component of a 3-tuple\nexports.deinterleave3 = function(v, n) {\n  v = (v >>> n)       & 1227133513;\n  v = (v | (v>>>2))   & 3272356035;\n  v = (v | (v>>>4))   & 251719695;\n  v = (v | (v>>>8))   & 4278190335;\n  v = (v | (v>>>16))  & 0x3FF;\n  return (v<<22)>>22;\n}\n\n//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)\nexports.nextCombination = function(v) {\n  var t = v | (v - 1);\n  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bit-twiddle/twiddle.js\n// module id = 19\n// module chunks = 0","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/buffer/index.js\n// module id = 20\n// module chunks = 0","\"use strict\"\r\n\r\nvar createThunk = require(\"./lib/thunk.js\")\r\n\r\nfunction Procedure() {\r\n  this.argTypes = []\r\n  this.shimArgs = []\r\n  this.arrayArgs = []\r\n  this.arrayBlockIndices = []\r\n  this.scalarArgs = []\r\n  this.offsetArgs = []\r\n  this.offsetArgIndex = []\r\n  this.indexArgs = []\r\n  this.shapeArgs = []\r\n  this.funcName = \"\"\r\n  this.pre = null\r\n  this.body = null\r\n  this.post = null\r\n  this.debug = false\r\n}\r\n\r\nfunction compileCwise(user_args) {\r\n  //Create procedure\r\n  var proc = new Procedure()\r\n  \r\n  //Parse blocks\r\n  proc.pre    = user_args.pre\r\n  proc.body   = user_args.body\r\n  proc.post   = user_args.post\r\n\r\n  //Parse arguments\r\n  var proc_args = user_args.args.slice(0)\r\n  proc.argTypes = proc_args\r\n  for(var i=0; i<proc_args.length; ++i) {\r\n    var arg_type = proc_args[i]\r\n    if(arg_type === \"array\" || (typeof arg_type === \"object\" && arg_type.blockIndices)) {\r\n      proc.argTypes[i] = \"array\"\r\n      proc.arrayArgs.push(i)\r\n      proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0)\r\n      proc.shimArgs.push(\"array\" + i)\r\n      if(i < proc.pre.args.length && proc.pre.args[i].count>0) {\r\n        throw new Error(\"cwise: pre() block may not reference array args\")\r\n      }\r\n      if(i < proc.post.args.length && proc.post.args[i].count>0) {\r\n        throw new Error(\"cwise: post() block may not reference array args\")\r\n      }\r\n    } else if(arg_type === \"scalar\") {\r\n      proc.scalarArgs.push(i)\r\n      proc.shimArgs.push(\"scalar\" + i)\r\n    } else if(arg_type === \"index\") {\r\n      proc.indexArgs.push(i)\r\n      if(i < proc.pre.args.length && proc.pre.args[i].count > 0) {\r\n        throw new Error(\"cwise: pre() block may not reference array index\")\r\n      }\r\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\r\n        throw new Error(\"cwise: body() block may not write to array index\")\r\n      }\r\n      if(i < proc.post.args.length && proc.post.args[i].count > 0) {\r\n        throw new Error(\"cwise: post() block may not reference array index\")\r\n      }\r\n    } else if(arg_type === \"shape\") {\r\n      proc.shapeArgs.push(i)\r\n      if(i < proc.pre.args.length && proc.pre.args[i].lvalue) {\r\n        throw new Error(\"cwise: pre() block may not write to array shape\")\r\n      }\r\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\r\n        throw new Error(\"cwise: body() block may not write to array shape\")\r\n      }\r\n      if(i < proc.post.args.length && proc.post.args[i].lvalue) {\r\n        throw new Error(\"cwise: post() block may not write to array shape\")\r\n      }\r\n    } else if(typeof arg_type === \"object\" && arg_type.offset) {\r\n      proc.argTypes[i] = \"offset\"\r\n      proc.offsetArgs.push({ array: arg_type.array, offset:arg_type.offset })\r\n      proc.offsetArgIndex.push(i)\r\n    } else {\r\n      throw new Error(\"cwise: Unknown argument type \" + proc_args[i])\r\n    }\r\n  }\r\n  \r\n  //Make sure at least one array argument was specified\r\n  if(proc.arrayArgs.length <= 0) {\r\n    throw new Error(\"cwise: No array arguments specified\")\r\n  }\r\n  \r\n  //Make sure arguments are correct\r\n  if(proc.pre.args.length > proc_args.length) {\r\n    throw new Error(\"cwise: Too many arguments in pre() block\")\r\n  }\r\n  if(proc.body.args.length > proc_args.length) {\r\n    throw new Error(\"cwise: Too many arguments in body() block\")\r\n  }\r\n  if(proc.post.args.length > proc_args.length) {\r\n    throw new Error(\"cwise: Too many arguments in post() block\")\r\n  }\r\n\r\n  //Check debug flag\r\n  proc.debug = !!user_args.printCode || !!user_args.debug\r\n  \r\n  //Retrieve name\r\n  proc.funcName = user_args.funcName || \"cwise\"\r\n  \r\n  //Read in block size\r\n  proc.blockSize = user_args.blockSize || 64\r\n\r\n  return createThunk(proc)\r\n}\r\n\r\nmodule.exports = compileCwise\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cwise-compiler/compiler.js\n// module id = 21\n// module chunks = 0","\"use strict\"\r\n\r\nvar uniq = require(\"uniq\")\r\n\r\n// This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)\r\n// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of \"pointers\" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.\r\nfunction innerFill(order, proc, body) {\r\n  var dimension = order.length\r\n    , nargs = proc.arrayArgs.length\r\n    , has_index = proc.indexArgs.length>0\r\n    , code = []\r\n    , vars = []\r\n    , idx=0, pidx=0, i, j\r\n  for(i=0; i<dimension; ++i) { // Iteration variables\r\n    vars.push([\"i\",i,\"=0\"].join(\"\"))\r\n  }\r\n  //Compute scan deltas\r\n  for(j=0; j<nargs; ++j) {\r\n    for(i=0; i<dimension; ++i) {\r\n      pidx = idx\r\n      idx = order[i]\r\n      if(i === 0) { // The innermost/fastest dimension's delta is simply its stride\r\n        vars.push([\"d\",j,\"s\",i,\"=t\",j,\"p\",idx].join(\"\"))\r\n      } else { // For other dimensions the delta is basically the stride minus something which essentially \"rewinds\" the previous (more inner) dimension\r\n        vars.push([\"d\",j,\"s\",i,\"=(t\",j,\"p\",idx,\"-s\",pidx,\"*t\",j,\"p\",pidx,\")\"].join(\"\"))\r\n      }\r\n    }\r\n  }\r\n  code.push(\"var \" + vars.join(\",\"))\r\n  //Scan loop\r\n  for(i=dimension-1; i>=0; --i) { // Start at largest stride and work your way inwards\r\n    idx = order[i]\r\n    code.push([\"for(i\",i,\"=0;i\",i,\"<s\",idx,\";++i\",i,\"){\"].join(\"\"))\r\n  }\r\n  //Push body of inner loop\r\n  code.push(body)\r\n  //Advance scan pointers\r\n  for(i=0; i<dimension; ++i) {\r\n    pidx = idx\r\n    idx = order[i]\r\n    for(j=0; j<nargs; ++j) {\r\n      code.push([\"p\",j,\"+=d\",j,\"s\",i].join(\"\"))\r\n    }\r\n    if(has_index) {\r\n      if(i > 0) {\r\n        code.push([\"index[\",pidx,\"]-=s\",pidx].join(\"\"))\r\n      }\r\n      code.push([\"++index[\",idx,\"]\"].join(\"\"))\r\n    }\r\n    code.push(\"}\")\r\n  }\r\n  return code.join(\"\\n\")\r\n}\r\n\r\n// Generate \"outer\" loops that loop over blocks of data, applying \"inner\" loops to the blocks by manipulating the local variables in such a way that the inner loop only \"sees\" the current block.\r\n// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.\r\n//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and \"shape\" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.\r\nfunction outerFill(matched, order, proc, body) {\r\n  var dimension = order.length\r\n    , nargs = proc.arrayArgs.length\r\n    , blockSize = proc.blockSize\r\n    , has_index = proc.indexArgs.length > 0\r\n    , code = []\r\n  for(var i=0; i<nargs; ++i) {\r\n    code.push([\"var offset\",i,\"=p\",i].join(\"\"))\r\n  }\r\n  //Generate loops for unmatched dimensions\r\n  // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)\r\n  // TODO: It would be nice if the order in which these loops are placed would also be somehow \"optimal\" (at the very least we should check that it really doesn't hurt us if they're not).\r\n  for(var i=matched; i<dimension; ++i) {\r\n    code.push([\"for(var j\"+i+\"=SS[\", order[i], \"]|0;j\", i, \">0;){\"].join(\"\")) // Iterate back to front\r\n    code.push([\"if(j\",i,\"<\",blockSize,\"){\"].join(\"\")) // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).\r\n    code.push([\"s\",order[i],\"=j\",i].join(\"\"))\r\n    code.push([\"j\",i,\"=0\"].join(\"\"))\r\n    code.push([\"}else{s\",order[i],\"=\",blockSize].join(\"\"))\r\n    code.push([\"j\",i,\"-=\",blockSize,\"}\"].join(\"\"))\r\n    if(has_index) {\r\n      code.push([\"index[\",order[i],\"]=j\",i].join(\"\"))\r\n    }\r\n  }\r\n  for(var i=0; i<nargs; ++i) {\r\n    var indexStr = [\"offset\"+i]\r\n    for(var j=matched; j<dimension; ++j) {\r\n      indexStr.push([\"j\",j,\"*t\",i,\"p\",order[j]].join(\"\"))\r\n    }\r\n    code.push([\"p\",i,\"=(\",indexStr.join(\"+\"),\")\"].join(\"\"))\r\n  }\r\n  code.push(innerFill(order, proc, body))\r\n  for(var i=matched; i<dimension; ++i) {\r\n    code.push(\"}\")\r\n  }\r\n  return code.join(\"\\n\")\r\n}\r\n\r\n//Count the number of compatible inner orders\r\n// This is the length of the longest common prefix of the arrays in orders.\r\n// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.\r\n// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.\r\nfunction countMatches(orders) {\r\n  var matched = 0, dimension = orders[0].length\r\n  while(matched < dimension) {\r\n    for(var j=1; j<orders.length; ++j) {\r\n      if(orders[j][matched] !== orders[0][matched]) {\r\n        return matched\r\n      }\r\n    }\r\n    ++matched\r\n  }\r\n  return matched\r\n}\r\n\r\n//Processes a block according to the given data types\r\n// Replaces variable names by different ones, either \"local\" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.\r\nfunction processBlock(block, proc, dtypes) {\r\n  var code = block.body\r\n  var pre = []\r\n  var post = []\r\n  for(var i=0; i<block.args.length; ++i) {\r\n    var carg = block.args[i]\r\n    if(carg.count <= 0) {\r\n      continue\r\n    }\r\n    var re = new RegExp(carg.name, \"g\")\r\n    var ptrStr = \"\"\r\n    var arrNum = proc.arrayArgs.indexOf(i)\r\n    switch(proc.argTypes[i]) {\r\n      case \"offset\":\r\n        var offArgIndex = proc.offsetArgIndex.indexOf(i)\r\n        var offArg = proc.offsetArgs[offArgIndex]\r\n        arrNum = offArg.array\r\n        ptrStr = \"+q\" + offArgIndex // Adds offset to the \"pointer\" in the array\r\n      case \"array\":\r\n        ptrStr = \"p\" + arrNum + ptrStr\r\n        var localStr = \"l\" + i\r\n        var arrStr = \"a\" + arrNum\r\n        if (proc.arrayBlockIndices[arrNum] === 0) { // Argument to body is just a single value from this array\r\n          if(carg.count === 1) { // Argument/array used only once(?)\r\n            if(dtypes[arrNum] === \"generic\") {\r\n              if(carg.lvalue) {\r\n                pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\r\n                code = code.replace(re, localStr)\r\n                post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\r\n              } else {\r\n                code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\r\n              }\r\n            } else {\r\n              code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\r\n            }\r\n          } else if(dtypes[arrNum] === \"generic\") {\r\n            pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\r\n            code = code.replace(re, localStr)\r\n            if(carg.lvalue) {\r\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\r\n            }\r\n          } else {\r\n            pre.push([\"var \", localStr, \"=\", arrStr, \"[\", ptrStr, \"]\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\r\n            code = code.replace(re, localStr)\r\n            if(carg.lvalue) {\r\n              post.push([arrStr, \"[\", ptrStr, \"]=\", localStr].join(\"\"))\r\n            }\r\n          }\r\n        } else { // Argument to body is a \"block\"\r\n          var reStrArr = [carg.name], ptrStrArr = [ptrStr]\r\n          for(var j=0; j<Math.abs(proc.arrayBlockIndices[arrNum]); j++) {\r\n            reStrArr.push(\"\\\\s*\\\\[([^\\\\]]+)\\\\]\")\r\n            ptrStrArr.push(\"$\" + (j+1) + \"*t\" + arrNum + \"b\" + j) // Matched index times stride\r\n          }\r\n          re = new RegExp(reStrArr.join(\"\"), \"g\")\r\n          ptrStr = ptrStrArr.join(\"+\")\r\n          if(dtypes[arrNum] === \"generic\") {\r\n            /*if(carg.lvalue) {\r\n              pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\r\n              code = code.replace(re, localStr)\r\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\r\n            } else {\r\n              code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\r\n            }*/\r\n            throw new Error(\"cwise: Generic arrays not supported in combination with blocks!\")\r\n          } else {\r\n            // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.\r\n            code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\r\n          }\r\n        }\r\n      break\r\n      case \"scalar\":\r\n        code = code.replace(re, \"Y\" + proc.scalarArgs.indexOf(i))\r\n      break\r\n      case \"index\":\r\n        code = code.replace(re, \"index\")\r\n      break\r\n      case \"shape\":\r\n        code = code.replace(re, \"shape\")\r\n      break\r\n    }\r\n  }\r\n  return [pre.join(\"\\n\"), code, post.join(\"\\n\")].join(\"\\n\").trim()\r\n}\r\n\r\nfunction typeSummary(dtypes) {\r\n  var summary = new Array(dtypes.length)\r\n  var allEqual = true\r\n  for(var i=0; i<dtypes.length; ++i) {\r\n    var t = dtypes[i]\r\n    var digits = t.match(/\\d+/)\r\n    if(!digits) {\r\n      digits = \"\"\r\n    } else {\r\n      digits = digits[0]\r\n    }\r\n    if(t.charAt(0) === 0) {\r\n      summary[i] = \"u\" + t.charAt(1) + digits\r\n    } else {\r\n      summary[i] = t.charAt(0) + digits\r\n    }\r\n    if(i > 0) {\r\n      allEqual = allEqual && summary[i] === summary[i-1]\r\n    }\r\n  }\r\n  if(allEqual) {\r\n    return summary[0]\r\n  }\r\n  return summary.join(\"\")\r\n}\r\n\r\n//Generates a cwise operator\r\nfunction generateCWiseOp(proc, typesig) {\r\n\r\n  //Compute dimension\r\n  // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.\r\n  var dimension = (typesig[1].length - Math.abs(proc.arrayBlockIndices[0]))|0\r\n  var orders = new Array(proc.arrayArgs.length)\r\n  var dtypes = new Array(proc.arrayArgs.length)\r\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\r\n    dtypes[i] = typesig[2*i]\r\n    orders[i] = typesig[2*i+1]\r\n  }\r\n  \r\n  //Determine where block and loop indices start and end\r\n  var blockBegin = [], blockEnd = [] // These indices are exposed as blocks\r\n  var loopBegin = [], loopEnd = [] // These indices are iterated over\r\n  var loopOrders = [] // orders restricted to the loop indices\r\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\r\n    if (proc.arrayBlockIndices[i]<0) {\r\n      loopBegin.push(0)\r\n      loopEnd.push(dimension)\r\n      blockBegin.push(dimension)\r\n      blockEnd.push(dimension+proc.arrayBlockIndices[i])\r\n    } else {\r\n      loopBegin.push(proc.arrayBlockIndices[i]) // Non-negative\r\n      loopEnd.push(proc.arrayBlockIndices[i]+dimension)\r\n      blockBegin.push(0)\r\n      blockEnd.push(proc.arrayBlockIndices[i])\r\n    }\r\n    var newOrder = []\r\n    for(var j=0; j<orders[i].length; j++) {\r\n      if (loopBegin[i]<=orders[i][j] && orders[i][j]<loopEnd[i]) {\r\n        newOrder.push(orders[i][j]-loopBegin[i]) // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.\r\n      }\r\n    }\r\n    loopOrders.push(newOrder)\r\n  }\r\n\r\n  //First create arguments for procedure\r\n  var arglist = [\"SS\"] // SS is the overall shape over which we iterate\r\n  var code = [\"'use strict'\"]\r\n  var vars = []\r\n  \r\n  for(var j=0; j<dimension; ++j) {\r\n    vars.push([\"s\", j, \"=SS[\", j, \"]\"].join(\"\")) // The limits for each dimension.\r\n  }\r\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\r\n    arglist.push(\"a\"+i) // Actual data array\r\n    arglist.push(\"t\"+i) // Strides\r\n    arglist.push(\"p\"+i) // Offset in the array at which the data starts (also used for iterating over the data)\r\n    \r\n    for(var j=0; j<dimension; ++j) { // Unpack the strides into vars for looping\r\n      vars.push([\"t\",i,\"p\",j,\"=t\",i,\"[\",loopBegin[i]+j,\"]\"].join(\"\"))\r\n    }\r\n    \r\n    for(var j=0; j<Math.abs(proc.arrayBlockIndices[i]); ++j) { // Unpack the strides into vars for block iteration\r\n      vars.push([\"t\",i,\"b\",j,\"=t\",i,\"[\",blockBegin[i]+j,\"]\"].join(\"\"))\r\n    }\r\n  }\r\n  for(var i=0; i<proc.scalarArgs.length; ++i) {\r\n    arglist.push(\"Y\" + i)\r\n  }\r\n  if(proc.shapeArgs.length > 0) {\r\n    vars.push(\"shape=SS.slice(0)\") // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)\r\n  }\r\n  if(proc.indexArgs.length > 0) {\r\n    // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.\r\n    var zeros = new Array(dimension)\r\n    for(var i=0; i<dimension; ++i) {\r\n      zeros[i] = \"0\"\r\n    }\r\n    vars.push([\"index=[\", zeros.join(\",\"), \"]\"].join(\"\"))\r\n  }\r\n  for(var i=0; i<proc.offsetArgs.length; ++i) { // Offset arguments used for stencil operations\r\n    var off_arg = proc.offsetArgs[i]\r\n    var init_string = []\r\n    for(var j=0; j<off_arg.offset.length; ++j) {\r\n      if(off_arg.offset[j] === 0) {\r\n        continue\r\n      } else if(off_arg.offset[j] === 1) {\r\n        init_string.push([\"t\", off_arg.array, \"p\", j].join(\"\"))      \r\n      } else {\r\n        init_string.push([off_arg.offset[j], \"*t\", off_arg.array, \"p\", j].join(\"\"))\r\n      }\r\n    }\r\n    if(init_string.length === 0) {\r\n      vars.push(\"q\" + i + \"=0\")\r\n    } else {\r\n      vars.push([\"q\", i, \"=\", init_string.join(\"+\")].join(\"\"))\r\n    }\r\n  }\r\n\r\n  //Prepare this variables\r\n  var thisVars = uniq([].concat(proc.pre.thisVars)\r\n                      .concat(proc.body.thisVars)\r\n                      .concat(proc.post.thisVars))\r\n  vars = vars.concat(thisVars)\r\n  code.push(\"var \" + vars.join(\",\"))\r\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\r\n    code.push(\"p\"+i+\"|=0\")\r\n  }\r\n  \r\n  //Inline prelude\r\n  if(proc.pre.body.length > 3) {\r\n    code.push(processBlock(proc.pre, proc, dtypes))\r\n  }\r\n\r\n  //Process body\r\n  var body = processBlock(proc.body, proc, dtypes)\r\n  var matched = countMatches(loopOrders)\r\n  if(matched < dimension) {\r\n    code.push(outerFill(matched, loopOrders[0], proc, body)) // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.\r\n  } else {\r\n    code.push(innerFill(loopOrders[0], proc, body))\r\n  }\r\n\r\n  //Inline epilog\r\n  if(proc.post.body.length > 3) {\r\n    code.push(processBlock(proc.post, proc, dtypes))\r\n  }\r\n  \r\n  if(proc.debug) {\r\n    console.log(\"-----Generated cwise routine for \", typesig, \":\\n\" + code.join(\"\\n\") + \"\\n----------\")\r\n  }\r\n  \r\n  var loopName = [(proc.funcName||\"unnamed\"), \"_cwise_loop_\", orders[0].join(\"s\"),\"m\",matched,typeSummary(dtypes)].join(\"\")\r\n  var f = new Function([\"function \",loopName,\"(\", arglist.join(\",\"),\"){\", code.join(\"\\n\"),\"} return \", loopName].join(\"\"))\r\n  return f()\r\n}\r\nmodule.exports = generateCWiseOp\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cwise-compiler/lib/compile.js\n// module id = 22\n// module chunks = 0","\"use strict\"\r\n\r\n// The function below is called when constructing a cwise function object, and does the following:\r\n// A function object is constructed which accepts as argument a compilation function and returns another function.\r\n// It is this other function that is eventually returned by createThunk, and this function is the one that actually\r\n// checks whether a certain pattern of arguments has already been used before and compiles new loops as needed.\r\n// The compilation passed to the first function object is used for compiling new functions.\r\n// Once this function object is created, it is called with compile as argument, where the first argument of compile\r\n// is bound to \"proc\" (essentially containing a preprocessed version of the user arguments to cwise).\r\n// So createThunk roughly works like this:\r\n// function createThunk(proc) {\r\n//   var thunk = function(compileBound) {\r\n//     var CACHED = {}\r\n//     return function(arrays and scalars) {\r\n//       if (dtype and order of arrays in CACHED) {\r\n//         var func = CACHED[dtype and order of arrays]\r\n//       } else {\r\n//         var func = CACHED[dtype and order of arrays] = compileBound(dtype and order of arrays)\r\n//       }\r\n//       return func(arrays and scalars)\r\n//     }\r\n//   }\r\n//   return thunk(compile.bind1(proc))\r\n// }\r\n\r\nvar compile = require(\"./compile.js\")\r\n\r\nfunction createThunk(proc) {\r\n  var code = [\"'use strict'\", \"var CACHED={}\"]\r\n  var vars = []\r\n  var thunkName = proc.funcName + \"_cwise_thunk\"\r\n  \r\n  //Build thunk\r\n  code.push([\"return function \", thunkName, \"(\", proc.shimArgs.join(\",\"), \"){\"].join(\"\"))\r\n  var typesig = []\r\n  var string_typesig = []\r\n  var proc_args = [[\"array\",proc.arrayArgs[0],\".shape.slice(\", // Slice shape so that we only retain the shape over which we iterate (which gets passed to the cwise operator as SS).\r\n                    Math.max(0,proc.arrayBlockIndices[0]),proc.arrayBlockIndices[0]<0?(\",\"+proc.arrayBlockIndices[0]+\")\"):\")\"].join(\"\")]\r\n  var shapeLengthConditions = [], shapeConditions = []\r\n  // Process array arguments\r\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\r\n    var j = proc.arrayArgs[i]\r\n    vars.push([\"t\", j, \"=array\", j, \".dtype,\",\r\n               \"r\", j, \"=array\", j, \".order\"].join(\"\"))\r\n    typesig.push(\"t\" + j)\r\n    typesig.push(\"r\" + j)\r\n    string_typesig.push(\"t\"+j)\r\n    string_typesig.push(\"r\"+j+\".join()\")\r\n    proc_args.push(\"array\" + j + \".data\")\r\n    proc_args.push(\"array\" + j + \".stride\")\r\n    proc_args.push(\"array\" + j + \".offset|0\")\r\n    if (i>0) { // Gather conditions to check for shape equality (ignoring block indices)\r\n      shapeLengthConditions.push(\"array\" + proc.arrayArgs[0] + \".shape.length===array\" + j + \".shape.length+\" + (Math.abs(proc.arrayBlockIndices[0])-Math.abs(proc.arrayBlockIndices[i])))\r\n      shapeConditions.push(\"array\" + proc.arrayArgs[0] + \".shape[shapeIndex+\" + Math.max(0,proc.arrayBlockIndices[0]) + \"]===array\" + j + \".shape[shapeIndex+\" + Math.max(0,proc.arrayBlockIndices[i]) + \"]\")\r\n    }\r\n  }\r\n  // Check for shape equality\r\n  if (proc.arrayArgs.length > 1) {\r\n    code.push(\"if (!(\" + shapeLengthConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same dimensionality!')\")\r\n    code.push(\"for(var shapeIndex=array\" + proc.arrayArgs[0] + \".shape.length-\" + Math.abs(proc.arrayBlockIndices[0]) + \"; shapeIndex-->0;) {\")\r\n    code.push(\"if (!(\" + shapeConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same shape!')\")\r\n    code.push(\"}\")\r\n  }\r\n  // Process scalar arguments\r\n  for(var i=0; i<proc.scalarArgs.length; ++i) {\r\n    proc_args.push(\"scalar\" + proc.scalarArgs[i])\r\n  }\r\n  // Check for cached function (and if not present, generate it)\r\n  vars.push([\"type=[\", string_typesig.join(\",\"), \"].join()\"].join(\"\"))\r\n  vars.push(\"proc=CACHED[type]\")\r\n  code.push(\"var \" + vars.join(\",\"))\r\n  \r\n  code.push([\"if(!proc){\",\r\n             \"CACHED[type]=proc=compile([\", typesig.join(\",\"), \"])}\",\r\n             \"return proc(\", proc_args.join(\",\"), \")}\"].join(\"\"))\r\n\r\n  if(proc.debug) {\r\n    console.log(\"-----Generated thunk:\\n\" + code.join(\"\\n\") + \"\\n----------\")\r\n  }\r\n  \r\n  //Compile thunk\r\n  var thunk = new Function(\"compile\", code.join(\"\\n\"))\r\n  return thunk(compile.bind(undefined, proc))\r\n}\r\n\r\nmodule.exports = createThunk\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cwise-compiler/lib/thunk.js\n// module id = 23\n// module chunks = 0","\"use strict\"\n\nfunction dupe_array(count, value, i) {\n  var c = count[i]|0\n  if(c <= 0) {\n    return []\n  }\n  var result = new Array(c), j\n  if(i === count.length-1) {\n    for(j=0; j<c; ++j) {\n      result[j] = value\n    }\n  } else {\n    for(j=0; j<c; ++j) {\n      result[j] = dupe_array(count, value, i+1)\n    }\n  }\n  return result\n}\n\nfunction dupe_number(count, value) {\n  var result, i\n  result = new Array(count)\n  for(i=0; i<count; ++i) {\n    result[i] = value\n  }\n  return result\n}\n\nfunction dupe(count, value) {\n  if(typeof value === \"undefined\") {\n    value = 0\n  }\n  switch(typeof count) {\n    case \"number\":\n      if(count > 0) {\n        return dupe_number(count|0, value)\n      }\n    break\n    case \"object\":\n      if(typeof (count.length) === \"number\") {\n        return dupe_array(count, value, 0)\n      }\n    break\n  }\n  return []\n}\n\nmodule.exports = dupe\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/dup/dup.js\n// module id = 24\n// module chunks = 0","module.exports = {\n  0: 'NONE',\n  1: 'ONE',\n  2: 'LINE_LOOP',\n  3: 'LINE_STRIP',\n  4: 'TRIANGLES',\n  5: 'TRIANGLE_STRIP',\n  6: 'TRIANGLE_FAN',\n  256: 'DEPTH_BUFFER_BIT',\n  512: 'NEVER',\n  513: 'LESS',\n  514: 'EQUAL',\n  515: 'LEQUAL',\n  516: 'GREATER',\n  517: 'NOTEQUAL',\n  518: 'GEQUAL',\n  519: 'ALWAYS',\n  768: 'SRC_COLOR',\n  769: 'ONE_MINUS_SRC_COLOR',\n  770: 'SRC_ALPHA',\n  771: 'ONE_MINUS_SRC_ALPHA',\n  772: 'DST_ALPHA',\n  773: 'ONE_MINUS_DST_ALPHA',\n  774: 'DST_COLOR',\n  775: 'ONE_MINUS_DST_COLOR',\n  776: 'SRC_ALPHA_SATURATE',\n  1024: 'STENCIL_BUFFER_BIT',\n  1028: 'FRONT',\n  1029: 'BACK',\n  1032: 'FRONT_AND_BACK',\n  1280: 'INVALID_ENUM',\n  1281: 'INVALID_VALUE',\n  1282: 'INVALID_OPERATION',\n  1285: 'OUT_OF_MEMORY',\n  1286: 'INVALID_FRAMEBUFFER_OPERATION',\n  2304: 'CW',\n  2305: 'CCW',\n  2849: 'LINE_WIDTH',\n  2884: 'CULL_FACE',\n  2885: 'CULL_FACE_MODE',\n  2886: 'FRONT_FACE',\n  2928: 'DEPTH_RANGE',\n  2929: 'DEPTH_TEST',\n  2930: 'DEPTH_WRITEMASK',\n  2931: 'DEPTH_CLEAR_VALUE',\n  2932: 'DEPTH_FUNC',\n  2960: 'STENCIL_TEST',\n  2961: 'STENCIL_CLEAR_VALUE',\n  2962: 'STENCIL_FUNC',\n  2963: 'STENCIL_VALUE_MASK',\n  2964: 'STENCIL_FAIL',\n  2965: 'STENCIL_PASS_DEPTH_FAIL',\n  2966: 'STENCIL_PASS_DEPTH_PASS',\n  2967: 'STENCIL_REF',\n  2968: 'STENCIL_WRITEMASK',\n  2978: 'VIEWPORT',\n  3024: 'DITHER',\n  3042: 'BLEND',\n  3088: 'SCISSOR_BOX',\n  3089: 'SCISSOR_TEST',\n  3106: 'COLOR_CLEAR_VALUE',\n  3107: 'COLOR_WRITEMASK',\n  3317: 'UNPACK_ALIGNMENT',\n  3333: 'PACK_ALIGNMENT',\n  3379: 'MAX_TEXTURE_SIZE',\n  3386: 'MAX_VIEWPORT_DIMS',\n  3408: 'SUBPIXEL_BITS',\n  3410: 'RED_BITS',\n  3411: 'GREEN_BITS',\n  3412: 'BLUE_BITS',\n  3413: 'ALPHA_BITS',\n  3414: 'DEPTH_BITS',\n  3415: 'STENCIL_BITS',\n  3553: 'TEXTURE_2D',\n  4352: 'DONT_CARE',\n  4353: 'FASTEST',\n  4354: 'NICEST',\n  5120: 'BYTE',\n  5121: 'UNSIGNED_BYTE',\n  5122: 'SHORT',\n  5123: 'UNSIGNED_SHORT',\n  5124: 'INT',\n  5125: 'UNSIGNED_INT',\n  5126: 'FLOAT',\n  5386: 'INVERT',\n  5890: 'TEXTURE',\n  6401: 'STENCIL_INDEX',\n  6402: 'DEPTH_COMPONENT',\n  6406: 'ALPHA',\n  6407: 'RGB',\n  6408: 'RGBA',\n  6409: 'LUMINANCE',\n  6410: 'LUMINANCE_ALPHA',\n  7680: 'KEEP',\n  7681: 'REPLACE',\n  7682: 'INCR',\n  7683: 'DECR',\n  7936: 'VENDOR',\n  7937: 'RENDERER',\n  7938: 'VERSION',\n  9728: 'NEAREST',\n  9729: 'LINEAR',\n  9984: 'NEAREST_MIPMAP_NEAREST',\n  9985: 'LINEAR_MIPMAP_NEAREST',\n  9986: 'NEAREST_MIPMAP_LINEAR',\n  9987: 'LINEAR_MIPMAP_LINEAR',\n  10240: 'TEXTURE_MAG_FILTER',\n  10241: 'TEXTURE_MIN_FILTER',\n  10242: 'TEXTURE_WRAP_S',\n  10243: 'TEXTURE_WRAP_T',\n  10497: 'REPEAT',\n  10752: 'POLYGON_OFFSET_UNITS',\n  16384: 'COLOR_BUFFER_BIT',\n  32769: 'CONSTANT_COLOR',\n  32770: 'ONE_MINUS_CONSTANT_COLOR',\n  32771: 'CONSTANT_ALPHA',\n  32772: 'ONE_MINUS_CONSTANT_ALPHA',\n  32773: 'BLEND_COLOR',\n  32774: 'FUNC_ADD',\n  32777: 'BLEND_EQUATION_RGB',\n  32778: 'FUNC_SUBTRACT',\n  32779: 'FUNC_REVERSE_SUBTRACT',\n  32819: 'UNSIGNED_SHORT_4_4_4_4',\n  32820: 'UNSIGNED_SHORT_5_5_5_1',\n  32823: 'POLYGON_OFFSET_FILL',\n  32824: 'POLYGON_OFFSET_FACTOR',\n  32854: 'RGBA4',\n  32855: 'RGB5_A1',\n  32873: 'TEXTURE_BINDING_2D',\n  32926: 'SAMPLE_ALPHA_TO_COVERAGE',\n  32928: 'SAMPLE_COVERAGE',\n  32936: 'SAMPLE_BUFFERS',\n  32937: 'SAMPLES',\n  32938: 'SAMPLE_COVERAGE_VALUE',\n  32939: 'SAMPLE_COVERAGE_INVERT',\n  32968: 'BLEND_DST_RGB',\n  32969: 'BLEND_SRC_RGB',\n  32970: 'BLEND_DST_ALPHA',\n  32971: 'BLEND_SRC_ALPHA',\n  33071: 'CLAMP_TO_EDGE',\n  33170: 'GENERATE_MIPMAP_HINT',\n  33189: 'DEPTH_COMPONENT16',\n  33306: 'DEPTH_STENCIL_ATTACHMENT',\n  33635: 'UNSIGNED_SHORT_5_6_5',\n  33648: 'MIRRORED_REPEAT',\n  33901: 'ALIASED_POINT_SIZE_RANGE',\n  33902: 'ALIASED_LINE_WIDTH_RANGE',\n  33984: 'TEXTURE0',\n  33985: 'TEXTURE1',\n  33986: 'TEXTURE2',\n  33987: 'TEXTURE3',\n  33988: 'TEXTURE4',\n  33989: 'TEXTURE5',\n  33990: 'TEXTURE6',\n  33991: 'TEXTURE7',\n  33992: 'TEXTURE8',\n  33993: 'TEXTURE9',\n  33994: 'TEXTURE10',\n  33995: 'TEXTURE11',\n  33996: 'TEXTURE12',\n  33997: 'TEXTURE13',\n  33998: 'TEXTURE14',\n  33999: 'TEXTURE15',\n  34000: 'TEXTURE16',\n  34001: 'TEXTURE17',\n  34002: 'TEXTURE18',\n  34003: 'TEXTURE19',\n  34004: 'TEXTURE20',\n  34005: 'TEXTURE21',\n  34006: 'TEXTURE22',\n  34007: 'TEXTURE23',\n  34008: 'TEXTURE24',\n  34009: 'TEXTURE25',\n  34010: 'TEXTURE26',\n  34011: 'TEXTURE27',\n  34012: 'TEXTURE28',\n  34013: 'TEXTURE29',\n  34014: 'TEXTURE30',\n  34015: 'TEXTURE31',\n  34016: 'ACTIVE_TEXTURE',\n  34024: 'MAX_RENDERBUFFER_SIZE',\n  34041: 'DEPTH_STENCIL',\n  34055: 'INCR_WRAP',\n  34056: 'DECR_WRAP',\n  34067: 'TEXTURE_CUBE_MAP',\n  34068: 'TEXTURE_BINDING_CUBE_MAP',\n  34069: 'TEXTURE_CUBE_MAP_POSITIVE_X',\n  34070: 'TEXTURE_CUBE_MAP_NEGATIVE_X',\n  34071: 'TEXTURE_CUBE_MAP_POSITIVE_Y',\n  34072: 'TEXTURE_CUBE_MAP_NEGATIVE_Y',\n  34073: 'TEXTURE_CUBE_MAP_POSITIVE_Z',\n  34074: 'TEXTURE_CUBE_MAP_NEGATIVE_Z',\n  34076: 'MAX_CUBE_MAP_TEXTURE_SIZE',\n  34338: 'VERTEX_ATTRIB_ARRAY_ENABLED',\n  34339: 'VERTEX_ATTRIB_ARRAY_SIZE',\n  34340: 'VERTEX_ATTRIB_ARRAY_STRIDE',\n  34341: 'VERTEX_ATTRIB_ARRAY_TYPE',\n  34342: 'CURRENT_VERTEX_ATTRIB',\n  34373: 'VERTEX_ATTRIB_ARRAY_POINTER',\n  34466: 'NUM_COMPRESSED_TEXTURE_FORMATS',\n  34467: 'COMPRESSED_TEXTURE_FORMATS',\n  34660: 'BUFFER_SIZE',\n  34661: 'BUFFER_USAGE',\n  34816: 'STENCIL_BACK_FUNC',\n  34817: 'STENCIL_BACK_FAIL',\n  34818: 'STENCIL_BACK_PASS_DEPTH_FAIL',\n  34819: 'STENCIL_BACK_PASS_DEPTH_PASS',\n  34877: 'BLEND_EQUATION_ALPHA',\n  34921: 'MAX_VERTEX_ATTRIBS',\n  34922: 'VERTEX_ATTRIB_ARRAY_NORMALIZED',\n  34930: 'MAX_TEXTURE_IMAGE_UNITS',\n  34962: 'ARRAY_BUFFER',\n  34963: 'ELEMENT_ARRAY_BUFFER',\n  34964: 'ARRAY_BUFFER_BINDING',\n  34965: 'ELEMENT_ARRAY_BUFFER_BINDING',\n  34975: 'VERTEX_ATTRIB_ARRAY_BUFFER_BINDING',\n  35040: 'STREAM_DRAW',\n  35044: 'STATIC_DRAW',\n  35048: 'DYNAMIC_DRAW',\n  35632: 'FRAGMENT_SHADER',\n  35633: 'VERTEX_SHADER',\n  35660: 'MAX_VERTEX_TEXTURE_IMAGE_UNITS',\n  35661: 'MAX_COMBINED_TEXTURE_IMAGE_UNITS',\n  35663: 'SHADER_TYPE',\n  35664: 'FLOAT_VEC2',\n  35665: 'FLOAT_VEC3',\n  35666: 'FLOAT_VEC4',\n  35667: 'INT_VEC2',\n  35668: 'INT_VEC3',\n  35669: 'INT_VEC4',\n  35670: 'BOOL',\n  35671: 'BOOL_VEC2',\n  35672: 'BOOL_VEC3',\n  35673: 'BOOL_VEC4',\n  35674: 'FLOAT_MAT2',\n  35675: 'FLOAT_MAT3',\n  35676: 'FLOAT_MAT4',\n  35678: 'SAMPLER_2D',\n  35680: 'SAMPLER_CUBE',\n  35712: 'DELETE_STATUS',\n  35713: 'COMPILE_STATUS',\n  35714: 'LINK_STATUS',\n  35715: 'VALIDATE_STATUS',\n  35716: 'INFO_LOG_LENGTH',\n  35717: 'ATTACHED_SHADERS',\n  35718: 'ACTIVE_UNIFORMS',\n  35719: 'ACTIVE_UNIFORM_MAX_LENGTH',\n  35720: 'SHADER_SOURCE_LENGTH',\n  35721: 'ACTIVE_ATTRIBUTES',\n  35722: 'ACTIVE_ATTRIBUTE_MAX_LENGTH',\n  35724: 'SHADING_LANGUAGE_VERSION',\n  35725: 'CURRENT_PROGRAM',\n  36003: 'STENCIL_BACK_REF',\n  36004: 'STENCIL_BACK_VALUE_MASK',\n  36005: 'STENCIL_BACK_WRITEMASK',\n  36006: 'FRAMEBUFFER_BINDING',\n  36007: 'RENDERBUFFER_BINDING',\n  36048: 'FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE',\n  36049: 'FRAMEBUFFER_ATTACHMENT_OBJECT_NAME',\n  36050: 'FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL',\n  36051: 'FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE',\n  36053: 'FRAMEBUFFER_COMPLETE',\n  36054: 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT',\n  36055: 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT',\n  36057: 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS',\n  36061: 'FRAMEBUFFER_UNSUPPORTED',\n  36064: 'COLOR_ATTACHMENT0',\n  36096: 'DEPTH_ATTACHMENT',\n  36128: 'STENCIL_ATTACHMENT',\n  36160: 'FRAMEBUFFER',\n  36161: 'RENDERBUFFER',\n  36162: 'RENDERBUFFER_WIDTH',\n  36163: 'RENDERBUFFER_HEIGHT',\n  36164: 'RENDERBUFFER_INTERNAL_FORMAT',\n  36168: 'STENCIL_INDEX8',\n  36176: 'RENDERBUFFER_RED_SIZE',\n  36177: 'RENDERBUFFER_GREEN_SIZE',\n  36178: 'RENDERBUFFER_BLUE_SIZE',\n  36179: 'RENDERBUFFER_ALPHA_SIZE',\n  36180: 'RENDERBUFFER_DEPTH_SIZE',\n  36181: 'RENDERBUFFER_STENCIL_SIZE',\n  36194: 'RGB565',\n  36336: 'LOW_FLOAT',\n  36337: 'MEDIUM_FLOAT',\n  36338: 'HIGH_FLOAT',\n  36339: 'LOW_INT',\n  36340: 'MEDIUM_INT',\n  36341: 'HIGH_INT',\n  36346: 'SHADER_COMPILER',\n  36347: 'MAX_VERTEX_UNIFORM_VECTORS',\n  36348: 'MAX_VARYING_VECTORS',\n  36349: 'MAX_FRAGMENT_UNIFORM_VECTORS',\n  37440: 'UNPACK_FLIP_Y_WEBGL',\n  37441: 'UNPACK_PREMULTIPLY_ALPHA_WEBGL',\n  37442: 'CONTEXT_LOST_WEBGL',\n  37443: 'UNPACK_COLORSPACE_CONVERSION_WEBGL',\n  37444: 'BROWSER_DEFAULT_WEBGL'\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-constants/1.0/numbers.js\n// module id = 25\n// module chunks = 0","var gl10 = require('./1.0/numbers')\n\nmodule.exports = function lookupConstant (number) {\n  return gl10[number]\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-constants/lookup.js\n// module id = 26\n// module chunks = 0","\nvar sprintf = require('sprintf-js').sprintf;\nvar glConstants = require('gl-constants/lookup');\nvar shaderName = require('glsl-shader-name');\nvar addLineNumbers = require('add-line-numbers');\n\nmodule.exports = formatCompilerError;\n\nfunction formatCompilerError(errLog, src, type) {\n    \"use strict\";\n\n    var name = shaderName(src) || 'of unknown name (see npm glsl-shader-name)';\n\n    var typeName = 'unknown type';\n    if (type !== undefined) {\n        typeName = type === glConstants.FRAGMENT_SHADER ? 'fragment' : 'vertex'\n    }\n\n    var longForm = sprintf('Error compiling %s shader %s:\\n', typeName, name);\n    var shortForm = sprintf(\"%s%s\", longForm, errLog);\n\n    var errorStrings = errLog.split('\\n');\n    var errors = {};\n\n    for (var i = 0; i < errorStrings.length; i++) {\n        var errorString = errorStrings[i];\n        if (errorString === '') continue;\n        var lineNo = parseInt(errorString.split(':')[2]);\n        if (isNaN(lineNo)) {\n            throw new Error(sprintf('Could not parse error: %s', errorString));\n        }\n        errors[lineNo] = errorString;\n    }\n\n    var lines = addLineNumbers(src).split('\\n');\n\n    for (var i = 0; i < lines.length; i++) {\n        if (!errors[i+3] && !errors[i+2] && !errors[i+1]) continue;\n        var line = lines[i];\n        longForm += line + '\\n';\n        if (errors[i+1]) {\n            var e = errors[i+1];\n            e = e.substr(e.split(':', 3).join(':').length + 1).trim();\n            longForm += sprintf('^^^ %s\\n\\n', e);\n        }\n    }\n\n    return {\n        long: longForm.trim(),\n        short: shortForm.trim()\n    };\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-format-compiler-error/index.js\n// module id = 27\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\nvar mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nmat2.fromValues = function(m00, m01, m10, m11) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nmat2.set = function(out, m00, m01, m10, m11) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a1 = a[1];\n        out[1] = a[2];\n        out[2] = a1;\n    } else {\n        out[0] = a[0];\n        out[1] = a[2];\n        out[2] = a[1];\n        out[3] = a[3];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\n        // Calculate the determinant\n        det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    \n    out[0] =  a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] =  a0 * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function(out, a) {\n    // Caching this value is nessecary if out == a\n    var a0 = a[0];\n    out[0] =  a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] =  a0;\n\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n    return a[0] * a[3] - a[2] * a[1];\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.fromRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nmat2.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix \n * @param {mat2} D the diagonal matrix \n * @param {mat2} U the upper triangular matrix \n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) { \n    L[2] = a[2]/a[0]; \n    U[0] = a[0]; \n    U[1] = a[1]; \n    U[3] = a[3] - L[2] * U[1]; \n    return [L, D, U];       \n}; \n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nmat2.sub = mat2.subtract;\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nmat2.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nmat2.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\nmodule.exports = mat2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-matrix/src/gl-matrix/mat2.js\n// module id = 28\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n * \n * @description \n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nmat2d.fromValues = function(a, b, c, d, tx, ty) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nmat2d.set = function(out, a, b, c, d, tx, ty) {\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nmat2d.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nmat2d.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2d.str = function (a) {\n    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) { \n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}; \n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nmat2d.sub = mat2d.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nmat2d.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    return out;\n};\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nmat2d.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n};\n\nmodule.exports = mat2d;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-matrix/src/gl-matrix/mat2d.js\n// module id = 29\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\nvar mat4 = {\n  scalar: {},\n  SIMD: {},\n};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nmat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nmat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.transpose = function(out, a) {\n    var a0, a1, a2, a3,\n        tmp01, tmp23,\n        out0, out1, out2, out3;\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    a1 = SIMD.Float32x4.load(a, 4);\n    a2 = SIMD.Float32x4.load(a, 8);\n    a3 = SIMD.Float32x4.load(a, 12);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 0,  out0);\n    SIMD.Float32x4.store(out, 4,  out1);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 8,  out2);\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Transpse a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;\n\n/**\n * Inverts a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Inverts a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.invert = function(out, a) {\n  var row0, row1, row2, row3,\n      tmp1,\n      minor0, minor1, minor2, minor3,\n      det,\n      a0 = SIMD.Float32x4.load(a, 0),\n      a1 = SIMD.Float32x4.load(a, 4),\n      a2 = SIMD.Float32x4.load(a, 8),\n      a3 = SIMD.Float32x4.load(a, 12);\n\n  // Compute matrix adjugate\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  // Compute matrix determinant\n  det   = SIMD.Float32x4.mul(row0, minor0);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);\n  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);\n  det   = SIMD.Float32x4.sub(\n               SIMD.Float32x4.add(tmp1, tmp1),\n               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));\n  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);\n  if (!det) {\n      return null;\n  }\n\n  // Compute matrix inverse\n  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));\n  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));\n  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));\n  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));\n  return out;\n}\n\n/**\n * Inverts a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;\n\n/**\n * Calculates the adjugate of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.adjoint = function(out, a) {\n  var a0, a1, a2, a3;\n  var row0, row1, row2, row3;\n  var tmp1;\n  var minor0, minor1, minor2, minor3;\n\n  var a0 = SIMD.Float32x4.load(a, 0);\n  var a1 = SIMD.Float32x4.load(a, 4);\n  var a2 = SIMD.Float32x4.load(a, 8);\n  var a3 = SIMD.Float32x4.load(a, 12);\n\n  // Transpose the source matrix.  Sort of.  Not a true transpose operation\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  SIMD.Float32x4.store(out, 0,  minor0);\n  SIMD.Float32x4.store(out, 4,  minor1);\n  SIMD.Float32x4.store(out, 8,  minor2);\n  SIMD.Float32x4.store(out, 12, minor3);\n  return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's explicitly using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand, must be a Float32Array\n * @param {mat4} b the second operand, must be a Float32Array\n * @returns {mat4} out\n */\nmat4.SIMD.multiply = function (out, a, b) {\n    var a0 = SIMD.Float32x4.load(a, 0);\n    var a1 = SIMD.Float32x4.load(a, 4);\n    var a2 = SIMD.Float32x4.load(a, 8);\n    var a3 = SIMD.Float32x4.load(a, 12);\n\n    var b0 = SIMD.Float32x4.load(b, 0);\n    var out0 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 0, out0);\n\n    var b1 = SIMD.Float32x4.load(b, 4);\n    var out1 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 4, out1);\n\n    var b2 = SIMD.Float32x4.load(b, 8);\n    var out2 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 8, out2);\n\n    var b3 = SIMD.Float32x4.load(b, 12);\n    var out3 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),\n                        SIMD.Float32x4.add(\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Multiplies two mat4's explicitly not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.scalar.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Multiplies two mat4's using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.scalar.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.SIMD.translate = function (out, a, v) {\n    var a0 = SIMD.Float32x4.load(a, 0),\n        a1 = SIMD.Float32x4.load(a, 4),\n        a2 = SIMD.Float32x4.load(a, 8),\n        a3 = SIMD.Float32x4.load(a, 12),\n        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);\n\n    if (a !== out) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];\n        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];\n    }\n\n    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));\n    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));\n    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));\n\n    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));\n    SIMD.Float32x4.store(out, 12, t0);\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scalar.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.SIMD.scale = function(out, a, v) {\n    var a0, a1, a2;\n    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    SIMD.Float32x4.store(\n        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));\n\n    a1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(\n        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));\n\n    a2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(\n        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));\n\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n */\nmat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateX = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n      out[0]  = a[0];\n      out[1]  = a[1];\n      out[2]  = a[2];\n      out[3]  = a[3];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;\n\n/**\n * Rotates a matrix by the given angle around the Y axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateY = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;\n\n/**\n * Rotates a matrix by the given angle around the Z axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateZ = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = 1;\n    out[1]  = 0;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = 0;\n    out[2]  = -s;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = s;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getTranslation = function (out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n};\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nmat4.getRotation = function (out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) { \n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S; \n    out[2] = (mat[1] - mat[4]) / S; \n  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { \n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S; \n    out[2] = (mat[8] + mat[2]) / S; \n  } else if (mat[5] > mat[10]) { \n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S; \n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S; \n  } else { \n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScale = function (out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n        sx = s[0],\n        sy = s[1],\n        sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2,\n\n      sx = s[0],\n      sy = s[1],\n      sz = s[2],\n\n      ox = o[0],\n      oy = o[1],\n      oz = o[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n  out[15] = 1;\n\n  return out;\n};\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n};\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nmat4.sub = mat4.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nmat4.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n};\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nmat4.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    out[9] = a[9] + (b[9] * scale);\n    out[10] = a[10] + (b[10] * scale);\n    out[11] = a[11] + (b[11] * scale);\n    out[12] = a[12] + (b[12] * scale);\n    out[13] = a[13] + (b[13] * scale);\n    out[14] = a[14] + (b[14] * scale);\n    out[15] = a[15] + (b[15] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && \n           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && \n           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.equals = function (a, b) {\n    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],\n        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], \n        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], \n        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],\n        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], \n        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], \n        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n};\n\n\n\nmodule.exports = mat4;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-matrix/src/gl-matrix/mat4.js\n// module id = 30\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\nvar mat3 = require(\"./mat3.js\");\nvar vec3 = require(\"./vec3.js\");\nvar vec4 = require(\"./vec4.js\");\n\n/**\n * @class Quaternion\n * @name quat\n */\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nquat.getAxisAngle = function(out_axis, q) {\n    var rad = Math.acos(q[3]) * 2.0;\n    var s = Math.sin(rad / 2.0);\n    if (s != 0.0) {\n        out_axis[0] = q[0] / s;\n        out_axis[1] = q[1] / s;\n        out_axis[2] = q[2] / s;\n    } else {\n        // If s is zero, return any axis (no rotation - axis does not matter)\n        out_axis[0] = 1;\n        out_axis[1] = 0;\n        out_axis[2] = 0;\n    }\n    return rad;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nquat.sqlerp = (function () {\n  var temp1 = quat.create();\n  var temp2 = quat.create();\n  \n  return function (out, a, b, c, d, t) {\n    quat.slerp(temp1, a, d, t);\n    quat.slerp(temp2, b, c, t);\n    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n    \n    return out;\n  };\n}());\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.equals = vec4.equals;\n\nmodule.exports = quat;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-matrix/src/gl-matrix/quat.js\n// module id = 31\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nvec2.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nvec2.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nvec2.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1];\n    var b0 = b[0], b1 = b[1];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n};\n\nmodule.exports = vec2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-matrix/src/gl-matrix/vec2.js\n// module id = 32\n// module chunks = 0","'use strict'\n\nmodule.exports = createAttributeWrapper\n\nvar GLError = require(\"./GLError\")\n\nfunction ShaderAttribute(\n    gl\n  , wrapper\n  , index\n  , locations\n  , dimension\n  , constFunc) {\n  this._gl        = gl\n  this._wrapper   = wrapper\n  this._index     = index\n  this._locations = locations\n  this._dimension = dimension\n  this._constFunc = constFunc\n}\n\nvar proto = ShaderAttribute.prototype\n\nproto.pointer = function setAttribPointer(\n    type\n  , normalized\n  , stride\n  , offset) {\n\n  var self      = this\n  var gl        = self._gl\n  var location  = self._locations[self._index]\n\n  gl.vertexAttribPointer(\n      location\n    , self._dimension\n    , type || gl.FLOAT\n    , !!normalized\n    , stride || 0\n    , offset || 0)\n  gl.enableVertexAttribArray(location)\n}\n\nproto.set = function(x0, x1, x2, x3) {\n  return this._constFunc(this._locations[this._index], x0, x1, x2, x3)\n}\n\nObject.defineProperty(proto, 'location', {\n  get: function() {\n    return this._locations[this._index]\n  }\n  , set: function(v) {\n    if(v !== this._locations[this._index]) {\n      this._locations[this._index] = v|0\n      this._wrapper.program = null\n    }\n    return v|0\n  }\n})\n\n//Adds a vector attribute to obj\nfunction addVectorAttribute(\n    gl\n  , wrapper\n  , index\n  , locations\n  , dimension\n  , obj\n  , name) {\n\n  //Construct constant function\n  var constFuncArgs = [ 'gl', 'v' ]\n  var varNames = []\n  for(var i=0; i<dimension; ++i) {\n    constFuncArgs.push('x'+i)\n    varNames.push('x'+i)\n  }\n  constFuncArgs.push(\n    'if(x0.length===void 0){return gl.vertexAttrib' +\n    dimension + 'f(v,' +\n    varNames.join() +\n    ')}else{return gl.vertexAttrib' +\n    dimension +\n    'fv(v,x0)}')\n  var constFunc = Function.apply(null, constFuncArgs)\n\n  //Create attribute wrapper\n  var attr = new ShaderAttribute(\n      gl\n    , wrapper\n    , index\n    , locations\n    , dimension\n    , constFunc)\n\n  //Create accessor\n  Object.defineProperty(obj, name, {\n    set: function(x) {\n      gl.disableVertexAttribArray(locations[index])\n      constFunc(gl, locations[index], x)\n      return x\n    }\n    , get: function() {\n      return attr\n    }\n    , enumerable: true\n  })\n}\n\nfunction addMatrixAttribute(\n    gl\n  , wrapper\n  , index\n  , locations\n  , dimension\n  , obj\n  , name) {\n\n  var parts = new Array(dimension)\n  var attrs = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    addVectorAttribute(\n        gl\n      , wrapper\n      , index[i]\n      , locations\n      , dimension\n      , parts\n      , i)\n    attrs[i] = parts[i]\n  }\n\n  Object.defineProperty(parts, 'location', {\n    set: function(v) {\n      if(Array.isArray(v)) {\n        for(var i=0; i<dimension; ++i) {\n          attrs[i].location = v[i]\n        }\n      } else {\n        for(var i=0; i<dimension; ++i) {\n          attrs[i].location = v + i\n        }\n      }\n      return v\n    }\n    , get: function() {\n      var result = new Array(dimension)\n      for(var i=0; i<dimension; ++i) {\n        result[i] = locations[index[i]]\n      }\n      return result\n    }\n    , enumerable: true\n  })\n\n  parts.pointer = function(type, normalized, stride, offset) {\n    type       = type || gl.FLOAT\n    normalized = !!normalized\n    stride     = stride || (dimension * dimension)\n    offset     = offset || 0\n    for(var i=0; i<dimension; ++i) {\n      var location = locations[index[i]]\n      gl.vertexAttribPointer(\n            location\n          , dimension\n          , type\n          , normalized\n          , stride\n          , offset + i * dimension)\n      gl.enableVertexAttribArray(location)\n    }\n  }\n\n  var scratch = new Array(dimension)\n  var vertexAttrib = gl['vertexAttrib' + dimension + 'fv']\n\n  Object.defineProperty(obj, name, {\n    set: function(x) {\n      for(var i=0; i<dimension; ++i) {\n        var loc = locations[index[i]]\n        gl.disableVertexAttribArray(loc)\n        if(Array.isArray(x[0])) {\n          vertexAttrib.call(gl, loc, x[i])\n        } else {\n          for(var j=0; j<dimension; ++j) {\n            scratch[j] = x[dimension*i + j]\n          }\n          vertexAttrib.call(gl, loc, scratch)\n        }\n      }\n      return x\n    }\n    , get: function() {\n      return parts\n    }\n    , enumerable: true\n  })\n}\n\n//Create shims for attributes\nfunction createAttributeWrapper(\n    gl\n  , wrapper\n  , attributes\n  , locations) {\n\n  var obj = {}\n  for(var i=0, n=attributes.length; i<n; ++i) {\n\n    var a = attributes[i]\n    var name = a.name\n    var type = a.type\n    var locs = a.locations\n\n    switch(type) {\n      case 'bool':\n      case 'int':\n      case 'float':\n        addVectorAttribute(\n            gl\n          , wrapper\n          , locs[0]\n          , locations\n          , 1\n          , obj\n          , name)\n      break\n\n      default:\n        if(type.indexOf('vec') >= 0) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type for attribute ' + name + ': ' + type)\n          }\n          addVectorAttribute(\n              gl\n            , wrapper\n            , locs[0]\n            , locations\n            , d\n            , obj\n            , name)\n        } else if(type.indexOf('mat') >= 0) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type for attribute ' + name + ': ' + type)\n          }\n          addMatrixAttribute(\n              gl\n            , wrapper\n            , locs\n            , locations\n            , d\n            , obj\n            , name)\n        } else {\n          throw new GLError('', 'Unknown data type for attribute ' + name + ': ' + type)\n        }\n      break\n    }\n  }\n  return obj\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-shader/lib/create-attributes.js\n// module id = 33\n// module chunks = 0","'use strict'\n\nvar coallesceUniforms = require('./reflect')\nvar GLError = require(\"./GLError\")\n\nmodule.exports = createUniformWrapper\n\n//Binds a function and returns a value\nfunction identity(x) {\n  var c = new Function('y', 'return function(){return y}')\n  return c(x)\n}\n\nfunction makeVector(length, fill) {\n  var result = new Array(length)\n  for(var i=0; i<length; ++i) {\n    result[i] = fill\n  }\n  return result\n}\n\n//Create shims for uniforms\nfunction createUniformWrapper(gl, wrapper, uniforms, locations) {\n\n  function makeGetter(index) {\n    var proc = new Function(\n        'gl'\n      , 'wrapper'\n      , 'locations'\n      , 'return function(){return gl.getUniform(wrapper.program,locations[' + index + '])}')\n    return proc(gl, wrapper, locations)\n  }\n\n  function makePropSetter(path, index, type) {\n    switch(type) {\n      case 'bool':\n      case 'int':\n      case 'sampler2D':\n      case 'samplerCube':\n        return 'gl.uniform1i(locations[' + index + '],obj' + path + ')'\n      case 'float':\n        return 'gl.uniform1f(locations[' + index + '],obj' + path + ')'\n      default:\n        var vidx = type.indexOf('vec')\n        if(0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type')\n          }\n          switch(type.charAt(0)) {\n            case 'b':\n            case 'i':\n              return 'gl.uniform' + d + 'iv(locations[' + index + '],obj' + path + ')'\n            case 'v':\n              return 'gl.uniform' + d + 'fv(locations[' + index + '],obj' + path + ')'\n            default:\n              throw new GLError('', 'Unrecognized data type for vector ' + name + ': ' + type)\n          }\n        } else if(type.indexOf('mat') === 0 && type.length === 4) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid uniform dimension type for matrix ' + name + ': ' + type)\n          }\n          return 'gl.uniformMatrix' + d + 'fv(locations[' + index + '],false,obj' + path + ')'\n        } else {\n          throw new GLError('', 'Unknown uniform data type for ' + name + ': ' + type)\n        }\n      break\n    }\n  }\n\n  function enumerateIndices(prefix, type) {\n    if(typeof type !== 'object') {\n      return [ [prefix, type] ]\n    }\n    var indices = []\n    for(var id in type) {\n      var prop = type[id]\n      var tprefix = prefix\n      if(parseInt(id) + '' === id) {\n        tprefix += '[' + id + ']'\n      } else {\n        tprefix += '.' + id\n      }\n      if(typeof prop === 'object') {\n        indices.push.apply(indices, enumerateIndices(tprefix, prop))\n      } else {\n        indices.push([tprefix, prop])\n      }\n    }\n    return indices\n  }\n\n  function makeSetter(type) {\n    var code = [ 'return function updateProperty(obj){' ]\n    var indices = enumerateIndices('', type)\n    for(var i=0; i<indices.length; ++i) {\n      var item = indices[i]\n      var path = item[0]\n      var idx  = item[1]\n      if(locations[idx]) {\n        code.push(makePropSetter(path, idx, uniforms[idx].type))\n      }\n    }\n    code.push('return obj}')\n    var proc = new Function('gl', 'locations', code.join('\\n'))\n    return proc(gl, locations)\n  }\n\n  function defaultValue(type) {\n    switch(type) {\n      case 'bool':\n        return false\n      case 'int':\n      case 'sampler2D':\n      case 'samplerCube':\n        return 0\n      case 'float':\n        return 0.0\n      default:\n        var vidx = type.indexOf('vec')\n        if(0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type')\n          }\n          if(type.charAt(0) === 'b') {\n            return makeVector(d, false)\n          }\n          return makeVector(d, 0)\n        } else if(type.indexOf('mat') === 0 && type.length === 4) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid uniform dimension type for matrix ' + name + ': ' + type)\n          }\n          return makeVector(d*d, 0)\n        } else {\n          throw new GLError('', 'Unknown uniform data type for ' + name + ': ' + type)\n        }\n      break\n    }\n  }\n\n  function storeProperty(obj, prop, type) {\n    if(typeof type === 'object') {\n      var child = processObject(type)\n      Object.defineProperty(obj, prop, {\n        get: identity(child),\n        set: makeSetter(type),\n        enumerable: true,\n        configurable: false\n      })\n    } else {\n      if(locations[type]) {\n        Object.defineProperty(obj, prop, {\n          get: makeGetter(type),\n          set: makeSetter(type),\n          enumerable: true,\n          configurable: false\n        })\n      } else {\n        obj[prop] = defaultValue(uniforms[type].type)\n      }\n    }\n  }\n\n  function processObject(obj) {\n    var result\n    if(Array.isArray(obj)) {\n      result = new Array(obj.length)\n      for(var i=0; i<obj.length; ++i) {\n        storeProperty(result, i, obj[i])\n      }\n    } else {\n      result = {}\n      for(var id in obj) {\n        storeProperty(result, id, obj[id])\n      }\n    }\n    return result\n  }\n\n  //Return data\n  var coallesced = coallesceUniforms(uniforms, true)\n  return {\n    get: identity(processObject(coallesced)),\n    set: makeSetter(coallesced),\n    enumerable: true,\n    configurable: true\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-shader/lib/create-uniforms.js\n// module id = 34\n// module chunks = 0","'use strict'\n\nexports.uniforms    = runtimeUniforms\nexports.attributes  = runtimeAttributes\n\nvar GL_TO_GLSL_TYPES = {\n  'FLOAT':       'float',\n  'FLOAT_VEC2':  'vec2',\n  'FLOAT_VEC3':  'vec3',\n  'FLOAT_VEC4':  'vec4',\n  'INT':         'int',\n  'INT_VEC2':    'ivec2',\n  'INT_VEC3':    'ivec3',\n  'INT_VEC4':    'ivec4',\n  'BOOL':        'bool',\n  'BOOL_VEC2':   'bvec2',\n  'BOOL_VEC3':   'bvec3',\n  'BOOL_VEC4':   'bvec4',\n  'FLOAT_MAT2':  'mat2',\n  'FLOAT_MAT3':  'mat3',\n  'FLOAT_MAT4':  'mat4',\n  'SAMPLER_2D':  'sampler2D',\n  'SAMPLER_CUBE':'samplerCube'\n}\n\nvar GL_TABLE = null\n\nfunction getType(gl, type) {\n  if(!GL_TABLE) {\n    var typeNames = Object.keys(GL_TO_GLSL_TYPES)\n    GL_TABLE = {}\n    for(var i=0; i<typeNames.length; ++i) {\n      var tn = typeNames[i]\n      GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn]\n    }\n  }\n  return GL_TABLE[type]\n}\n\nfunction runtimeUniforms(gl, program) {\n  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS)\n  var result = []\n  for(var i=0; i<numUniforms; ++i) {\n    var info = gl.getActiveUniform(program, i)\n    if(info) {\n      var type = getType(gl, info.type)\n      if(info.size > 1) {\n        for(var j=0; j<info.size; ++j) {\n          result.push({\n            name: info.name.replace('[0]', '[' + j + ']'),\n            type: type\n          })\n        }\n      } else {\n        result.push({\n          name: info.name,\n          type: type\n        })\n      }\n    }\n  }\n  return result\n}\n\nfunction runtimeAttributes(gl, program) {\n  var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES)\n  var result = []\n  for(var i=0; i<numAttributes; ++i) {\n    var info = gl.getActiveAttrib(program, i)\n    if(info) {\n      result.push({\n        name: info.name,\n        type: getType(gl, info.type)\n      })\n    }\n  }\n  return result\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-shader/lib/runtime-reflect.js\n// module id = 35\n// module chunks = 0","'use strict'\n\nexports.shader   = getShaderReference\nexports.program  = createProgram\n\nvar GLError = require(\"./GLError\")\nvar formatCompilerError = require('gl-format-compiler-error');\n\nvar weakMap = typeof WeakMap === 'undefined' ? require('weakmap-shim') : WeakMap\nvar CACHE = new weakMap()\n\nvar SHADER_COUNTER = 0\n\nfunction ShaderReference(id, src, type, shader, programs, count, cache) {\n  this.id       = id\n  this.src      = src\n  this.type     = type\n  this.shader   = shader\n  this.count    = count\n  this.programs = []\n  this.cache    = cache\n}\n\nShaderReference.prototype.dispose = function() {\n  if(--this.count === 0) {\n    var cache    = this.cache\n    var gl       = cache.gl\n\n    //Remove program references\n    var programs = this.programs\n    for(var i=0, n=programs.length; i<n; ++i) {\n      var p = cache.programs[programs[i]]\n      if(p) {\n        delete cache.programs[i]\n        gl.deleteProgram(p)\n      }\n    }\n\n    //Remove shader reference\n    gl.deleteShader(this.shader)\n    delete cache.shaders[(this.type === gl.FRAGMENT_SHADER)|0][this.src]\n  }\n}\n\nfunction ContextCache(gl) {\n  this.gl       = gl\n  this.shaders  = [{}, {}]\n  this.programs = {}\n}\n\nvar proto = ContextCache.prototype\n\nfunction compileShader(gl, type, src) {\n  var shader = gl.createShader(type)\n  gl.shaderSource(shader, src)\n  gl.compileShader(shader)\n  if(!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    var errLog = gl.getShaderInfoLog(shader)\n    try {\n        var fmt = formatCompilerError(errLog, src, type);\n    } catch (e){\n        console.warn('Failed to format compiler error: ' + e);\n        throw new GLError(errLog, 'Error compiling shader:\\n' + errLog)\n    }\n    throw new GLError(errLog, fmt.short, fmt.long)\n  }\n  return shader\n}\n\nproto.getShaderReference = function(type, src) {\n  var gl      = this.gl\n  var shaders = this.shaders[(type === gl.FRAGMENT_SHADER)|0]\n  var shader  = shaders[src]\n  if(!shader || !gl.isShader(shader.shader)) {\n    var shaderObj = compileShader(gl, type, src)\n    shader = shaders[src] = new ShaderReference(\n      SHADER_COUNTER++,\n      src,\n      type,\n      shaderObj,\n      [],\n      1,\n      this)\n  } else {\n    shader.count += 1\n  }\n  return shader\n}\n\nfunction linkProgram(gl, vshader, fshader, attribs, locations) {\n  var program = gl.createProgram()\n  gl.attachShader(program, vshader)\n  gl.attachShader(program, fshader)\n  for(var i=0; i<attribs.length; ++i) {\n    gl.bindAttribLocation(program, locations[i], attribs[i])\n  }\n  gl.linkProgram(program)\n  if(!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    var errLog = gl.getProgramInfoLog(program)\n    throw new GLError(errLog, 'Error linking program: ' + errLog)\n  }\n  return program\n}\n\nproto.getProgram = function(vref, fref, attribs, locations) {\n  var token = [vref.id, fref.id, attribs.join(':'), locations.join(':')].join('@')\n  var prog  = this.programs[token]\n  if(!prog || !this.gl.isProgram(prog)) {\n    this.programs[token] = prog = linkProgram(\n      this.gl,\n      vref.shader,\n      fref.shader,\n      attribs,\n      locations)\n    vref.programs.push(token)\n    fref.programs.push(token)\n  }\n  return prog\n}\n\nfunction getCache(gl) {\n  var ctxCache = CACHE.get(gl)\n  if(!ctxCache) {\n    ctxCache = new ContextCache(gl)\n    CACHE.set(gl, ctxCache)\n  }\n  return ctxCache\n}\n\nfunction getShaderReference(gl, type, src) {\n  return getCache(gl).getShaderReference(type, src)\n}\n\nfunction createProgram(gl, vref, fref, attribs, locations) {\n  return getCache(gl).getProgram(vref, fref, attribs, locations)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gl-shader/lib/shader-cache.js\n// module id = 36\n// module chunks = 0","var tokenize = require('glsl-tokenizer')\nvar atob     = require('atob-lite')\n\nmodule.exports = getName\n\nfunction getName(src) {\n  var tokens = Array.isArray(src)\n    ? src\n    : tokenize(src)\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n    if (token.type !== 'preprocessor') continue\n    var match = token.data.match(/\\#define\\s+SHADER_NAME(_B64)?\\s+(.+)$/)\n    if (!match) continue\n    if (!match[2]) continue\n\n    var b64  = match[1]\n    var name = match[2]\n\n    return (b64 ? atob(name) : name).trim()\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/glsl-shader-name/index.js\n// module id = 37\n// module chunks = 0","module.exports = tokenize\n\nvar literals100 = require('./lib/literals')\n  , operators = require('./lib/operators')\n  , builtins100 = require('./lib/builtins')\n  , literals300es = require('./lib/literals-300es')\n  , builtins300es = require('./lib/builtins-300es')\n\nvar NORMAL = 999          // <-- never emitted\n  , TOKEN = 9999          // <-- never emitted\n  , BLOCK_COMMENT = 0\n  , LINE_COMMENT = 1\n  , PREPROCESSOR = 2\n  , OPERATOR = 3\n  , INTEGER = 4\n  , FLOAT = 5\n  , IDENT = 6\n  , BUILTIN = 7\n  , KEYWORD = 8\n  , WHITESPACE = 9\n  , EOF = 10\n  , HEX = 11\n\nvar map = [\n    'block-comment'\n  , 'line-comment'\n  , 'preprocessor'\n  , 'operator'\n  , 'integer'\n  , 'float'\n  , 'ident'\n  , 'builtin'\n  , 'keyword'\n  , 'whitespace'\n  , 'eof'\n  , 'integer'\n]\n\nfunction tokenize(opt) {\n  var i = 0\n    , total = 0\n    , mode = NORMAL\n    , c\n    , last\n    , content = []\n    , tokens = []\n    , token_idx = 0\n    , token_offs = 0\n    , line = 1\n    , col = 0\n    , start = 0\n    , isnum = false\n    , isoperator = false\n    , input = ''\n    , len\n\n  opt = opt || {}\n  var allBuiltins = builtins100\n  var allLiterals = literals100\n  if (opt.version === '300 es') {\n    allBuiltins = builtins300es\n    allLiterals = literals300es\n  }\n\n  return function(data) {\n    tokens = []\n    if (data !== null) return write(data.replace ? data.replace(/\\r\\n/g, '\\n') : data)\n    return end()\n  }\n\n  function token(data) {\n    if (data.length) {\n      tokens.push({\n        type: map[mode]\n      , data: data\n      , position: start\n      , line: line\n      , column: col\n      })\n    }\n  }\n\n  function write(chunk) {\n    i = 0\n    input += chunk\n    len = input.length\n\n    var last\n\n    while(c = input[i], i < len) {\n      last = i\n\n      switch(mode) {\n        case BLOCK_COMMENT: i = block_comment(); break\n        case LINE_COMMENT: i = line_comment(); break\n        case PREPROCESSOR: i = preprocessor(); break\n        case OPERATOR: i = operator(); break\n        case INTEGER: i = integer(); break\n        case HEX: i = hex(); break\n        case FLOAT: i = decimal(); break\n        case TOKEN: i = readtoken(); break\n        case WHITESPACE: i = whitespace(); break\n        case NORMAL: i = normal(); break\n      }\n\n      if(last !== i) {\n        switch(input[last]) {\n          case '\\n': col = 0; ++line; break\n          default: ++col; break\n        }\n      }\n    }\n\n    total += i\n    input = input.slice(i)\n    return tokens\n  }\n\n  function end(chunk) {\n    if(content.length) {\n      token(content.join(''))\n    }\n\n    mode = EOF\n    token('(eof)')\n    return tokens\n  }\n\n  function normal() {\n    content = content.length ? [] : content\n\n    if(last === '/' && c === '*') {\n      start = total + i - 1\n      mode = BLOCK_COMMENT\n      last = c\n      return i + 1\n    }\n\n    if(last === '/' && c === '/') {\n      start = total + i - 1\n      mode = LINE_COMMENT\n      last = c\n      return i + 1\n    }\n\n    if(c === '#') {\n      mode = PREPROCESSOR\n      start = total + i\n      return i\n    }\n\n    if(/\\s/.test(c)) {\n      mode = WHITESPACE\n      start = total + i\n      return i\n    }\n\n    isnum = /\\d/.test(c)\n    isoperator = /[^\\w_]/.test(c)\n\n    start = total + i\n    mode = isnum ? INTEGER : isoperator ? OPERATOR : TOKEN\n    return i\n  }\n\n  function whitespace() {\n    if(/[^\\s]/g.test(c)) {\n      token(content.join(''))\n      mode = NORMAL\n      return i\n    }\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function preprocessor() {\n    if((c === '\\r' || c === '\\n') && last !== '\\\\') {\n      token(content.join(''))\n      mode = NORMAL\n      return i\n    }\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function line_comment() {\n    return preprocessor()\n  }\n\n  function block_comment() {\n    if(c === '/' && last === '*') {\n      content.push(c)\n      token(content.join(''))\n      mode = NORMAL\n      return i + 1\n    }\n\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function operator() {\n    if(last === '.' && /\\d/.test(c)) {\n      mode = FLOAT\n      return i\n    }\n\n    if(last === '/' && c === '*') {\n      mode = BLOCK_COMMENT\n      return i\n    }\n\n    if(last === '/' && c === '/') {\n      mode = LINE_COMMENT\n      return i\n    }\n\n    if(c === '.' && content.length) {\n      while(determine_operator(content));\n\n      mode = FLOAT\n      return i\n    }\n\n    if(c === ';' || c === ')' || c === '(') {\n      if(content.length) while(determine_operator(content));\n      token(c)\n      mode = NORMAL\n      return i + 1\n    }\n\n    var is_composite_operator = content.length === 2 && c !== '='\n    if(/[\\w_\\d\\s]/.test(c) || is_composite_operator) {\n      while(determine_operator(content));\n      mode = NORMAL\n      return i\n    }\n\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function determine_operator(buf) {\n    var j = 0\n      , idx\n      , res\n\n    do {\n      idx = operators.indexOf(buf.slice(0, buf.length + j).join(''))\n      res = operators[idx]\n\n      if(idx === -1) {\n        if(j-- + buf.length > 0) continue\n        res = buf.slice(0, 1).join('')\n      }\n\n      token(res)\n\n      start += res.length\n      content = content.slice(res.length)\n      return content.length\n    } while(1)\n  }\n\n  function hex() {\n    if(/[^a-fA-F0-9]/.test(c)) {\n      token(content.join(''))\n      mode = NORMAL\n      return i\n    }\n\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function integer() {\n    if(c === '.') {\n      content.push(c)\n      mode = FLOAT\n      last = c\n      return i + 1\n    }\n\n    if(/[eE]/.test(c)) {\n      content.push(c)\n      mode = FLOAT\n      last = c\n      return i + 1\n    }\n\n    if(c === 'x' && content.length === 1 && content[0] === '0') {\n      mode = HEX\n      content.push(c)\n      last = c\n      return i + 1\n    }\n\n    if(/[^\\d]/.test(c)) {\n      token(content.join(''))\n      mode = NORMAL\n      return i\n    }\n\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function decimal() {\n    if(c === 'f') {\n      content.push(c)\n      last = c\n      i += 1\n    }\n\n    if(/[eE]/.test(c)) {\n      content.push(c)\n      last = c\n      return i + 1\n    }\n\n    if (c === '-' && /[eE]/.test(last)) {\n      content.push(c)\n      last = c\n      return i + 1\n    }\n\n    if(/[^\\d]/.test(c)) {\n      token(content.join(''))\n      mode = NORMAL\n      return i\n    }\n\n    content.push(c)\n    last = c\n    return i + 1\n  }\n\n  function readtoken() {\n    if(/[^\\d\\w_]/.test(c)) {\n      var contentstr = content.join('')\n      if(allLiterals.indexOf(contentstr) > -1) {\n        mode = KEYWORD\n      } else if(allBuiltins.indexOf(contentstr) > -1) {\n        mode = BUILTIN\n      } else {\n        mode = IDENT\n      }\n      token(content.join(''))\n      mode = NORMAL\n      return i\n    }\n    content.push(c)\n    last = c\n    return i + 1\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/glsl-tokenizer/index.js\n// module id = 38\n// module chunks = 0","// 300es builtins/reserved words that were previously valid in v100\nvar v100 = require('./builtins')\n\n// The texture2D|Cube functions have been removed\n// And the gl_ features are updated\nv100 = v100.slice().filter(function (b) {\n  return !/^(gl\\_|texture)/.test(b)\n})\n\nmodule.exports = v100.concat([\n  // the updated gl_ constants\n    'gl_VertexID'\n  , 'gl_InstanceID'\n  , 'gl_Position'\n  , 'gl_PointSize'\n  , 'gl_FragCoord'\n  , 'gl_FrontFacing'\n  , 'gl_FragDepth'\n  , 'gl_PointCoord'\n  , 'gl_MaxVertexAttribs'\n  , 'gl_MaxVertexUniformVectors'\n  , 'gl_MaxVertexOutputVectors'\n  , 'gl_MaxFragmentInputVectors'\n  , 'gl_MaxVertexTextureImageUnits'\n  , 'gl_MaxCombinedTextureImageUnits'\n  , 'gl_MaxTextureImageUnits'\n  , 'gl_MaxFragmentUniformVectors'\n  , 'gl_MaxDrawBuffers'\n  , 'gl_MinProgramTexelOffset'\n  , 'gl_MaxProgramTexelOffset'\n  , 'gl_DepthRangeParameters'\n  , 'gl_DepthRange'\n\n  // other builtins\n  , 'trunc'\n  , 'round'\n  , 'roundEven'\n  , 'isnan'\n  , 'isinf'\n  , 'floatBitsToInt'\n  , 'floatBitsToUint'\n  , 'intBitsToFloat'\n  , 'uintBitsToFloat'\n  , 'packSnorm2x16'\n  , 'unpackSnorm2x16'\n  , 'packUnorm2x16'\n  , 'unpackUnorm2x16'\n  , 'packHalf2x16'\n  , 'unpackHalf2x16'\n  , 'outerProduct'\n  , 'transpose'\n  , 'determinant'\n  , 'inverse'\n  , 'texture'\n  , 'textureSize'\n  , 'textureProj'\n  , 'textureLod'\n  , 'textureOffset'\n  , 'texelFetch'\n  , 'texelFetchOffset'\n  , 'textureProjOffset'\n  , 'textureLodOffset'\n  , 'textureProjLod'\n  , 'textureProjLodOffset'\n  , 'textureGrad'\n  , 'textureGradOffset'\n  , 'textureProjGrad'\n  , 'textureProjGradOffset'\n])\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/glsl-tokenizer/lib/builtins-300es.js\n// module id = 39\n// module chunks = 0","var v100 = require('./literals')\n\nmodule.exports = v100.slice().concat([\n   'layout'\n  , 'centroid'\n  , 'smooth'\n  , 'case'\n  , 'mat2x2'\n  , 'mat2x3'\n  , 'mat2x4'\n  , 'mat3x2'\n  , 'mat3x3'\n  , 'mat3x4'\n  , 'mat4x2'\n  , 'mat4x3'\n  , 'mat4x4'\n  , 'uint'\n  , 'uvec2'\n  , 'uvec3'\n  , 'uvec4'\n  , 'samplerCubeShadow'\n  , 'sampler2DArray'\n  , 'sampler2DArrayShadow'\n  , 'isampler2D'\n  , 'isampler3D'\n  , 'isamplerCube'\n  , 'isampler2DArray'\n  , 'usampler2D'\n  , 'usampler3D'\n  , 'usamplerCube'\n  , 'usampler2DArray'\n  , 'coherent'\n  , 'restrict'\n  , 'readonly'\n  , 'writeonly'\n  , 'resource'\n  , 'atomic_uint'\n  , 'noperspective'\n  , 'patch'\n  , 'sample'\n  , 'subroutine'\n  , 'common'\n  , 'partition'\n  , 'active'\n  , 'filter'\n  , 'image1D'\n  , 'image2D'\n  , 'image3D'\n  , 'imageCube'\n  , 'iimage1D'\n  , 'iimage2D'\n  , 'iimage3D'\n  , 'iimageCube'\n  , 'uimage1D'\n  , 'uimage2D'\n  , 'uimage3D'\n  , 'uimageCube'\n  , 'image1DArray'\n  , 'image2DArray'\n  , 'iimage1DArray'\n  , 'iimage2DArray'\n  , 'uimage1DArray'\n  , 'uimage2DArray'\n  , 'image1DShadow'\n  , 'image2DShadow'\n  , 'image1DArrayShadow'\n  , 'image2DArrayShadow'\n  , 'imageBuffer'\n  , 'iimageBuffer'\n  , 'uimageBuffer'\n  , 'sampler1DArray'\n  , 'sampler1DArrayShadow'\n  , 'isampler1D'\n  , 'isampler1DArray'\n  , 'usampler1D'\n  , 'usampler1DArray'\n  , 'isampler2DRect'\n  , 'usampler2DRect'\n  , 'samplerBuffer'\n  , 'isamplerBuffer'\n  , 'usamplerBuffer'\n  , 'sampler2DMS'\n  , 'isampler2DMS'\n  , 'usampler2DMS'\n  , 'sampler2DMSArray'\n  , 'isampler2DMSArray'\n  , 'usampler2DMSArray'\n])\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/glsl-tokenizer/lib/literals-300es.js\n// module id = 40\n// module chunks = 0","module.exports = [\n    '<<='\n  , '>>='\n  , '++'\n  , '--'\n  , '<<'\n  , '>>'\n  , '<='\n  , '>='\n  , '=='\n  , '!='\n  , '&&'\n  , '||'\n  , '+='\n  , '-='\n  , '*='\n  , '/='\n  , '%='\n  , '&='\n  , '^^'\n  , '^='\n  , '|='\n  , '('\n  , ')'\n  , '['\n  , ']'\n  , '.'\n  , '!'\n  , '~'\n  , '*'\n  , '/'\n  , '%'\n  , '+'\n  , '-'\n  , '<'\n  , '>'\n  , '&'\n  , '^'\n  , '|'\n  , '?'\n  , ':'\n  , '='\n  , ','\n  , ';'\n  , '{'\n  , '}'\n]\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/glsl-tokenizer/lib/operators.js\n// module id = 41\n// module chunks = 0","var tokenize = require('./index')\n\nmodule.exports = tokenizeString\n\nfunction tokenizeString(str, opt) {\n  var generator = tokenize(opt)\n  var tokens = []\n\n  tokens = tokens.concat(generator(str))\n  tokens = tokens.concat(generator(null))\n\n  return tokens\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/glsl-tokenizer/string.js\n// module id = 42\n// module chunks = 0","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ieee754/index.js\n// module id = 43\n// module chunks = 0","\"use strict\"\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/iota-array/iota.js\n// module id = 44\n// module chunks = 0","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/is-buffer/index.js\n// module id = 45\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/isarray/index.js\n// module id = 46\n// module chunks = 0","\"use strict\"\n\nvar compile = require(\"cwise-compiler\")\n\nvar EmptyProc = {\n  body: \"\",\n  args: [],\n  thisVars: [],\n  localVars: []\n}\n\nfunction fixup(x) {\n  if(!x) {\n    return EmptyProc\n  }\n  for(var i=0; i<x.args.length; ++i) {\n    var a = x.args[i]\n    if(i === 0) {\n      x.args[i] = {name: a, lvalue:true, rvalue: !!x.rvalue, count:x.count||1 }\n    } else {\n      x.args[i] = {name: a, lvalue:false, rvalue:true, count: 1}\n    }\n  }\n  if(!x.thisVars) {\n    x.thisVars = []\n  }\n  if(!x.localVars) {\n    x.localVars = []\n  }\n  return x\n}\n\nfunction pcompile(user_args) {\n  return compile({\n    args:     user_args.args,\n    pre:      fixup(user_args.pre),\n    body:     fixup(user_args.body),\n    post:     fixup(user_args.proc),\n    funcName: user_args.funcName\n  })\n}\n\nfunction makeOp(user_args) {\n  var args = []\n  for(var i=0; i<user_args.args.length; ++i) {\n    args.push(\"a\"+i)\n  }\n  var wrapper = new Function(\"P\", [\n    \"return function \", user_args.funcName, \"_ndarrayops(\", args.join(\",\"), \") {P(\", args.join(\",\"), \");return a0}\"\n  ].join(\"\"))\n  return wrapper(pcompile(user_args))\n}\n\nvar assign_ops = {\n  add:  \"+\",\n  sub:  \"-\",\n  mul:  \"*\",\n  div:  \"/\",\n  mod:  \"%\",\n  band: \"&\",\n  bor:  \"|\",\n  bxor: \"^\",\n  lshift: \"<<\",\n  rshift: \">>\",\n  rrshift: \">>>\"\n}\n;(function(){\n  for(var id in assign_ops) {\n    var op = assign_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\",\"b\",\"c\"],\n             body: \"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\",\"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a\"+op+\"=b\"},\n      rvalue: true,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      body: {args:[\"a\",\"b\",\"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\",\"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a\"+op+\"=s\"},\n      rvalue: true,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar unary_ops = {\n  not: \"!\",\n  bnot: \"~\",\n  neg: \"-\",\n  recip: \"1.0/\"\n}\n;(function(){\n  for(var id in unary_ops) {\n    var op = unary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a=\"+op+\"b\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\"],\n      body: {args:[\"a\"],\n             body:\"a=\"+op+\"a\"},\n      rvalue: true,\n      count: 2,\n      funcName: id+\"eq\"\n    })\n  }\n})();\n\nvar binary_ops = {\n  and: \"&&\",\n  or: \"||\",\n  eq: \"===\",\n  neq: \"!==\",\n  lt: \"<\",\n  gt: \">\",\n  leq: \"<=\",\n  geq: \">=\"\n}\n;(function() {\n  for(var id in binary_ops) {\n    var op = binary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\", \"b\", \"c\"],\n             body:\"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\",\"array\",\"scalar\"],\n      body: {args:[\"a\", \"b\", \"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\", \"b\"],\n             body:\"a=a\"+op+\"b\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a=a\"+op+\"s\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar math_unary = [\n  \"abs\",\n  \"acos\",\n  \"asin\",\n  \"atan\",\n  \"ceil\",\n  \"cos\",\n  \"exp\",\n  \"floor\",\n  \"log\",\n  \"round\",\n  \"sin\",\n  \"sqrt\",\n  \"tan\"\n]\n;(function() {\n  for(var i=0; i<math_unary.length; ++i) {\n    var f = math_unary[i]\n    exports[f] = makeOp({\n                    args: [\"array\", \"array\"],\n                    pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                    body: {args:[\"a\",\"b\"], body:\"a=this_f(b)\", thisVars:[\"this_f\"]},\n                    funcName: f\n                  })\n    exports[f+\"eq\"] = makeOp({\n                      args: [\"array\"],\n                      pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                      body: {args: [\"a\"], body:\"a=this_f(a)\", thisVars:[\"this_f\"]},\n                      rvalue: true,\n                      count: 2,\n                      funcName: f+\"eq\"\n                    })\n  }\n})();\n\nvar math_comm = [\n  \"max\",\n  \"min\",\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_comm.length; ++i) {\n    var f= math_comm[i]\n    exports[f] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f\n                })\n    exports[f+\"s\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"s\"\n                  })\n    exports[f+\"eq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"eq\"\n                  })\n    exports[f+\"seq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"seq\"\n                  })\n  }\n})();\n\nvar math_noncomm = [\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_noncomm.length; ++i) {\n    var f= math_noncomm[i]\n    exports[f+\"op\"] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"op\"\n                })\n    exports[f+\"ops\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"ops\"\n                  })\n    exports[f+\"opeq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"opeq\"\n                  })\n    exports[f+\"opseq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"opseq\"\n                  })\n  }\n})();\n\nexports.any = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"if(a){return true}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return false\"},\n  funcName: \"any\"\n})\n\nexports.all = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1}], body: \"if(!x){return false}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"all\"\n})\n\nexports.sum = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s+=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"sum\"\n})\n\nexports.prod = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=1\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s*=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"prod\"\n})\n\nexports.norm2squared = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm2squared\"\n})\n  \nexports.norm2 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return Math.sqrt(this_s)\"},\n  funcName: \"norm2\"\n})\n  \n\nexports.norminf = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:4}], body:\"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norminf\"\n})\n\nexports.norm1 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:3}], body: \"this_s+=a<0?-a:a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm1\"\n})\n\nexports.sup = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=-Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.inf = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.argmin = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})\n\nexports.argmax = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})  \n\nexports.random = makeOp({\n  args: [\"array\"],\n  pre: {args:[], body:\"this_f=Math.random\", thisVars:[\"this_f\"]},\n  body: {args: [\"a\"], body:\"a=this_f()\", thisVars:[\"this_f\"]},\n  funcName: \"random\"\n})\n\nexports.assign = makeOp({\n  args:[\"array\", \"array\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assign\" })\n\nexports.assigns = makeOp({\n  args:[\"array\", \"scalar\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assigns\" })\n\n\nexports.equals = compile({\n  args:[\"array\", \"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1},\n               {name:\"y\", lvalue:false, rvalue:true, count:1}], \n        body: \"if(x!==y){return false}\", \n        localVars: [], \n        thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"equals\"\n})\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ndarray-ops/ndarray-ops.js\n// module id = 47\n// module chunks = 0","var iota = require(\"iota-array\")\nvar isBuffer = require(\"is-buffer\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ndarray/ndarray.js\n// module id = 48\n// module chunks = 0","/*!\n * pad-left <https://github.com/jonschlinkert/pad-left>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar repeat = require('repeat-string');\n\nmodule.exports = function padLeft(str, num, ch) {\n  ch = typeof ch !== 'undefined' ? (ch + '') : ' ';\n  return repeat(ch, num) + str;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pad-left/index.js\n// module id = 49\n// module chunks = 0","/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/repeat-string/index.js\n// module id = 50\n// module chunks = 0","(function(window) {\n    var re = {\n        not_string: /[^s]/,\n        number: /[diefg]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijosuxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[\\+\\-]/\n    }\n\n    function sprintf() {\n        var key = arguments[0], cache = sprintf.cache\n        if (!(cache[key] && cache.hasOwnProperty(key))) {\n            cache[key] = sprintf.parse(key)\n        }\n        return sprintf.format.call(null, cache[key], arguments)\n    }\n\n    sprintf.format = function(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, node_type = \"\", arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = \"\"\n        for (i = 0; i < tree_length; i++) {\n            node_type = get_type(parse_tree[i])\n            if (node_type === \"string\") {\n                output[output.length] = parse_tree[i]\n            }\n            else if (node_type === \"array\") {\n                match = parse_tree[i] // convenience purposes only\n                if (match[2]) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < match[2].length; k++) {\n                        if (!arg.hasOwnProperty(match[2][k])) {\n                            throw new Error(sprintf(\"[sprintf] property '%s' does not exist\", match[2][k]))\n                        }\n                        arg = arg[match[2][k]]\n                    }\n                }\n                else if (match[1]) { // positional argument (explicit)\n                    arg = argv[match[1]]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (get_type(arg) == \"function\") {\n                    arg = arg()\n                }\n\n                if (re.not_string.test(match[8]) && re.not_json.test(match[8]) && (get_type(arg) != \"number\" && isNaN(arg))) {\n                    throw new TypeError(sprintf(\"[sprintf] expecting number but found %s\", get_type(arg)))\n                }\n\n                if (re.number.test(match[8])) {\n                    is_positive = arg >= 0\n                }\n\n                switch (match[8]) {\n                    case \"b\":\n                        arg = arg.toString(2)\n                    break\n                    case \"c\":\n                        arg = String.fromCharCode(arg)\n                    break\n                    case \"d\":\n                    case \"i\":\n                        arg = parseInt(arg, 10)\n                    break\n                    case \"j\":\n                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)\n                    break\n                    case \"e\":\n                        arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential()\n                    break\n                    case \"f\":\n                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)\n                    break\n                    case \"g\":\n                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)\n                    break\n                    case \"o\":\n                        arg = arg.toString(8)\n                    break\n                    case \"s\":\n                        arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg)\n                    break\n                    case \"u\":\n                        arg = arg >>> 0\n                    break\n                    case \"x\":\n                        arg = arg.toString(16)\n                    break\n                    case \"X\":\n                        arg = arg.toString(16).toUpperCase()\n                    break\n                }\n                if (re.json.test(match[8])) {\n                    output[output.length] = arg\n                }\n                else {\n                    if (re.number.test(match[8]) && (!is_positive || match[3])) {\n                        sign = is_positive ? \"+\" : \"-\"\n                        arg = arg.toString().replace(re.sign, \"\")\n                    }\n                    else {\n                        sign = \"\"\n                    }\n                    pad_character = match[4] ? match[4] === \"0\" ? \"0\" : match[4].charAt(1) : \" \"\n                    pad_length = match[6] - (sign + arg).length\n                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : \"\") : \"\"\n                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === \"0\" ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output.join(\"\")\n    }\n\n    sprintf.cache = {}\n\n    sprintf.parse = function(fmt) {\n        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree[parse_tree.length] = match[0]\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree[parse_tree.length] = \"%\"\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list[field_list.length] = field_match[1]\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== \"\") {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list[field_list.length] = field_match[1]\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list[field_list.length] = field_match[1]\n                            }\n                            else {\n                                throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error(\"[sprintf] mixing positional and named placeholders is not (yet) supported\")\n                }\n                parse_tree[parse_tree.length] = match\n            }\n            else {\n                throw new SyntaxError(\"[sprintf] unexpected placeholder\")\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return parse_tree\n    }\n\n    var vsprintf = function(fmt, argv, _argv) {\n        _argv = (argv || []).slice(0)\n        _argv.splice(0, 0, fmt)\n        return sprintf.apply(null, _argv)\n    }\n\n    /**\n     * helpers\n     */\n    function get_type(variable) {\n        return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()\n    }\n\n    function str_repeat(input, multiplier) {\n        return Array(multiplier + 1).join(input)\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    if (typeof exports !== \"undefined\") {\n        exports.sprintf = sprintf\n        exports.vsprintf = vsprintf\n    }\n    else {\n        window.sprintf = sprintf\n        window.vsprintf = vsprintf\n\n        if (typeof define === \"function\" && define.amd) {\n            define(function() {\n                return {\n                    sprintf: sprintf,\n                    vsprintf: vsprintf\n                }\n            })\n        }\n    }\n})(typeof window === \"undefined\" ? this : window);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/sprintf-js/src/sprintf.js\n// module id = 51\n// module chunks = 0","'use strict'\n\nvar bits = require('bit-twiddle')\nvar dup = require('dup')\n\n//Legacy pool support\nif(!global.__TYPEDARRAY_POOL) {\n  global.__TYPEDARRAY_POOL = {\n      UINT8   : dup([32, 0])\n    , UINT16  : dup([32, 0])\n    , UINT32  : dup([32, 0])\n    , INT8    : dup([32, 0])\n    , INT16   : dup([32, 0])\n    , INT32   : dup([32, 0])\n    , FLOAT   : dup([32, 0])\n    , DOUBLE  : dup([32, 0])\n    , DATA    : dup([32, 0])\n    , UINT8C  : dup([32, 0])\n    , BUFFER  : dup([32, 0])\n  }\n}\n\nvar hasUint8C = (typeof Uint8ClampedArray) !== 'undefined'\nvar POOL = global.__TYPEDARRAY_POOL\n\n//Upgrade pool\nif(!POOL.UINT8C) {\n  POOL.UINT8C = dup([32, 0])\n}\nif(!POOL.BUFFER) {\n  POOL.BUFFER = dup([32, 0])\n}\n\n//New technique: Only allocate from ArrayBufferView and Buffer\nvar DATA    = POOL.DATA\n  , BUFFER  = POOL.BUFFER\n\nexports.free = function free(array) {\n  if(Buffer.isBuffer(array)) {\n    BUFFER[bits.log2(array.length)].push(array)\n  } else {\n    if(Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {\n      array = array.buffer\n    }\n    if(!array) {\n      return\n    }\n    var n = array.length || array.byteLength\n    var log_n = bits.log2(n)|0\n    DATA[log_n].push(array)\n  }\n}\n\nfunction freeArrayBuffer(buffer) {\n  if(!buffer) {\n    return\n  }\n  var n = buffer.length || buffer.byteLength\n  var log_n = bits.log2(n)\n  DATA[log_n].push(buffer)\n}\n\nfunction freeTypedArray(array) {\n  freeArrayBuffer(array.buffer)\n}\n\nexports.freeUint8 =\nexports.freeUint16 =\nexports.freeUint32 =\nexports.freeInt8 =\nexports.freeInt16 =\nexports.freeInt32 =\nexports.freeFloat32 = \nexports.freeFloat =\nexports.freeFloat64 = \nexports.freeDouble = \nexports.freeUint8Clamped = \nexports.freeDataView = freeTypedArray\n\nexports.freeArrayBuffer = freeArrayBuffer\n\nexports.freeBuffer = function freeBuffer(array) {\n  BUFFER[bits.log2(array.length)].push(array)\n}\n\nexports.malloc = function malloc(n, dtype) {\n  if(dtype === undefined || dtype === 'arraybuffer') {\n    return mallocArrayBuffer(n)\n  } else {\n    switch(dtype) {\n      case 'uint8':\n        return mallocUint8(n)\n      case 'uint16':\n        return mallocUint16(n)\n      case 'uint32':\n        return mallocUint32(n)\n      case 'int8':\n        return mallocInt8(n)\n      case 'int16':\n        return mallocInt16(n)\n      case 'int32':\n        return mallocInt32(n)\n      case 'float':\n      case 'float32':\n        return mallocFloat(n)\n      case 'double':\n      case 'float64':\n        return mallocDouble(n)\n      case 'uint8_clamped':\n        return mallocUint8Clamped(n)\n      case 'buffer':\n        return mallocBuffer(n)\n      case 'data':\n      case 'dataview':\n        return mallocDataView(n)\n\n      default:\n        return null\n    }\n  }\n  return null\n}\n\nfunction mallocArrayBuffer(n) {\n  var n = bits.nextPow2(n)\n  var log_n = bits.log2(n)\n  var d = DATA[log_n]\n  if(d.length > 0) {\n    return d.pop()\n  }\n  return new ArrayBuffer(n)\n}\nexports.mallocArrayBuffer = mallocArrayBuffer\n\nfunction mallocUint8(n) {\n  return new Uint8Array(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocUint8 = mallocUint8\n\nfunction mallocUint16(n) {\n  return new Uint16Array(mallocArrayBuffer(2*n), 0, n)\n}\nexports.mallocUint16 = mallocUint16\n\nfunction mallocUint32(n) {\n  return new Uint32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocUint32 = mallocUint32\n\nfunction mallocInt8(n) {\n  return new Int8Array(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocInt8 = mallocInt8\n\nfunction mallocInt16(n) {\n  return new Int16Array(mallocArrayBuffer(2*n), 0, n)\n}\nexports.mallocInt16 = mallocInt16\n\nfunction mallocInt32(n) {\n  return new Int32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocInt32 = mallocInt32\n\nfunction mallocFloat(n) {\n  return new Float32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocFloat32 = exports.mallocFloat = mallocFloat\n\nfunction mallocDouble(n) {\n  return new Float64Array(mallocArrayBuffer(8*n), 0, n)\n}\nexports.mallocFloat64 = exports.mallocDouble = mallocDouble\n\nfunction mallocUint8Clamped(n) {\n  if(hasUint8C) {\n    return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n)\n  } else {\n    return mallocUint8(n)\n  }\n}\nexports.mallocUint8Clamped = mallocUint8Clamped\n\nfunction mallocDataView(n) {\n  return new DataView(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocDataView = mallocDataView\n\nfunction mallocBuffer(n) {\n  n = bits.nextPow2(n)\n  var log_n = bits.log2(n)\n  var cache = BUFFER[log_n]\n  if(cache.length > 0) {\n    return cache.pop()\n  }\n  return new Buffer(n)\n}\nexports.mallocBuffer = mallocBuffer\n\nexports.clearCache = function clearCache() {\n  for(var i=0; i<32; ++i) {\n    POOL.UINT8[i].length = 0\n    POOL.UINT16[i].length = 0\n    POOL.UINT32[i].length = 0\n    POOL.INT8[i].length = 0\n    POOL.INT16[i].length = 0\n    POOL.INT32[i].length = 0\n    POOL.FLOAT[i].length = 0\n    POOL.DOUBLE[i].length = 0\n    POOL.UINT8C[i].length = 0\n    DATA[i].length = 0\n    BUFFER[i].length = 0\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typedarray-pool/pool.js\n// module id = 52\n// module chunks = 0","\"use strict\"\n\nfunction unique_pred(list, compare) {\n  var ptr = 1\n    , len = list.length\n    , a=list[0], b=list[0]\n  for(var i=1; i<len; ++i) {\n    b = a\n    a = list[i]\n    if(compare(a, b)) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      list[ptr++] = a\n    }\n  }\n  list.length = ptr\n  return list\n}\n\nfunction unique_eq(list) {\n  var ptr = 1\n    , len = list.length\n    , a=list[0], b = list[0]\n  for(var i=1; i<len; ++i, b=a) {\n    b = a\n    a = list[i]\n    if(a !== b) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      list[ptr++] = a\n    }\n  }\n  list.length = ptr\n  return list\n}\n\nfunction unique(list, compare, sorted) {\n  if(list.length === 0) {\n    return list\n  }\n  if(compare) {\n    if(!sorted) {\n      list.sort(compare)\n    }\n    return unique_pred(list, compare)\n  }\n  if(!sorted) {\n    list.sort()\n  }\n  return unique_eq(list)\n}\n\nmodule.exports = unique\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uniq/uniq.js\n// module id = 53\n// module chunks = 0","var hiddenStore = require('./hidden-store.js');\n\nmodule.exports = createStore;\n\nfunction createStore() {\n    var key = {};\n\n    return function (obj) {\n        if ((typeof obj !== 'object' || obj === null) &&\n            typeof obj !== 'function'\n        ) {\n            throw new Error('Weakmap-shim: Key must be object')\n        }\n\n        var store = obj.valueOf(key);\n        return store && store.identity === key ?\n            store : hiddenStore(obj, key);\n    };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/weakmap-shim/create-store.js\n// module id = 54\n// module chunks = 0","module.exports = hiddenStore;\n\nfunction hiddenStore(obj, key) {\n    var store = { identity: key };\n    var valueOf = obj.valueOf;\n\n    Object.defineProperty(obj, \"valueOf\", {\n        value: function (value) {\n            return value !== key ?\n                valueOf.apply(this, arguments) : store;\n        },\n        writable: true\n    });\n\n    return store;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/weakmap-shim/hidden-store.js\n// module id = 55\n// module chunks = 0","// Original - @Gozola.\n// https://gist.github.com/Gozala/1269991\n// This is a reimplemented version (with a few bug fixes).\n\nvar createStore = require('./create-store.js');\n\nmodule.exports = weakMap;\n\nfunction weakMap() {\n    var privates = createStore();\n\n    return {\n        'get': function (key, fallback) {\n            var store = privates(key)\n            return store.hasOwnProperty('value') ?\n                store.value : fallback\n        },\n        'set': function (key, value) {\n            privates(key).value = value;\n            return this;\n        },\n        'has': function(key) {\n            return 'value' in privates(key);\n        },\n        'delete': function (key) {\n            return delete privates(key).value;\n        }\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/weakmap-shim/index.js\n// module id = 56\n// module chunks = 0","import createShader from \"gl-shader\";\nimport createBuffer from \"gl-buffer\";\nimport flyCamera from \"gl-flyCamera\";\nimport glMatrix from \"gl-matrix\";\nimport vertexShader from \"./shaders/scene.vert\";\nimport fragmentShader from \"./shaders/scene.frag\";\nimport Stats from \"stats.js\";\n\nconst demo = {\n\tstats: new Stats(),\n\tcontrols: new flyCamera({\n\t\tmovementSpeed: 5.0,\n\t\trollSpeed: Math.PI / 3\n\t}),\n\tdefaultQuality: 1,\n\tquality: 1,\n\tshader: undefined,\n\tbuffer: undefined,\n\tlastTimeStamp: 0,\n\tstartTime: undefined,\n\tellapsedTime: undefined,\n\tgl: undefined,\n\tcanvas: document.body.appendChild(document.createElement(\"canvas\")),\n\tcreateContext: function(){\n\t\tthis.gl = (\n\t\t\tthis.canvas.getContext(\"webgl\") ||\n\t\t\tthis.canvas.getContext(\"webgl-experimental\") ||\n\t\t\tthis.canvas.getContext(\"experimental-webgl\")\n\t\t);\n\t\tif (!this.gl) {\n\t\t\tthrow new Error(\"Unable to initialize gl\");\n\t\t}\n\t},\n\trender: function(dt){\n\t\tthis.stats.begin();\n\n\t\t//Bind shader\n\t\tthis.shader.bind();\n\n\t\t//Bind buffer\n\t\tthis.buffer.bind();\n\n\t\t//Set attributes\n\t\tthis.shader.attributes.position.pointer();\n\n\t\t//Set uniforms\n\t\tthis.shader.uniforms.uResolution = [this.canvas.width, this.canvas.height];\n\n\t\tconst vectorDir = glMatrix.vec3.fromValues( 0, 0, -1 );\n\t\tglMatrix.vec3.transformQuat( vectorDir, vectorDir, this.controls.quaternion );\n\t\tglMatrix.vec3.normalize( vectorDir, vectorDir );\n\t\tconst vectorUp = glMatrix.vec3.fromValues( 0, 1, 0 );\n\t\tglMatrix.vec3.transformQuat( vectorUp, vectorUp, this.controls.quaternion );\n\t\tglMatrix.vec3.normalize( vectorUp, vectorUp );\n\n\t\tthis.shader.uniforms.uCamPosition = this.controls.position;\n\t\tthis.shader.uniforms.uCamUp = vectorUp;\n\t\tthis.shader.uniforms.uCamDir = vectorDir;\n\n\t\tthis.shader.uniforms.uGlobalTime += dt / 3000;\n\t\tthis.shader.uniforms.uMinimumDistance = 0.005;\n\t\tthis.shader.uniforms.uNormalDistance = 1.3;\n\t\tthis.shader.uniforms.uAnaglyph = 0;\n\t\tthis.shader.uniforms.uForms = 3;\n\t\tthis.shader.uniforms.uSpaceFolding = 1;\n\n\t\t//Draw\n\t\tthis.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n\n\t\tthis.controls.update(dt);\n\t\tthis.stats.end();\n\t},\n\tloop: function(timeStamp){\n\t\tif (!this.startTime) {\n\t\t\tthis.startTime = timeStamp;\n\t\t}\n\t\tthis.ellapsedTime = timeStamp - this.startTime;\n\t\tvar dt = timeStamp - this.lastTimeStamp;\n\t\tthis.lastTimeStamp = timeStamp;\n\n\t\tif (this.ellapsedTime < 5000 && dt > 45.0){\n\t\t\tthis.quality = this.quality - 0.01;\n\t\t\tthis.resizeCanvas();\n\t\t}\n\t\tthis.render(dt);\n\t\twindow.requestAnimationFrame(this.loop.bind(this));\n\t},\n\tresizeCanvas: function(){\n\t\tthis.canvas.width = window.innerWidth * this.quality;\n\t\tthis.canvas.height = window.innerHeight * this.quality;\n\t\tthis.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n\t},\n\tresize: function(){\n\t\tconst canvas = this.gl.canvas;\n\t\tthis.quality = this.defaultQuality;\n\t\tconst displayWidth  = window.innerWidth * this.quality;\n\t\tconst displayHeight = window.innerHeight * this.quality;\n\n\t\tif (canvas.width  !== displayWidth || canvas.height !== displayHeight) {\n\t\t\tthis.startTime = 0;\n\t\t\tthis.resizeCanvas();\n\t\t}\n\t},\n\tkeydown: function(event){\n\t\tif ( event.altKey ) {\n\t\t\t\treturn;\n\t\t}\n\t\tevent.preventDefault();\n\t\tif( event.shiftKey ){\n\t\t\tswitch ( event.keyCode ) {\n\t\t\t\tcase 187: /* + */ this.quality += 0.05; this.resizeCanvas(); break;\n\t\t\t\tcase 189: /* - */ this.quality -= 0.05; this.resizeCanvas(); break;\n\t\t\t}\n\t\t}\n\t},\n\tinit: function(){\n\t\tthis.createContext();\n\t\tthis.canvas.width  = window.innerWidth * this.quality;\n\t\tthis.canvas.height = window.innerHeight * this.quality;\n\t\tthis.canvas.style.width  = \"100%\";\n\t\tthis.canvas.style.height = \"100%\";\n\t\tdocument.body.appendChild( this.stats.dom );\n\t\tthis.controls.start();\n\t\t//Create full screen vertex buffer\n\t\tthis.buffer = createBuffer(this.gl, [\n\t\t\t// First triangle:\n\t\t\t 1.0,  1.0,\n\t\t\t-1.0,  1.0,\n\t\t\t-1.0, -1.0,\n\t\t\t// Second triangle:\n\t\t\t-1.0, -1.0,\n\t\t\t 1.0, -1.0,\n\t\t\t 1.0,  1.0\n\t\t]);\n\n\t\t//Create shader\n\t\tthis.shader = createShader(\n\t\t\tthis.gl,\n\t\t\tvertexShader,\n\t\t\tfragmentShader\n\t\t);\n\t\tthis.shader.attributes.position.location = 0\n\n\t\twindow.addEventListener(\"resize\", this.resize.bind(this)); \n\t\twindow.addEventListener(\"keydown\", this.keydown.bind(this));\n\t\twindow.requestAnimationFrame(this.loop.bind(this));\n\t}\n}\ndemo.init();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./index.js\n// module id = 57\n// module chunks = 0"],"sourceRoot":""}